{
  "8": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Rank",
      "y_name": "COUNT(Rank)",
      "x_data": [
        [
          "AssocProf",
          "AsstProf",
          "Instructor",
          "Professor"
        ]
      ],
      "y_data": [
        [
          8,
          15,
          8,
          27
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Rank",
      "sort": null
    },
    "nl_queries": [
      "A pie chart showing the number of faculty members for each rank.",
      "What is the number of the faculty members for each rank? Return a pie.",
      "Compute the total the number of rank across rank as a pie chart."
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "9": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "COUNT(Rank)",
      "x_data": [
        [
          "AssocProf",
          "AsstProf",
          "Instructor",
          "Professor"
        ]
      ],
      "y_data": [
        [
          8,
          15,
          8,
          27
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Rank",
      "sort": null
    },
    "nl_queries": [
      "Show the number of faculty members for each rank in a bar chart.",
      "What is the number of the faculty members for each rank? Visualize in bar chart."
    ],
    "irrelevant_tables": [
      "Student",
      "Activity"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "14": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Rank",
      "y_name": "COUNT(Rank)",
      "x_data": [
        [
          "AssocProf",
          "AsstProf",
          "Instructor",
          "Professor"
        ]
      ],
      "y_data": [
        [
          8,
          15,
          8,
          27
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Rank",
      "sort": null
    },
    "nl_queries": [
      "How many faculty members do we have for each rank? Visualize by pie chart.",
      "Give me a pie to show the number of rank from different rank."
    ],
    "irrelevant_tables": [
      "Student",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "21": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          3,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the number of male and female assistant professors with a pie chart.",
      "A pie chart about how many male and female assistant professors do we have?"
    ],
    "irrelevant_tables": [
      "Activity",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "33": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Description",
      "y_name": "COUNT(Description)",
      "x_data": [
        [
          "Heavy-lift helicopter",
          "Light utility helicopter",
          "Tandem rotor helicopter",
          "Turboshaft utility helicopter"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Description",
      "sort": null
    },
    "nl_queries": [
      "A pie chart for what are the number of the descriptions for the aircrafts?",
      "What are the descriptions for the aircrafts, and count them by a pie chart",
      "A pie chart for listing the number of the description of all aircrafts.",
      "List the description of all aircrafts, and count them by a pie chart"
    ],
    "irrelevant_tables": [
      "airport_aircraft",
      "airport"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "34": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Description",
      "y_name": "COUNT(Description)",
      "x_data": [
        [
          "Heavy-lift helicopter",
          "Light utility helicopter",
          "Tandem rotor helicopter",
          "Turboshaft utility helicopter"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Description",
      "sort": null
    },
    "nl_queries": [
      "A bar chart for listing the number of the description of all aircrafts.",
      "A bar chart for what are the number of the descriptions for the aircrafts?",
      "List the description of all aircrafts, and count them by a bar chart",
      "What are the descriptions for the aircrafts, and count them by a bar chart",
      "Draw a bar chart of description versus the number of description"
    ],
    "irrelevant_tables": [
      "airport",
      "match"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "46": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "AllergyType",
      "y_name": "COUNT(AllergyType)",
      "x_data": [
        [
          "animal",
          "environmental",
          "food"
        ]
      ],
      "y_data": [
        [
          4,
          3,
          7
        ]
      ],
      "classify": [],
      "describe": "GROUP BY AllergyType",
      "sort": null
    },
    "nl_queries": [
      "Show the number of each allergiy type in a pie chart.",
      "Compute the total the number of allergytype across allergytype as a pie chart."
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "62": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Age , count(*) FROM Student GROUP BY age",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Age , count(*) FROM Student GROUP BY age"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Age",
      "y_name": "count(*)",
      "x_data": [
        [
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          26,
          27
        ]
      ],
      "y_data": [
        [
          1,
          4,
          10,
          4,
          8,
          2,
          2,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a scatter on how old is each student and how many students are each age?",
      "How old is each student and how many students are each age. Visualize by scatter chart."
    ],
    "irrelevant_tables": [
      "Allergy_Type",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "63": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "pie",
      "x_name": "apt_type_code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Studio",
          "Duplex",
          "Flat"
        ]
      ],
      "y_data": [
        [
          4,
          5,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order by a pie chart.",
      "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. Visualize by pie chart.",
      "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments with a pie chart.",
      "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. Visualize by pie chart."
    ],
    "irrelevant_tables": [
      "Guests",
      "Apartment_Buildings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "64": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "apt_type_code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Studio",
          "Duplex",
          "Flat"
        ]
      ],
      "y_data": [
        [
          4,
          5,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order in a bar chart.",
      "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. Show bar chart.",
      "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments by a bar chart."
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Apartment_Bookings"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "74": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "booking_status_code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Confirmed",
          "Provisional"
        ]
      ],
      "y_data": [
        [
          7,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the booking status code and the corresponding number of bookings in a bar chart.",
      "Show the booking status code and the corresponding number of bookings. Show bar chart.",
      "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
      "Show me a bar chart for how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
      "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings with a bar chart.",
      "Plot the total number by grouped by booking status code as a bar graph"
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Apartment_Buildings"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "86": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings",
        "binning": "BIN booking_start_date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings BIN booking_start_date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "booking_start_date",
      "y_name": "COUNT(booking_start_date)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          1,
          1,
          2,
          4,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN booking_start_date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Show the number of apartment bookings in each weekday and bin booking start date by weekday with a bar chart.",
      "How many apartment bookings in each weekday? Show me a bar chart binning booking start date by weekday."
    ],
    "irrelevant_tables": [
      "Apartment_Buildings",
      "View_Unit_Status"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "93": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "pie",
      "x_name": "gender_code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Female",
          "Male",
          "Unknown"
        ]
      ],
      "y_data": [
        [
          9,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show each gender code and the corresponding count of guests sorted by the count in descending order by a pie chart.",
      "Show each gender code and the corresponding count of guests sorted by the count in descending order. Show a pie chart.",
      "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts with a pie chart.",
      "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts. Visualize by pie chart."
    ],
    "irrelevant_tables": [
      "Apartment_Buildings",
      "Apartment_Bookings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "94": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender_code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Female",
          "Male",
          "Unknown"
        ]
      ],
      "y_data": [
        [
          9,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show each gender code and the corresponding count of guests sorted by the count in descending order by a bar chart.",
      "Show each gender code and the corresponding count of guests sorted by the count in descending order. Show bar chart.",
      "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts in a bar chart.",
      "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts. Show bar chart."
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Apartment_Buildings"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "95": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "pie",
      "x_name": "apt_type_code",
      "y_name": "min(room_count)",
      "x_data": [
        [
          "Duplex",
          "Flat",
          "Studio"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the minimum room count of apartments in different type with a pie chart.",
      "Return a pie chart showing the minimum room count of apartments in different type.",
      "Create a pie chart showing minimal room count across apt type code."
    ],
    "irrelevant_tables": [
      "Apartment_Buildings",
      "Apartment_Bookings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "96": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "apt_type_code",
      "y_name": "min(room_count)",
      "x_data": [
        [
          "Duplex",
          "Flat",
          "Studio"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the minimum room count of apartments in different type with a bar chart.",
      "Return a bar chart showing the minimum room count of apartments in different type.",
      "Bar graph to show minimal room count from different apt type code"
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Apartment_Bookings"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "173": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "battle_death",
    "vis_obj": {
      "chart": "pie",
      "x_name": "result",
      "y_name": "COUNT(result)",
      "x_data": [
        [
          "Bulgarian victory",
          "Two Year Truce"
        ]
      ],
      "y_data": [
        [
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY result",
      "sort": null
    },
    "nl_queries": [
      "A pie chart showing the number of results of the battles when the bulgarian commander is not 'Boril'."
    ],
    "irrelevant_tables": [
      "ship",
      "death"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "186": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "last_name",
      "y_name": "COUNT(last_name)",
      "x_data": [
        [
          "Becker",
          "Bergnaum",
          "Brakus",
          "Goldner",
          "Hansen",
          "Heller",
          "Kuhic",
          "Lang",
          "Medhurst",
          "Moore",
          "Price",
          "Schultz",
          "Schuster",
          "Ward"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY last_name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of last names of teachers in alphabetical order of last name with a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Assessment_Notes"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "189": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details",
        "binning": "BIN date_address_to BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details BIN date_address_to BY MONTH"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "COUNT(date_address_to)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          1,
          6
        ],
        [
          1,
          12
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_to BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "Show me about the distribution of date_address_to and the amount of date_address_to, and group by attribute other_details and bin date_address_to by month in a bar chart.",
      "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to, and group by attribute other_details and bin date_address_to by month.",
      "A bar chart shows the distribution of date_address_to and the amount of date_address_to, and group by attribute other_details and bin date_address_to by month.",
      "Find date_address_to and the amount of date_address_to, and colored by attribute other_details and bin date_address_to by month, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Teachers",
      "Ref_Address_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "194": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          1297.3186,
          6052.69338
        ],
        [
          747.5312,
          10726.4778
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_to BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "Show me about the distribution of date_address_to and the sum of monthly_rental, and group by attribute other_details and bin date_address_to by month in a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Incident_Type",
      "Ref_Detention_Type"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "195": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          1297.3186,
          1008.78223
        ],
        [
          747.5312,
          893.87315
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_to BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the average of monthly_rental over the  date_address_to , and group by attribute other_details and bin date_address_to by month by a bar chart."
    ],
    "irrelevant_tables": [
      "Behavior_Incident",
      "Ref_Detention_Type"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "196": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details BIN date_address_from BY YEAR"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "COUNT(date_address_from)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          5,
          2
        ],
        [
          9,
          4
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "A bar chart shows the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year.",
      "Show me about the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year in a bar chart.",
      "Visualize a bar chart about the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year.",
      "Give me the comparison about the amount of date_address_from over the  date_address_from , and group by attribute other_details and bin date_address_from by year by a bar chart.",
      "Return a bar chart about the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year."
    ],
    "irrelevant_tables": [
      "Behavior_Incident",
      "Ref_Address_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "201": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          5019.3333,
          2330.6787
        ],
        [
          8296.2672,
          3177.7418
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by year by a bar chart.",
      "Show me about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by year in a bar chart.",
      "Visualize a bar chart about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by year.",
      "Return a bar chart about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by year.",
      "Draw a bar chart about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by year."
    ],
    "irrelevant_tables": [
      "Students_in_Detention",
      "Teachers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "202": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          1003.86666,
          1165.33935
        ],
        [
          921.8074667,
          794.43545
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Visualize a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by year.",
      "Give me the comparison about the average of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by year by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "205": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "COUNT(date_address_to)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          2,
          18
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_to BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "Show me about the distribution of  date_address_to and the amount of date_address_to bin date_address_to by month in a bar chart.",
      "Give me the comparison about the amount of date_address_to over the  date_address_to bin date_address_to by month by a bar chart.",
      "Find  date_address_to and the amount of date_address_to bin date_address_to by month, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "210": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          2330.7852,
          0,
          2044.1059,
          1032.8717,
          0,
          0,
          1942.2492
        ],
        [
          679.2988,
          2835.213,
          865.2615,
          1894.2702,
          2007.1954,
          0,
          3192.7701
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_to BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Detention_Type",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "211": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1165.3926,
          0,
          1022.05295,
          1032.8717,
          0,
          0,
          971.1246
        ],
        [
          679.2988,
          945.071,
          865.2615,
          947.1351,
          1003.5977,
          0,
          798.1925
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_to BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "219": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "other_details",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "apartment",
          "house"
        ]
      ],
      "y_data": [
        [
          1050.0017142857143,
          882.6160769230771
        ]
      ],
      "classify": [],
      "describe": "GROUP BY other_details",
      "sort": null
    },
    "nl_queries": [
      "Show me about the distribution of  other_details and the average of monthly_rental , and group by attribute other_details in a bar chart.",
      "Return a bar chart about the distribution of  other_details and the average of monthly_rental , and group by attribute other_details.",
      "Draw a bar chart about the distribution of  other_details and the average of monthly_rental , and group by attribute other_details.",
      "A bar chart shows the distribution of  other_details and the average of monthly_rental , and group by attribute other_details."
    ],
    "irrelevant_tables": [
      "Ref_Detention_Type",
      "Students_in_Detention"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "224": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1032.8717,
          1297.3186,
          1036.8462,
          644.9306,
          1297.807,
          1032.9782,
          1007.2597
        ],
        [
          2559.8116,
          865.2615,
          0,
          756.6745,
          2864.7297,
          1867.9597,
          2559.572
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart.",
      "Find  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday, and visualize them by a bar chart.",
      "Show me about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday in a bar chart."
    ],
    "irrelevant_tables": [
      "Assessment_Notes",
      "Ref_Incident_Type"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "225": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1032.8717,
          1297.3186,
          1036.8462,
          644.9306,
          1297.807,
          1032.9782,
          1007.2597
        ],
        [
          853.27055,
          865.2615,
          0,
          756.6745,
          954.9099,
          933.97985,
          853.19065
        ]
      ],
      "classify": [
        "apartment",
        "house"
      ],
      "describe": "GROUP BY other_details, BIN date_address_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday."
    ],
    "irrelevant_tables": [
      "Assessment_Notes",
      "Teachers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": false
      }
    ]
  },
  "231": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          1022.4249,
          932.1761767
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_to BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_to and the average of monthly_rental bin date_address_to by month, and visualize them by a bar chart.",
      "Draw a bar chart about the distribution of  date_address_to and the average of monthly_rental bin date_address_to by month.",
      "A bar chart shows the distribution of  date_address_to and the average of monthly_rental bin date_address_to by month.",
      "Give me the comparison about the average of monthly_rental over the  date_address_to bin date_address_to by month by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Ref_Detention_Type"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "233": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "COUNT(date_address_from)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          14,
          6
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_from and the amount of date_address_from bin date_address_from by year, and visualize them by a bar chart.",
      "Give me the comparison about the amount of date_address_from over the  date_address_from bin date_address_from by year by a bar chart.",
      "Show me about the distribution of  date_address_from and the amount of date_address_from bin date_address_from by year in a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Detention_Type",
      "Ref_Incident_Type"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "238": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_to BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_to",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          3010.084,
          2835.213,
          2909.3674,
          2927.1419,
          2007,
          0,
          5135.0193
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_to BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the sum of monthly_rental over the  date_address_to bin date_address_to by weekday by a bar chart.",
      "Find  date_address_to and the sum of monthly_rental bin date_address_to by weekday, and visualize them by a bar chart.",
      "A bar chart shows the distribution of  date_address_to and the sum of monthly_rental bin date_address_to by weekday.",
      "Show me about the distribution of  date_address_to and the sum of monthly_rental bin date_address_to by weekday in a bar chart."
    ],
    "irrelevant_tables": [
      "Detention",
      "Assessment_Notes"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "246": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          13315.6005,
          5508.4205
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of  date_address_from and the sum of monthly_rental bin date_address_from by year.",
      "Return a bar chart about the distribution of  date_address_from and the sum of monthly_rental bin date_address_from by year.",
      "Give me the comparison about the sum of monthly_rental over the  date_address_from bin date_address_from by year by a bar chart.",
      "Find  date_address_from and the sum of monthly_rental bin date_address_from by year, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Incident_Type",
      "Students_in_Detention"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "247": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          951.1143214,
          918.0700833
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_from and the average of monthly_rental bin date_address_from by year, and visualize them by a bar chart.",
      "Draw a bar chart about the distribution of  date_address_from and the average of monthly_rental bin date_address_from by year.",
      "Return a bar chart about the distribution of  date_address_from and the average of monthly_rental bin date_address_from by year.",
      "Show me about the distribution of  date_address_from and the average of monthly_rental bin date_address_from by year in a bar chart."
    ],
    "irrelevant_tables": [
      "Assessment_Notes",
      "Ref_Address_Types"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "248": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "COUNT(date_address_from)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          1,
          2,
          4,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Find  date_address_from and the amount of date_address_from bin date_address_from by weekday, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Ref_Address_Types",
      "Behavior_Incident"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "252": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "pie",
      "x_name": "other_details",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "apartment",
          "house"
        ]
      ],
      "y_data": [
        [
          7345,
          11469
        ]
      ],
      "classify": [],
      "describe": "GROUP BY other_details",
      "sort": null
    },
    "nl_queries": [
      "Return a pie chart about the proportion of  other_details and the sum of monthly_rental.",
      "For the attribute  other_details and the sum of monthly_rental, show their proportion by a pie chart."
    ],
    "irrelevant_tables": [
      "Detention",
      "Students_in_Detention"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "264": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "SUM(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          3592.6833,
          2162.5801,
          1036.8462,
          1401.6051,
          4162.5367,
          2900.9379,
          3566.8317
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Return a bar chart about the distribution of  date_address_from and the sum of monthly_rental bin date_address_from by weekday.",
      "Find  date_address_from and the sum of monthly_rental bin date_address_from by weekday, and visualize them by a bar chart.",
      "Show me about the distribution of  date_address_from and the sum of monthly_rental bin date_address_from by weekday in a bar chart.",
      "Draw a bar chart about the distribution of  date_address_from and the sum of monthly_rental bin date_address_from by weekday."
    ],
    "irrelevant_tables": [
      "Detention",
      "Assessment_Notes"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "265": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC",
        "binning": "BIN date_address_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_address_from",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          898.170825,
          1081.29005,
          1036.8462,
          700.80255,
          1040.634175,
          966.9793,
          891.707925
        ]
      ],
      "classify": [],
      "describe": "BIN date_address_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the average of monthly_rental over the  date_address_from bin date_address_from by weekday by a bar chart.",
      "Show me about the distribution of  date_address_from and the average of monthly_rental bin date_address_from by weekday in a bar chart.",
      "Find  date_address_from and the average of monthly_rental bin date_address_from by weekday, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "Behavior_Incident",
      "Ref_Incident_Type"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "267": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "line",
      "x_name": "date_address_from",
      "y_name": "monthly_rental",
      "x_data": [
        [
          "2018-03-23",
          "2017-10-31",
          "2017-07-21",
          "2017-09-10",
          "2017-06-19",
          "2018-01-13",
          "2017-03-29",
          "2017-09-23",
          "2018-03-05",
          "2017-11-12",
          "2017-04-28",
          "2017-04-18",
          "2017-10-16",
          "2017-08-12",
          "2017-06-22",
          "2018-02-18",
          "2018-01-12",
          "2018-02-04",
          "2017-08-17",
          "2017-10-09"
        ]
      ],
      "y_data": [
        [
          1297.807,
          1297.3186,
          1287.5604,
          1132.742,
          1113.0996,
          1067.8383,
          1036.8462,
          1032.9782,
          1032.8717,
          1007.2597,
          894.0958,
          865.2615,
          826.4319,
          800.1214,
          756.6745,
          747.5312,
          683.0735,
          679.2988,
          644.9306,
          620.2801
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a line chart about the change of  monthly_rental over  date_address_from .",
      "A line chart shows the trend of  monthly_rental over  date_address_from .",
      "Show me the trend about  monthly_rental over  date_address_from  with a line chart."
    ],
    "irrelevant_tables": [
      "Students",
      "Assessment_Notes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "273": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "line",
      "x_name": "date_address_to",
      "y_name": "AVG(monthly_rental)",
      "x_data": [
        [
          "2018-02-25 05:21:34",
          "2018-02-27 04:45:57",
          "2018-03-02 00:19:57",
          "2018-03-04 06:05:45",
          "2018-03-04 06:51:19",
          "2018-03-04 13:24:28",
          "2018-03-04 17:04:35",
          "2018-03-05 21:12:37",
          "2018-03-06 21:41:20",
          "2018-03-07 04:29:28",
          "2018-03-12 02:57:48",
          "2018-03-12 17:21:24",
          "2018-03-14 09:12:05",
          "2018-03-14 17:00:44",
          "2018-03-15 04:44:58",
          "2018-03-15 10:37:19",
          "2018-03-18 03:28:47",
          "2018-03-20 09:02:48",
          "2018-03-22 17:56:20",
          "2018-03-23 09:52:56"
        ]
      ],
      "y_data": [
        [
          1297.3186,
          747.5312,
          1113.0996,
          683.0735,
          1132.742,
          644.9306,
          756.6745,
          1032.9782,
          800.1214,
          865.2615,
          679.2988,
          1297.807,
          1036.8462,
          1007.2597,
          1032.8717,
          826.4319,
          620.2801,
          1287.5604,
          1067.8383,
          894.0958
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date_address_to",
      "sort": null
    },
    "nl_queries": [
      "Show me about the change of the average of monthly_rental over  date_address_to , and group by attribute date_address_to in a line chart.",
      "Return a line chart about the change of the average of monthly_rental over  date_address_to , and group by attribute date_address_to.",
      "A line chart shows the change of the average of monthly_rental over  date_address_to , and group by attribute date_address_to",
      "Show me the trend about the average of monthly_rental over  date_address_to , and group by attribute date_address_to with a line chart."
    ],
    "irrelevant_tables": [
      "Ref_Detention_Type",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "285": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "mean_temperature_f",
      "x_data": [
        [
          "7/30/2015",
          "5/1/2014",
          "5/12/2015"
        ]
      ],
      "y_data": [
        [
          71,
          72,
          58
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For the top 3 days with the largest max wind speeds, show the date and average temperature with a bar chart."
    ],
    "irrelevant_tables": [
      "station",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "286": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "mean_humidity",
      "x_data": [
        [
          "7/30/2015",
          "5/1/2014",
          "5/12/2015"
        ]
      ],
      "y_data": [
        [
          75,
          43,
          52
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What are the date and mean humidity for the top 3 days with the largest max wind speeds? Return me a bar chart."
    ],
    "irrelevant_tables": [
      "station",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "291": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "Tue",
          "Thur"
        ]
      ],
      "y_data": [
        [
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For the days with the 3 largest maximum wind speeds, show me the frequency of their corresponding date in the weekdays level using a bar chart."
    ],
    "irrelevant_tables": [
      "trip",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "292": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "mean_temperature_f",
      "y_name": "mean_humidity",
      "x_data": [
        [
          71,
          72,
          58
        ]
      ],
      "y_data": [
        [
          75,
          43,
          52
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For the top 3 days with the largest max wind speeds, just show the average temperature and mean humidity using a scatter chart.",
      "Give me a scatter chart with average temperature and mean humidity for the days with the 3 largest maximum wind speeds?"
    ],
    "irrelevant_tables": [
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "293": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "SUM(mean_temperature_f)",
      "x_data": [
        [
          "Tue",
          "Thur"
        ]
      ],
      "y_data": [
        [
          58,
          143
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For the top 3 days with the largest max wind speeds, please bin the date into the day of the week and then sum the mean temperature for a bar chart."
    ],
    "irrelevant_tables": [
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "295": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , SUM(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , SUM(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "SUM(mean_humidity)",
      "x_data": [
        [
          "Tue",
          "Thur"
        ]
      ],
      "y_data": [
        [
          52,
          118
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For the top 3 days with the largest max wind speeds, please bin the date into day of the week and then sum the mean humidity to visualize a bar chart.",
      "For those days with the 3 largest maximum wind speeds, can you plot a bar chart to compare the total mean humidity of each day of the weeks? "
    ],
    "irrelevant_tables": [
      "status",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "296": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , AVG(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , AVG(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "AVG(mean_humidity)",
      "x_data": [
        [
          "Mon",
          "Thur"
        ]
      ],
      "y_data": [
        [
          52,
          59
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For the top 3 days with the largest max wind speeds, please bin the date into the of the week and then compute the average of mean humidity to visualize a bar chart."
    ],
    "irrelevant_tables": [
      "station",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "297": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80",
        "binning": "BIN date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 BIN date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "2013",
          "2014",
          "2015"
        ]
      ],
      "y_data": [
        [
          26,
          95,
          61
        ]
      ],
      "classify": [],
      "describe": "BIN date BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Give me a bar chart to show how many days with a max temperature greater than or equal to 80 for each year.",
      "For those dates with a max temperature greater than or equal to 80, I want to see the number of days for each year using a bar chart."
    ],
    "irrelevant_tables": [
      "station",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "306": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT city , max(lat) FROM station GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT city , max(lat) FROM station GROUP BY city"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "city",
      "y_name": "max(lat)",
      "x_data": [
        [
          "Mountain View",
          "Palo Alto",
          "Redwood City",
          "San Francisco",
          "San Jose"
        ]
      ],
      "y_data": [
        [
          37.40694000000001,
          37.448598,
          37.491269,
          37.80477,
          37.352601
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each city, return the highest latitude among its stations. Show a pie chart.",
      "For each city, what is the highest latitude for its stations. Visualize by pie chart.",
      "Create a pie chart showing maximal lat across city."
    ],
    "irrelevant_tables": [
      "status",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "312": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT end_station_name , COUNT(end_station_name) FROM trip GROUP BY end_station_name ORDER BY id LIMIT 3",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT end_station_name , COUNT(end_station_name) FROM trip GROUP BY end_station_name ORDER BY id LIMIT 3"
    },
    "chart": "Pie",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "end_station_name",
      "y_name": "COUNT(end_station_name)",
      "x_data": [
        [
          "Harry Bridges Plaza (Ferry Building)",
          "San Francisco Caltrain 2 (330 Townsend)"
        ]
      ],
      "y_data": [
        [
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY end_station_name",
      "sort": null
    },
    "nl_queries": [
      "Give me the proportion of end stations for the trips with the three oldest id using a pie chart.",
      "Please give me a pie chart to show the proportion of end stations for the trips with the three smallest ids?"
    ],
    "irrelevant_tables": [
      "weather",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "316": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          6,
          33,
          26
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date",
      "sort": null
    },
    "nl_queries": [
      "A line chart for giving me the number of the days when the max temperature was higher than 85 degrees each year.",
      "Give me a line chart to show the trend of the number of days in each year when the maximum temperature above 85 degrees",
      "A line chart for what are the number of the dates with a maximum temperature higher than 85 each year?"
    ],
    "irrelevant_tables": [
      "trip",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "335": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          1,
          0,
          2,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For dates had a minimum dew point smaller than any day in zip code 94107, show the total number of such days for each weekday using a bar chart."
    ],
    "irrelevant_tables": [
      "station",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "338": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT city , COUNT(*) FROM station GROUP BY city"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "city",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Mountain View",
          "Palo Alto",
          "Redwood City",
          "San Francisco",
          "San Jose"
        ]
      ],
      "y_data": [
        [
          7,
          5,
          7,
          35,
          16
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Compute the total number of stations across city as a pie chart."
    ],
    "irrelevant_tables": [
      "trip",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "340": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "binning": "BIN date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 BIN date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "2013",
          "2014",
          "2015"
        ]
      ],
      "y_data": [
        [
          7,
          9,
          6
        ]
      ],
      "classify": [],
      "describe": "BIN date BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Using bar chart to show how many days in each year, mean sea level pressure was between 30.3 and 31."
    ],
    "irrelevant_tables": [
      "station",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "342": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches > 30.3 and zip_code = '94107' GROUP BY date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          3,
          6,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date",
      "sort": null
    },
    "nl_queries": [
      "A line chart showing the number of days per year that the mean sea level pressure inches exceeds 30.3 for the area with zip code 94107.",
      "A line chart for what are the number of the dates in which the mean sea level pressure was higher than 30.3 per year in the area with zip code 94107?"
    ],
    "irrelevant_tables": [
      "trip",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "354": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Snatch , Total FROM body_builder",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "body_builder",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Snatch",
      "y_name": "Total",
      "x_data": [
        [
          142.5,
          137.5,
          140,
          137.5,
          130
        ]
      ],
      "y_data": [
        [
          317.5,
          315,
          315,
          312.5,
          292.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a scatter chart about the correlation between  Snatch and  Total .",
      "Return a scatter chart about the correlation between  Snatch and  Total .",
      "A scatter chart shows the correlation between  Snatch and  Total .",
      "Show me about the correlation between  Snatch and  Total  in a scatter chart.",
      "Scatter plot to show snatch on x axis and total on y axis."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "367": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Writer , COUNT(Writer) FROM book GROUP BY Writer ORDER BY Writer ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Writer , COUNT(Writer) FROM book GROUP BY Writer ORDER BY Writer ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "book_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Writer",
      "y_name": "COUNT(Writer)",
      "x_data": [
        [
          "Christopher Hinz",
          "Christopher Moeller",
          "Dave Gibbons",
          "Elaine Lee",
          "Garth Ennis",
          "Howard Chaykin",
          "Michael Moorcock",
          "Timothy Truman"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Writer",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the writers of the books in ascending alphabetical order, and count them by a bar chart",
      "A bar chart for listing the number of the writers of the books in ascending alphabetical order."
    ],
    "irrelevant_tables": [
      "publication"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "376": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "COUNT(Sex)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          2,
          7
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Sex",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the amount of Sex over the  Sex , and group by attribute Sex by a bar chart.",
      "Return a bar chart about the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
      "Show me about the distribution of  Sex and the amount of Sex , and group by attribute Sex in a bar chart.",
      "A bar chart shows the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
      "Find  Sex and the amount of Sex , and group by attribute Sex, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "387": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Height , Weight FROM people GROUP BY Sex",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Height , Weight FROM people GROUP BY Sex"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Height",
      "y_name": "Weight",
      "x_data": [
        [
          200,
          195
        ],
        [
          188,
          197,
          202,
          196,
          193,
          194,
          196
        ]
      ],
      "y_data": [
        [
          94,
          90
        ],
        [
          83,
          85,
          92,
          88,
          89,
          88,
          82
        ]
      ],
      "classify": [
        "F",
        "M"
      ],
      "describe": "GROUP BY Sex",
      "sort": null
    },
    "nl_queries": [
      "Draw a scatter chart about the correlation between  Height and  Weight , and colored by attribute Sex.",
      "A grouped scatter chart shows the correlation between  Height and  Weight , and group by attribute Sex.",
      "Show me about the correlation between  Height and  Weight , and colored by attribute Sex in a scatter chart.",
      "Show height vs weight as scatter plot use a different color for each Sex"
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "399": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Support_rate , Consider_rate FROM candidate",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Support_rate",
      "y_name": "Consider_rate",
      "x_data": [
        [
          0.25,
          0.33,
          0.24,
          0.18,
          0.24,
          0.17
        ]
      ],
      "y_data": [
        [
          0.3,
          0.2,
          0.27,
          0.34,
          0.3,
          0.42
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Plot a scatter chart, to show the correlation between support and consider rates for each candidate.",
      "A scatter showing the correlation between support and consider rates for each candidate.",
      "Plot a scatter chart, support rate by consider_rate."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "400": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Consider_rate , Oppose_rate FROM candidate",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Consider_rate",
      "y_name": "Oppose_rate",
      "x_data": [
        [
          0.3,
          0.2,
          0.27,
          0.34,
          0.3,
          0.42
        ]
      ],
      "y_data": [
        [
          0.43,
          0.45,
          0.43,
          0.44,
          0.32,
          0.32
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A scatter showing the correlation between consider and oppose rates for each candidate.",
      "Scatter plot to show consider rate on x axis and oppose_rate on y axis."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "402": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Count the number of people of each sex who have a weight higher than 85 in a pie chart.",
      "Count the number of people of each sex who have a weight higher than 85. Show a pie chart."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "403": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Count the number of people of each sex who have a weight higher than 85 by a bar chart."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "405": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , avg(weight) FROM people GROUP BY sex",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , avg(weight) FROM people GROUP BY sex"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "avg(weight)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          92,
          86.7142857142857
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A bar chart showing the average weight for each gender.",
      "What is the averag weights for people of each sex? Show a bar chart."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "409": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(weight) , min(weight) FROM people GROUP BY Sex",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(weight) , min(weight) FROM people GROUP BY Sex"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(weight)",
      "y_name": "min(weight)",
      "x_data": [
        [
          92
        ],
        [
          86.7142857142857
        ]
      ],
      "y_data": [
        [
          90
        ],
        [
          82
        ]
      ],
      "classify": [
        "F",
        "M"
      ],
      "describe": "GROUP BY Sex",
      "sort": null
    },
    "nl_queries": [
      "Show avg(weight) vs minimal weight as scatter plot use a different color for each Sex"
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "416": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA",
        "binning": "BIN Year BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY YEAR"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "avg(Weight)",
      "x_data": [
        [
          "1970",
          "1971",
          "1972",
          "1973",
          "1974",
          "1975",
          "1976",
          "1977",
          "1978",
          "1979",
          "1980",
          "1981",
          "1982"
        ]
      ],
      "y_data": [
        [
          3441,
          2960,
          3237,
          3419,
          2877,
          3176,
          3078,
          2997,
          2861,
          3055,
          2436,
          2532,
          2453
        ]
      ],
      "classify": [],
      "describe": "BIN Year BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Show me a line chart of the mean weight change over the year, binning by year"
    ],
    "irrelevant_tables": [
      "car_makers",
      "countries"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "432": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(Accelerate)",
      "y_name": "Cylinders",
      "x_data": [
        [
          13.5,
          24.8,
          20.1,
          21,
          22.2
        ]
      ],
      "y_data": [
        [
          3,
          4,
          5,
          6,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "plot scatter on what is the maximum accelerate for different number of cylinders?",
      "What is the maximum accelerate for different number of cylinders. Show scatter chart.",
      "Scatter plot to show max(accelerate) on x axis and cylinders on y axis."
    ],
    "irrelevant_tables": [
      "car_names",
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "464": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , count(*) FROM cinema GROUP BY LOCATION",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "count(*)",
      "x_data": [
        [
          "County Clare",
          "County Cork",
          "County Dublin",
          "County Laois",
          "County Louth",
          "County Tipperary",
          "County Wicklow"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          1,
          1,
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show each location and the number of cinemas there by a bar chart.",
      "Show each location and the number of cinemas there. Show bar chart.",
      "Create a bar chart showing the total number across location"
    ],
    "irrelevant_tables": [
      "schedule",
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "470": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema",
        "binning": "BIN Openning_year BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "line",
      "x_name": "Openning_year",
      "y_name": "SUM(Capacity)",
      "x_data": [
        [
          "2009",
          "2010",
          "2011",
          "2012",
          "2013",
          "2015"
        ]
      ],
      "y_data": [
        [
          305,
          1633,
          1336,
          368,
          330,
          364
        ]
      ],
      "classify": [],
      "describe": "BIN Openning_year BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "What is the sum of capacity of cinemas open for each year? Return a line chart.",
      "Plot sum capacity over openning year in a line chart"
    ],
    "irrelevant_tables": [
      "film",
      "schedule"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "471": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Openning_year , AVG(Capacity) FROM cinema",
        "binning": "BIN Openning_year BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "line",
      "x_name": "Openning_year",
      "y_name": "AVG(Capacity)",
      "x_data": [
        [
          "2009",
          "2010",
          "2011",
          "2012",
          "2013",
          "2015"
        ]
      ],
      "y_data": [
        [
          305,
          544.3333333333334,
          445.3333333333333,
          368,
          330,
          364
        ]
      ],
      "classify": [],
      "describe": "BIN Openning_year BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Tell me the average of capacity of cinemas open for each year in a line chart."
    ],
    "irrelevant_tables": [
      "film",
      "schedule"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "481": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "city_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "COUNT(Venue)",
      "x_data": [
        [
          "Estadio Cuscatl\u00e1n , San Salvador , El Salvador",
          "Estadio Rigoberto L\u00f3pez , Managua , Nicaragua"
        ]
      ],
      "y_data": [
        [
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Venue",
      "sort": null
    },
    "nl_queries": [
      "What are the venues of all the matches? Sort them in the descending order of match date, and count them by a bar chart",
      "A bar chart for what are the number of the venues of all the matches? Sort them in the descending order of match date.",
      "List venues of all matches in the order of their dates starting from the most recent one, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "temperature",
      "hosting_city"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "491": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Address",
      "y_name": "Num_of_staff",
      "x_data": [
        [
          "909 Walnut Street",
          "1201 Walnut Street",
          "2345 McGee Street",
          "909 Main Street",
          "1100 Main Street"
        ]
      ],
      "y_data": [
        [
          27,
          34,
          425,
          28,
          23
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the address and staff number of the shops that do not have any happy hour. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "member",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "492": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Address",
      "y_name": "Num_of_staff",
      "x_data": [
        [
          "909 Walnut Street",
          "1201 Walnut Street",
          "2345 McGee Street",
          "909 Main Street",
          "1100 Main Street"
        ]
      ],
      "y_data": [
        [
          27,
          34,
          425,
          28,
          23
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the address and staff number of the shops that do not have any happy hour. Visualize by bar chart."
    ],
    "irrelevant_tables": [
      "member",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "494": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Address , count(*) FROM member GROUP BY address",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Address , count(*) FROM member GROUP BY address"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Address",
      "y_name": "count(*)",
      "x_data": [
        [
          "Bridgeport",
          "Cheshire",
          "Hartford",
          "Waterbury"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the number of members living in each address. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "happy_hour",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "505": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Address , AVG(Time_of_purchase) FROM member GROUP BY Address ORDER BY Time_of_purchase",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Address , AVG(Time_of_purchase) FROM member GROUP BY Address ORDER BY Time_of_purchase"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Address",
      "y_name": "AVG(Time_of_purchase)",
      "x_data": [
        [
          "Bridgeport",
          "Cheshire",
          "Hartford",
          "Waterbury"
        ]
      ],
      "y_data": [
        [
          26,
          35,
          21.666666666666668,
          27.5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Address",
      "sort": null
    },
    "nl_queries": [
      "A bar chart showing the average purchase time for each coffee shop address."
    ],
    "irrelevant_tables": [
      "happy_hour",
      "happy_hour_member"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "516": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "EMP_FNAME",
      "y_name": "COUNT(EMP_FNAME)",
      "x_data": [
        [
          "Anne",
          "Annelise",
          "Arnelle",
          "Carlos",
          "Doreen",
          "George",
          "Gerald",
          "Herman",
          "Hermine",
          "Ismael",
          "James",
          "Melanie",
          "Peter",
          "Preston",
          "Ralph",
          "Robert",
          "Ronald",
          "Ross",
          "Van",
          "Willa"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY EMP_FNAME",
      "sort": null
    },
    "nl_queries": [
      "What are the first names of all employees that are professors ordered by date of birth, and count them by a bar chart",
      "A bar chart for what are the number of the first names of all employees that are professors ordered by date of birth?",
      "A bar chart for listing the number of the first name of all employees with job code PROF ordered by their date of birth."
    ],
    "irrelevant_tables": [
      "STUDENT",
      "PROFESSOR"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "517": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "STU_FNAME",
      "y_name": "COUNT(STU_FNAME)",
      "x_data": [
        [
          "John",
          "Juliette",
          "William"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY STU_FNAME",
      "sort": null
    },
    "nl_queries": [
      "Find the number of students whose gpa is lower than the average gpa of all students for different first name in a pie chart.",
      "How many students that has a GPA lower than average? Show me a pie chart grouping by student's first name."
    ],
    "irrelevant_tables": [
      "DEPARTMENT",
      "COURSE"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "536": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(stu_gpa)",
      "y_name": "avg(stu_gpa)",
      "x_data": [
        [
          3.15,
          2.84,
          3.27,
          3.87,
          2.11
        ]
      ],
      "y_data": [
        [
          2.776666666666667,
          2.84,
          3.18,
          3.87,
          2.11
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between maximum and average gpa of all students in each department with a scatter chart.",
      "What is the relationship between highest and average student GPA for every department? Give me a scatter chart."
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "COURSE"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "539": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(stu_gpa)",
      "y_name": "avg(stu_gpa)",
      "x_data": [
        [
          3.15
        ],
        [
          2.84
        ],
        [
          3.27
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "y_data": [
        [
          2.776666666666667
        ],
        [
          2.84
        ],
        [
          3.18
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "classify": [
        "ACCT",
        "BIOL",
        "CIS",
        "EDU",
        "ENGL"
      ],
      "describe": "GROUP BY DEPT_CODE",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between average and maximum gpa of all students in each department with a scatter chart colored by department code.",
      "What is the relationship between average and highest student GPA for every department? Give me a scatter chart colored by department code.",
      "Show the relation between max(stu gpa) and the average of stu gpa for each DEPT_CODE using a grouped scatter chart"
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "ENROLL"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "540": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(stu_gpa)",
      "y_name": "min(stu_gpa)",
      "x_data": [
        [
          3.15
        ],
        [
          2.84
        ],
        [
          3.27
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "y_data": [
        [
          2.26
        ],
        [
          2.84
        ],
        [
          3.09
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "classify": [
        "ACCT",
        "BIOL",
        "CIS",
        "EDU",
        "ENGL"
      ],
      "describe": "GROUP BY DEPT_CODE",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between minimum and maximum gpa of all students in each department with a scatter chart colored by department code.",
      "What is the relationship between lowest and highest student GPA for every department? Give me a scatter chart colored by department code.",
      "Show max(stu gpa) vs minimal stu gpa as scatter plot use a different color for each DEPT_CODE"
    ],
    "irrelevant_tables": [
      "ENROLL",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "541": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(stu_gpa)",
      "y_name": "min(stu_gpa)",
      "x_data": [
        [
          2.776666666666667
        ],
        [
          2.84
        ],
        [
          3.18
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "y_data": [
        [
          2.26
        ],
        [
          2.84
        ],
        [
          3.09
        ],
        [
          3.87
        ],
        [
          2.11
        ]
      ],
      "classify": [
        "ACCT",
        "BIOL",
        "CIS",
        "EDU",
        "ENGL"
      ],
      "describe": "GROUP BY DEPT_CODE",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between minimum and average gpa of all students in each department with a scatter chart colored by department code.",
      "What is the relationship between lowest and average student GPA for every department? Give me a scatter chart colored by department code.",
      "Grouped Scatterplot of minimal stu gpa vs avg(stu gpa) by DEPT_CODE"
    ],
    "irrelevant_tables": [
      "ENROLL",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "542": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "SCHOOL_CODE",
      "y_name": "count(DISTINCT dept_address)",
      "x_data": [
        [
          "A&SCI",
          "BUS"
        ]
      ],
      "y_data": [
        [
          7,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a pie chart for how many different locations does each school have?",
      "Count different addresses of each school by a pie chart.",
      "Count different addresses of each school. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "PROFESSOR",
      "COURSE"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "567": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "STU_FNAME",
      "y_name": "STU_GPA",
      "x_data": [
        [
          "Gerald",
          "Anne",
          "Raphael",
          "Walter",
          "John"
        ]
      ],
      "y_data": [
        [
          3.87,
          3.27,
          3.15,
          3.09,
          2.92
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the gpa of the top 5 students with highest gpa? Show me a bar chart with each student by first name.",
      "Show the GPA of the students (indicated by first name) with the top 5 GPAs in a bar chart."
    ],
    "irrelevant_tables": [
      "EMPLOYEE",
      "COURSE"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "616": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "SUM(salary)",
      "x_data": [
        [
          "Accounting",
          "Astronomy",
          "Athletics",
          "Biology",
          "Comp. Sci.",
          "Cybernetics",
          "Elec. Eng.",
          "English",
          "Finance",
          "Geology",
          "Languages",
          "Marketing",
          "Mech. Eng.",
          "Physics",
          "Pol. Sci.",
          "Psychology",
          "Statistics"
        ]
      ],
      "y_data": [
        [
          194865,
          79070,
          385488,
          122574,
          196266,
          385383,
          296649,
          288354,
          105311,
          99382,
          172264,
          336388,
          159625,
          229152,
          300158,
          122285,
          406770
        ]
      ],
      "classify": [],
      "describe": "GROUP BY dept_name",
      "sort": null
    },
    "nl_queries": [
      "Find  dept_name and the sum of salary , and group by attribute dept_name, and visualize them by a bar chart.",
      "Visualize a bar chart about the distribution of  dept_name and the sum of salary , and group by attribute dept_name."
    ],
    "irrelevant_tables": [
      "teaches",
      "prereq"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "617": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "AVG(salary)",
      "x_data": [
        [
          "Accounting",
          "Astronomy",
          "Athletics",
          "Biology",
          "Comp. Sci.",
          "Cybernetics",
          "Elec. Eng.",
          "English",
          "Finance",
          "Geology",
          "Languages",
          "Marketing",
          "Mech. Eng.",
          "Physics",
          "Pol. Sci.",
          "Psychology",
          "Statistics"
        ]
      ],
      "y_data": [
        [
          48716.25,
          79070,
          77097.6,
          61287,
          98133,
          96345.75,
          74162.25,
          72088.5,
          105311,
          99382,
          57421.333333333336,
          84097,
          79812.5,
          114576,
          100052.66666666667,
          61142.5,
          67795
        ]
      ],
      "classify": [],
      "describe": "GROUP BY dept_name",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of  dept_name and the average of salary , and group by attribute dept_name.",
      "Return a bar chart about the distribution of  dept_name and the average of salary , and group by attribute dept_name."
    ],
    "irrelevant_tables": [
      "time_slot",
      "section"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "622": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(capacity)",
      "y_name": "avg(capacity)",
      "x_data": [
        [
          47,
          12,
          11,
          18,
          27,
          59,
          65,
          34,
          51,
          10,
          30,
          92,
          97,
          28,
          12,
          60,
          109,
          113,
          115,
          120
        ]
      ],
      "y_data": [
        [
          36.5,
          12,
          10.5,
          18,
          27,
          59,
          37.5,
          34,
          51,
          10,
          26,
          92,
          97,
          28,
          11,
          60,
          49.33333333333334,
          113,
          93,
          76
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between average and maximum capacity among rooms in each building with a scatter chart.",
      "What is the relationship between average and greatest capacity for rooms in each building? Show me a scatter chart."
    ],
    "irrelevant_tables": [
      "section",
      "time_slot"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "659": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "LName",
      "y_name": "COUNT(LName)",
      "x_data": [
        [
          "Apap",
          "Cheng",
          "Jones",
          "Kim",
          "Lee",
          "Nelson",
          "Prater",
          "Schmidt",
          "Smith"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY LName",
      "sort": null
    },
    "nl_queries": [
      "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart",
      "What are the last names of female students, ordered by age descending, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Member_of",
      "Faculty"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "664": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Days , SUM(Credits) FROM COURSE GROUP BY Days ORDER BY Credits",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Days , SUM(Credits) FROM COURSE GROUP BY Days ORDER BY Credits"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Days",
      "y_name": "SUM(Credits)",
      "x_data": [
        [
          "Th",
          "W",
          "MT",
          "M",
          "MTW",
          "MW",
          "T",
          "TTh",
          "TW",
          "ThF",
          "Tu"
        ]
      ],
      "y_data": [
        [
          17,
          11,
          9,
          18,
          121,
          15,
          9,
          3,
          3,
          22,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Days",
      "sort": null
    },
    "nl_queries": [
      "Find  Days and the sum of Credits , and group by attribute Days, and visualize them by a bar chart.",
      "Give me the comparison about the sum of Credits over the  Days , and group by attribute Days by a bar chart.",
      "Draw a bar chart about the distribution of  Days and the sum of Credits , and group by attribute Days."
    ],
    "irrelevant_tables": [
      "Enrolled_in",
      "Department"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "665": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Days , AVG(Credits) FROM COURSE GROUP BY Days ORDER BY Credits",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Days , AVG(Credits) FROM COURSE GROUP BY Days ORDER BY Credits"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Days",
      "y_name": "AVG(Credits)",
      "x_data": [
        [
          "M",
          "MT",
          "MTW",
          "MW",
          "T",
          "TTh",
          "TW",
          "Th",
          "ThF",
          "T",
          "W"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          3.27027027027027,
          3,
          3,
          3,
          3,
          2.8333333333333335,
          2.75,
          3,
          2.2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Days",
      "sort": null
    },
    "nl_queries": [
      "Give me the comparison about the average of Credits over the  Days , and group by attribute Days by a bar chart.",
      "Show me about the distribution of  Days and the average of Credits , and group by attribute Days in a bar chart."
    ],
    "irrelevant_tables": [
      "Student",
      "Faculty"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "674": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Credits , DNO FROM COURSE ORDER BY Credits",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "college_3",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Credits",
      "y_name": "DNO",
      "x_data": [
        [
          1,
          1,
          1,
          1,
          2,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      ],
      "y_data": [
        [
          600,
          600,
          600,
          50,
          550,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          600,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          520,
          50,
          50,
          50,
          50,
          50,
          50,
          50,
          50,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          550,
          520,
          520,
          520,
          50
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show me about the correlation between  Credits and  DNO  in a scatter chart."
    ],
    "irrelevant_tables": [
      "Gradeconversion",
      "Faculty"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "688": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "company_office",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "Assets_billion",
      "x_data": [
        [
          "AT&T Inc.",
          "BNP Paribas",
          "Berkshire Hathaway",
          "Chevron",
          "China Construction Bank",
          "Citigroup",
          "ExxonMobil",
          "Gazprom",
          "General Electric",
          "HSBC",
          "Industrial and Commercial Bank of China",
          "JPMorgan Chase",
          "PetroChina",
          "Petrobras",
          "Royal Dutch Shell",
          "Santander Group",
          "Total",
          "Walmart",
          "Wells Fargo"
        ]
      ],
      "y_data": [
        [
          268.5,
          2680.7,
          372.2,
          184.8,
          1408,
          1913.9,
          302.5,
          275.9,
          751.2,
          2467.9,
          1723.5,
          2117.6,
          251.3,
          313.2,
          317.2,
          1570.6,
          192.8,
          180.7,
          1258.1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for what are the name and assets of each company, sorted in ascending order of company name?",
      "Return a bar chart on what are the name and assets of each company, sorted in ascending order of company name?",
      "List the name and assets of each company in ascending order of company name in a bar chart.",
      "List the name and assets of each company in ascending order of company name. Plot them as bar chart."
    ],
    "irrelevant_tables": [
      "buildings",
      "Office_locations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "693": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "France",
          "Netherlands",
          "United States"
        ]
      ],
      "y_data": [
        [
          4,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": null
    },
    "nl_queries": [
      "Show the number of singers in each country with a bar chart.",
      "What is the number of singers for each country? Show a bar chart.",
      "Give me a bar chart for the number of country of each country"
    ],
    "irrelevant_tables": [
      "concert",
      "singer_in_concert"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "697": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Age FROM singer ORDER BY age DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Age",
      "x_data": [
        [
          "Joe Sharp",
          "John Nizinik",
          "Rose White",
          "Timbaland",
          "Justin Brown",
          "Tribal King"
        ]
      ],
      "y_data": [
        [
          52,
          43,
          41,
          32,
          29,
          25
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the age of each singer in a bar chart from the oldest to the youngest.",
      "What is the age of every singer? Return a bar chart in descending order of age?"
    ],
    "irrelevant_tables": [
      "stadium",
      "concert"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "708": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "county_public_safety",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Police_force",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Abbotsford Police Department",
          "Central Saanich Police",
          "RCMP"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Pie chart. how many counties correspond to each police force?",
      "Return a pie chart on how many counties correspond to each police force?"
    ],
    "irrelevant_tables": [
      "city"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "770": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_in_Location_From",
      "y_name": "COUNT(Date_in_Location_From)",
      "x_data": [
        [
          "1972-03-31",
          "1985-05-13",
          "1986-10-14",
          "1997-03-10",
          "2008-06-08",
          "2009-08-18",
          "2010-11-26",
          "2017-01-06"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          2,
          1,
          1,
          1,
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Date_in_Location_From",
      "sort": null
    },
    "nl_queries": [
      "Show the number of documents in different starting date and group by starting date with a line chart.",
      "How many documents in different starting date? Return a line chart grouping by starting date.",
      "Plot how many date in location from over date in location from in a line chart"
    ],
    "irrelevant_tables": [
      "Ref_Document_Types",
      "Employees"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "778": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date), zip_code FROM weather WHERE max_humidity > 80 GROUP BY date,zip_code",
        "binning": ""
      },
      "VQL": "SELECT date , COUNT(date), zip_code FROM weather WHERE max_humidity > 80 GROUP BY date,zip_code"
    },
    "chart": "Grouping Line",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          65,
          259,
          182
        ],
        [
          102,
          310,
          207
        ],
        [
          76,
          285,
          216
        ],
        [
          86,
          243,
          209
        ],
        [
          91,
          289,
          175
        ]
      ],
      "classify": [
        "94041",
        "94063",
        "94107",
        "94301",
        "95113"
      ],
      "describe": "GROUP BY Location_Code, GROUP BY Date_in_Locaton_To",
      "sort": null
    },
    "nl_queries": [
      "Give me a group line chart showing the number of days with max humidity higher than 80 in different area each year."
    ],
    "irrelevant_tables": [
      "trip",
      "status"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "781": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Role_Code , count(*) FROM Employees GROUP BY role_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Role_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "ED",
          "HR",
          "MG",
          "PR",
          "PT"
        ]
      ],
      "y_data": [
        [
          7,
          1,
          1,
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all role codes and the number of employees in each role with a pie chart.",
      "Show all role codes and the number of employees in each role. Show a pie chart.",
      "A pie chart about what is the code of each role and the number of employees in each role?",
      "What is the code of each role and the number of employees in each role. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "Ref_Locations",
      "Ref_Document_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "789": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "line",
      "x_name": "Calendar_Date",
      "y_name": "Day_Number",
      "x_data": [
        [
          "1972-03-31",
          "1976-06-15",
          "1985-05-13",
          "1986-10-14",
          "1987-11-05",
          "1988-02-01",
          "1994-11-15",
          "1995-01-01",
          "1997-03-10",
          "2007-05-28",
          "2008-06-08",
          "2009-08-18",
          "2010-11-26",
          "2012-07-03",
          "2017-01-06"
        ]
      ],
      "y_data": [
        [
          5,
          7,
          7,
          1,
          3,
          8,
          9,
          1,
          7,
          2,
          3,
          8,
          7,
          7,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all calendar dates and day Numbers in a line chart.",
      "Show all calendar dates and day Numbers. Plot them as line chart.",
      "Return a line on what are all the calendar dates and day Numbers?"
    ],
    "irrelevant_tables": [
      "Ref_Document_Types",
      "Roles"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "790": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Location_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "b",
          "c",
          "e",
          "n",
          "x"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          4,
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the location codes and the number of documents in each location with a pie chart.",
      "Show the location codes and the number of documents in each location. Show a pie chart.",
      "Pie. what is the code of each location and the number of documents in that location?",
      "What is the code of each location and the number of documents in that location. Visualize by pie chart.",
      "Give me a pie to show the total number from different location code."
    ],
    "irrelevant_tables": [
      "Documents_to_be_Destroyed",
      "Ref_Locations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "802": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Budget_Type_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "GV",
          "ORG",
          "SF"
        ]
      ],
      "y_data": [
        [
          6,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show budget type codes and the number of documents in each budget type by a pie chart.",
      "Display a pie chart for what are the different budget type codes, and how many documents are there for each?",
      "What are the different budget type codes, and how many documents are there for each. Show a pie chart.",
      "Compute the total the total number across budget type code as a pie chart."
    ],
    "irrelevant_tables": [
      "Ref_Document_Types",
      "Ref_Budget_Codes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "803": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Budget_Type_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "GV",
          "ORG",
          "SF"
        ]
      ],
      "y_data": [
        [
          6,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show budget type codes and the number of documents in each budget type with a bar chart.",
      "Show budget type codes and the number of documents in each budget type. Show bar chart.",
      "Show me a bar chart for what are the different budget type codes, and how many documents are there for each?",
      "What are the different budget type codes, and how many documents are there for each. Plot them as bar chart.",
      "Give me a bar chart for the total number of each budget type code"
    ],
    "irrelevant_tables": [
      "Ref_Document_Types",
      "Ref_Budget_Codes"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "809": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Name",
      "y_name": "COUNT(Document_Name)",
      "x_data": [
        [
          "Book on USA files",
          "Chapter on private files",
          "Deontae files",
          "Jevon Paper",
          "Katheryn statement",
          "King Book",
          "Noel CV",
          "Review on Canadian files",
          "Review on French files",
          "Review on UK files",
          "Review on USA files",
          "Trenton Presentation",
          "Winona Book"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          3,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Document_Name",
      "sort": null
    },
    "nl_queries": [
      "Show the number of documents for different document name in a bar chart.",
      "How many documents for different document name? Draw a bar chart.",
      "Bar chart x axis document name y axis the number of document name"
    ],
    "irrelevant_tables": [
      "Statements",
      "Accounts"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "858": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Product_Name",
      "y_name": "avg(Product_Price)",
      "x_data": [
        [
          "dinning",
          "film",
          "photo"
        ]
      ],
      "y_data": [
        [
          238704.33333333328,
          11385515.333333336,
          5102691.666666667
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each distinct product name, show its average product price. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "Customers",
      "Ref_Payment_Methods"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "887": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "cre_Theme_park",
    "vis_obj": {
      "chart": "pie",
      "x_name": "How_to_Get_There",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "bus",
          "shuttle",
          "walk"
        ]
      ],
      "y_data": [
        [
          6,
          4,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a pie chart.",
      "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods by a pie chart.",
      "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods. Show a pie chart.",
      "Compute the total the total number across how to get there as a pie chart."
    ],
    "irrelevant_tables": [
      "Museums",
      "Hotels"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "906": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "culture_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Category",
      "y_name": "count(*)",
      "x_data": [
        [
          "Gay M/SF",
          "Gay SF/F",
          "Lesb. M/SF"
        ]
      ],
      "y_data": [
        [
          5,
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all book categories and the number of books in each category in a pie chart.",
      "Show all book categories and the number of books in each category. Plot them as pie chart.",
      "Return a pie on how many books fall into each category?",
      "Pie. how many books fall into each category?",
      "Create a pie chart showing the total number across category."
    ],
    "irrelevant_tables": [
      "movie",
      "culture_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "908": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "pie",
      "x_name": "product_category_code",
      "y_name": "avg(product_price)",
      "x_data": [
        [
          "Book",
          "Food",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          35,
          2.88,
          66.67
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a pie chart on what is the average price of the products for each category?",
      "Visualize a pie chart with what is the average price of the products for each category?",
      "What is the average price of the products for each category, Show a pie chart.",
      "Return the average price of products that have each category code in a pie chart.",
      "A pie chart about the average price of products that have each category code."
    ],
    "irrelevant_tables": [
      "Complaints",
      "Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "924": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "binning": "BIN date_became_customer BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20 BIN date_became_customer BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_and_addresses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_became_customer",
      "y_name": "COUNT(date_became_customer)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          0,
          3,
          0,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN date_became_customer BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "How many customers with ids between 10 and 20 became customers in ench weekday? Show by a bar chart."
    ],
    "irrelevant_tables": [
      "Addresses",
      "Customer_Contact_Channels"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "926": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "other_account_details",
      "y_name": "COUNT(other_account_details)",
      "x_data": [
        [
          "Regular",
          "VIP"
        ]
      ],
      "y_data": [
        [
          8,
          7
        ]
      ],
      "classify": [],
      "describe": "GROUP BY other_account_details",
      "sort": null
    },
    "nl_queries": [
      "Show the number of accounts in a bar chart that groups by other account details.",
      "How many accounts for different account details? Draw a bar chart.",
      "Bar chart x axis other account details y axis how many other account details"
    ],
    "irrelevant_tables": [
      "Product_Categories",
      "Invoice_Line_Items"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "971": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "pie",
      "x_name": "transaction_type",
      "y_name": "sum(transaction_amount)",
      "x_data": [
        [
          "Payment",
          "Refund"
        ]
      ],
      "y_data": [
        [
          8743.15,
          11192.69
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the transaction types and the total amount of transactions with a pie chart.",
      "What are total transaction amounts for each transaction type. Show a pie chart.",
      "Create a pie chart showing total number of transaction amount across transaction type."
    ],
    "irrelevant_tables": [
      "Order_Items",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "999": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "pie",
      "x_name": "product_name",
      "y_name": "COUNT(product_name)",
      "x_data": [
        [
          "Apple",
          "Sony",
          "gucci",
          "jcrew"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_name",
      "sort": null
    },
    "nl_queries": [
      "Show the proportion of the product name for each product using a pie chart"
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Customer_Address_History"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1007": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code"
    },
    "chart": "Pie",
    "hardness": "Hard",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "pie",
      "x_name": "product_type_code",
      "y_name": "COUNT(product_type_code)",
      "x_data": [
        [
          "Clothes",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          5,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_type_code",
      "sort": null
    },
    "nl_queries": [
      "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a pie chart."
    ],
    "irrelevant_tables": [
      "Customers",
      "Customer_Orders"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1008": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT product_name , COUNT(product_name) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_name",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT product_name , COUNT(product_name) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_name"
    },
    "chart": "Pie",
    "hardness": "Hard",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "pie",
      "x_name": "product_name",
      "y_name": "COUNT(product_name)",
      "x_data": [
        [
          "Apple",
          "Sony",
          "gucci",
          "jcrew"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_name",
      "sort": null
    },
    "nl_queries": [
      "Show the number of products with price higher than 1000 or lower than 500 for each product name in a pie chart."
    ],
    "irrelevant_tables": [
      "Order_Items",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1012": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "premises_type",
      "y_name": "count(*)",
      "x_data": [
        [
          "Office",
          "Residence",
          "Warehouse"
        ]
      ],
      "y_data": [
        [
          7,
          4,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show each premise type and the number of premises in that type with a bar chart.",
      "Show each premise type and the number of premises in that type. Visualize by bar chart.",
      "Create a bar chart showing the total number across premises type"
    ],
    "irrelevant_tables": [
      "Customer_Addresses",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1014": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "pie",
      "x_name": "product_category",
      "y_name": "count(*)",
      "x_data": [
        [
          "clothes",
          "food"
        ]
      ],
      "y_data": [
        [
          9,
          11
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all distinct product categories along with the number of mailshots in each category in a pie chart.",
      "Draw a pie chart with all distinct product categories along with the number of mailshots in each category."
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1021": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "pie",
      "x_name": "outcome_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "No Response",
          "Order"
        ]
      ],
      "y_data": [
        [
          5,
          10
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the outcome code of mailshots along with the number of mailshots in each outcome code with a pie chart.",
      "Create a pie chart showing the total number across outcome code."
    ],
    "irrelevant_tables": [
      "Mailshot_Campaigns",
      "Customer_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1024": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT premises_type , COUNT(premises_type) FROM premises GROUP BY premises_type ORDER BY premises_type",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM premises GROUP BY premises_type ORDER BY premises_type"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "premises_type",
      "y_name": "COUNT(premises_type)",
      "x_data": [
        [
          "Office",
          "Residence",
          "Warehouse"
        ]
      ],
      "y_data": [
        [
          7,
          4,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY premises_type",
      "sort": null
    },
    "nl_queries": [
      "Show the number of premises for different premises type in a bar chart."
    ],
    "irrelevant_tables": [
      "Customer_Addresses",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1037": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_last_name",
      "y_name": "COUNT(customer_last_name)",
      "x_data": [
        [
          "Brekke",
          "Davis",
          "Effertz",
          "Erdman",
          "Farrell",
          "Feest",
          "Huels",
          "Langworth",
          "Lind",
          "Rath",
          "Schinner",
          "Swift",
          "Turcotte",
          "Wiza"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY customer_last_name",
      "sort": null
    },
    "nl_queries": [
      "Show the number of customers for different customer last name in a bar chart.",
      "How many customers for different customer last name? Draw a bar chart.",
      "Bar chart x axis customer last name y axis how many customer last name"
    ],
    "irrelevant_tables": [
      "Customers_Cards",
      "Financial_Transactions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1061": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "pie",
      "x_name": "card_type_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Credit",
          "Debit"
        ]
      ],
      "y_data": [
        [
          7,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all card type codes and the number of cards in each type in a pie chart.",
      "Visualize a pie chart with what are the different card types, and how many cards are there of each?",
      "Pie. what are the different card types, and how many cards are there of each?",
      "What are the different card types, and how many cards are there of each. Show a pie chart.",
      "Give me a pie to show the total number from different card type code."
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Accounts"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1071": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Num_of_Audience ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Num_of_Audience ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "COUNT(Venue)",
      "x_data": [
        [
          "Abu Dhabi , UAE",
          "Doha , Qatar",
          "Dubai , UAE",
          "Manama , Bahrain"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Venue",
      "sort": null
    },
    "nl_queries": [
      "List the venues of debates in ascending order of the number of audience, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "debate_people",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1090": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM member GROUP BY Country"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Country",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Canada",
          "United States"
        ]
      ],
      "y_data": [
        [
          4,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the different countries and the number of members from each by a pie chart.",
      "Visualize a pie chart about the different countries and the number of members from each."
    ],
    "irrelevant_tables": [
      "round",
      "college"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1113": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , age FROM head ORDER BY age",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , age FROM head ORDER BY age"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "age",
      "x_data": [
        [
          "P\u00e1draig Harrington",
          "Stewart Cink",
          "Dudley Hart",
          "Jeff Maggert",
          "Nick Faldo",
          "Tiger Woods",
          "Franklin Langham",
          "Sergio Garc\u00eda",
          "K. J. Choi",
          "Billy Mayfair"
        ]
      ],
      "y_data": [
        [
          43,
          50,
          52,
          53,
          56,
          67,
          67,
          68,
          69,
          69
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the age of each head of departments in a bar chart ordered by age in asc."
    ],
    "irrelevant_tables": [
      "department",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1129": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_type_code",
      "y_name": "max(product_price)",
      "x_data": [
        [
          "Clothes",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          939.57,
          971.44
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the highest price of product, grouped by product type? Show a bar chart.",
      "Give the maximum product price for each product type in a bar chart.",
      "Bar chart x axis product type code y axis maximal product price"
    ],
    "irrelevant_tables": [
      "Staff_Department_Assignments",
      "Customer_Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1130": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_type_code",
      "y_name": "min(product_price)",
      "x_data": [
        [
          "Clothes",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          408.82,
          612.46
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the lowest price of product, grouped by product type? Show a bar chart.",
      "Give the minimum product price for each product type in a bar chart.",
      "Draw a bar chart of product type code versus minimal product price"
    ],
    "irrelevant_tables": [
      "Addresses",
      "Staff_Department_Assignments"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1133": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "max(product_price)",
      "y_name": "min(product_price)",
      "x_data": [
        [
          939.57
        ],
        [
          971.44
        ]
      ],
      "y_data": [
        [
          408.82
        ],
        [
          612.46
        ]
      ],
      "classify": [
        "Clothes",
        "Hardware"
      ],
      "describe": "GROUP BY product_type_code",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between minimum product price and maximum product price and group by product type code in a group scatter chart.",
      "Show max(product price) vs minimal product price as scatter plot use a different color for each product_type_code"
    ],
    "irrelevant_tables": [
      "Customer_Orders",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "1152": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT role_code , count(*) FROM users GROUP BY role_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "document_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "role_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "DBA",
          "PROJ-MGR"
        ]
      ],
      "y_data": [
        [
          8,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the number of users in each role. Plot them as bar chart.",
      "What are the different role codes for users, and how many users have each. Show bar chart.",
      "Bar graph to show the total number from different role code",
      "Return a histogram on what are the different role codes for users, and how many users have each?"
    ],
    "irrelevant_tables": [
      "Document_Sections_Images",
      "Document_Functional_Areas"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1153": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT document_name , access_count FROM documents ORDER BY document_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT document_name , access_count FROM documents ORDER BY document_name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "document_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "document_name",
      "y_name": "access_count",
      "x_data": [
        [
          "David CV",
          "Fall Sails",
          "How to cook pasta",
          "Humanity: a fact",
          "Joe CV",
          "John CV",
          "Learning Database",
          "Learning English",
          "Learning Japanese",
          "Life about Claude Monet",
          "Relationships between History and Arts",
          "Research about Art history",
          "Spring Sails",
          "Summer Sails",
          "Winter Sails"
        ]
      ],
      "y_data": [
        [
          6345,
          7509,
          2045,
          3479,
          2294,
          5924,
          3769,
          1864,
          2910,
          1219,
          9948,
          8208,
          3289,
          6661,
          8623
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the name and access counts of all documents, in alphabetic order of the document name. Show bar chart.",
      "Return a bar chart on what are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
      "Give me a histogram for what are the names of all the documents, as well as the access counts of each, ordered alphabetically?"
    ],
    "irrelevant_tables": [
      "Images",
      "Roles"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1172": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "age",
      "y_name": "weight",
      "x_data": [
        [
          1
        ],
        [
          6
        ],
        [
          4
        ]
      ],
      "y_data": [
        [
          4.01
        ],
        [
          7.57
        ],
        [
          4.36
        ]
      ],
      "classify": [
        "Evangeline",
        "Kacey",
        "Lyric"
      ],
      "describe": "GROUP BY name",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between age and weight of the dogs who have been abandoned in a group scatter chart that groups by dog's name.",
      "What is the relationship between age and weight of the dogs who have been abandoned? Return a group scatter chart that groups by dog's name."
    ],
    "irrelevant_tables": [
      "Charges",
      "Sizes"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1182": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_departed",
      "y_name": "COUNT(date_departed)",
      "x_data": [
        [
          "2018-03-24",
          "2018-03-25"
        ]
      ],
      "y_data": [
        [
          3,
          12
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date_departed",
      "sort": null
    },
    "nl_queries": [
      "How many dogs departed in each day? Visualize with a bar chart that groups by departed date.",
      "List the number of dogs departed in each day with a bar chart that groups by departed date."
    ],
    "irrelevant_tables": [
      "Breeds",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1211": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "sum(student_capacity)",
      "x_data": [
        [
          "F",
          "M",
          "X"
        ]
      ],
      "y_data": [
        [
          128,
          116,
          1136
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find total capacity of dorms for each gender in a bar chart.",
      "What is the total capacity of dorms for each gender? Give me a bar chart.",
      "Create a bar chart showing sum student capacity across gender"
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1213": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "gender",
      "y_name": "sum(student_capacity)",
      "x_data": [
        [
          "F",
          "M",
          "X"
        ]
      ],
      "y_data": [
        [
          128,
          116,
          1136
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the total capacity of dorms for each gender with a pie chart.",
      "What is the total capacity of dorms for each gender? Show me a pie chart.",
      "Compute the total sum student capacity across gender as a pie chart."
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1214": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT count(*) , sum(student_capacity) FROM dorm GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT count(*) , sum(student_capacity) FROM dorm GROUP BY gender"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "count(*)",
      "y_name": "sum(student_capacity)",
      "x_data": [
        [
          1
        ],
        [
          1
        ],
        [
          5
        ]
      ],
      "y_data": [
        [
          128
        ],
        [
          116
        ],
        [
          1136
        ]
      ],
      "classify": [
        "F",
        "M",
        "X"
      ],
      "describe": "GROUP BY gender",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the number of dorms and total capacity and group by gender with a group scatter chart."
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Dorm_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "1229": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "ATL",
          "BAL",
          "BOS",
          "CHI",
          "DAL",
          "DET",
          "HKG",
          "HOU",
          "LON",
          "LOS",
          "NAR",
          "NYC",
          "PEK",
          "PHL",
          "PIT",
          "ROC",
          "SFO",
          "WAS",
          "YYZ"
        ]
      ],
      "y_data": [
        [
          1,
          4,
          1,
          1,
          1,
          1,
          3,
          1,
          1,
          1,
          1,
          3,
          1,
          3,
          4,
          1,
          1,
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Create a bar chart showing the total number across city code"
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Dorm_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1232": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "avg(age)",
      "x_data": [
        [
          "ATL",
          "BAL",
          "BOS",
          "CHI",
          "DAL",
          "DET",
          "HKG",
          "HOU",
          "LON",
          "LOS",
          "NAR",
          "NYC",
          "PEK",
          "PHL",
          "PIT",
          "ROC",
          "SFO",
          "WAS",
          "YYZ"
        ]
      ],
      "y_data": [
        [
          20,
          18.5,
          18,
          20,
          18,
          17,
          18,
          17,
          27,
          18,
          18,
          20.33333333333333,
          17,
          19.666666666666668,
          19,
          20,
          21,
          21.66666666666667,
          22.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the average age of students living in each city with a bar chart.",
      "What are average ages for students living in each city? Return a bar chart.",
      "Bar chart of mean age from each city code"
    ],
    "irrelevant_tables": [
      "Dorm",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1233": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "avg(age)",
      "x_data": [
        [
          "ATL",
          "BAL",
          "BOS",
          "CHI",
          "DAL",
          "DET",
          "HKG",
          "HOU",
          "LON",
          "LOS",
          "NAR",
          "NYC",
          "PEK",
          "PHL",
          "PIT",
          "ROC",
          "SFO",
          "WAS",
          "YYZ"
        ]
      ],
      "y_data": [
        [
          20,
          18.5,
          18,
          20,
          18,
          17,
          18,
          17,
          27,
          18,
          18,
          20.33333333333333,
          17,
          19.666666666666668,
          19,
          20,
          21,
          21.66666666666667,
          22.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the average age of all students living in the each city. Show bar chart.",
      "Draw a bar chart for what is the average age for each city and what are those cities?",
      "A bar chart about what is the average age for each city and what are those cities?",
      "What is the average age for each city and what are those cities. Show bar chart.",
      "Bar chart of mean age from each city code"
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Dorm"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1234": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          5,
          10
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the number of students whose age is older than the average age for each gender. Visualize by pie chart.",
      "Draw a pie chart for how many students are older than average for each gender?",
      "Return a pie on how many students are older than average for each gender?"
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Dorm_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1236": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Sex",
      "y_name": "avg(age)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          19.7,
          19.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the average age for students with different sex in a pie chart.",
      "What is the average age for each gender of student? Return a pie chart."
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1241": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(age) , max(age) FROM student GROUP BY Sex",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(age) , max(age) FROM student GROUP BY Sex"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(age)",
      "y_name": "max(age)",
      "x_data": [
        [
          19.7
        ],
        [
          19.5
        ]
      ],
      "y_data": [
        [
          26
        ],
        [
          27
        ]
      ],
      "classify": [
        "F",
        "M"
      ],
      "describe": "GROUP BY Sex",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between oldest age and average age and group by sex in a group scatter chart.",
      "Scatterplot of maximal age vs avg(age) colored by Sex"
    ],
    "irrelevant_tables": [
      "Dorm",
      "Dorm_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "1274": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "pie",
      "x_name": "test_result",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Pass",
          "Fail"
        ]
      ],
      "y_data": [
        [
          8,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "List each test result and its count in descending order of count by a pie chart."
    ],
    "irrelevant_tables": [
      "Courses",
      "Course_Authors_and_Tutors"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1275": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "test_result",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Pass",
          "Fail"
        ]
      ],
      "y_data": [
        [
          8,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List each test result and its count in descending order of count by a bar chart.",
      "List each test result and its count in descending order of count. Visualize by bar chart."
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1285": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"",
        "binning": "BIN date_test_taken BY DAY"
      },
      "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "line",
      "x_name": "date_test_taken",
      "y_name": "COUNT(date_test_taken)",
      "x_data": [
        [
          "2018-03-19",
          "2018-03-21",
          "2018-03-23",
          "2018-03-24",
          "2018-03-25"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN date_test_taken BY DAY",
      "sort": null
    },
    "nl_queries": [
      "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a line chart"
    ],
    "irrelevant_tables": [
      "Course_Authors_and_Tutors",
      "Student_Course_Enrolment"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1296": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment",
        "binning": "BIN date_of_completion BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment BIN date_of_completion BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_completion",
      "y_name": "COUNT(date_of_completion)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          4,
          16
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_completion BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "List the number of completion students in each month and bin date of completion by month interval with a bar chart.",
      "How many completion students in each month? Return a bar chart binning date of completion by month interval."
    ],
    "irrelevant_tables": [
      "Students",
      "Student_Tests_Taken"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1297": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment",
        "binning": "BIN date_of_completion BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment BIN date_of_completion BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_completion",
      "y_name": "COUNT(date_of_completion)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          4,
          4,
          3,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_completion BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "List the number of completion students in each day and bin date of completion by weekday with a bar chart.",
      "How many completion students in each day? Return a bar chart binning date of completion by weekday."
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Subjects"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1303": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT County_name , Population FROM county",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT County_name , Population FROM county"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "pie",
      "x_name": "County_name",
      "y_name": "Population",
      "x_data": [
        [
          "Howard",
          "Baltimore County",
          "Colony",
          "Mansfield",
          "Manning"
        ]
      ],
      "y_data": [
        [
          21000,
          90000,
          79000,
          87200,
          13300
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the county name and population of all counties with a pie chart.",
      "Return a pie on what are the name and population of each county?",
      "What are the name and population of each county. Visualize by pie chart."
    ],
    "irrelevant_tables": [
      "party",
      "election"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1325": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Date , Vote_Percent FROM election",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Date , Vote_Percent FROM election"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "election_representative",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Date",
      "y_name": "Vote_Percent",
      "x_data": [
        [
          "July 1942",
          "October 1942",
          "1946",
          "1949",
          "1953"
        ]
      ],
      "y_data": [
        [
          16.2,
          18.5,
          19.5,
          19.5,
          16
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "List the dates and vote percents of elections. Plot them as pie chart.",
      "Give me a pie to show vote_percent from different date."
    ],
    "irrelevant_tables": [
      "representative"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1326": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date , Vote_Percent FROM election",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Date , Vote_Percent FROM election"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "election_representative",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date",
      "y_name": "Vote_Percent",
      "x_data": [
        [
          "July 1942",
          "October 1942",
          "1946",
          "1949",
          "1953"
        ]
      ],
      "y_data": [
        [
          16.2,
          18.5,
          19.5,
          19.5,
          16
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "List the dates and vote percents of elections in a bar chart.",
      "List the dates and vote percents of elections. Show bar chart."
    ],
    "irrelevant_tables": [
      "representative"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1354": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Is_full_time",
      "y_name": "COUNT(Is_full_time)",
      "x_data": [
        [
          "F",
          "T"
        ]
      ],
      "y_data": [
        [
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Is_full_time",
      "sort": null
    },
    "nl_queries": [
      "Visualize a pie chart about the proportion of  Is_full_time and the amount of Is_full_time.",
      "For the attribute  Is_full_time and the amount of Is_full_time, show their proportion by a pie chart.",
      "Draw a pie chart about the proportion of  Is_full_time and the amount of Is_full_time.",
      "Give me a pie to show how many is full time from different is full time."
    ],
    "irrelevant_tables": [
      "evaluation",
      "shop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1363": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT City , count(*) FROM employee GROUP BY city",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "bar",
      "x_name": "City",
      "y_name": "count(*)",
      "x_data": [
        [
          "Bath",
          "Bristol",
          "Leicester",
          "Sale",
          "Wasps"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart for what is the number of employees from each city?",
      "Count the number of employees for each city with a bar chart.",
      "Count the number of employees for each city. Plot them as bar chart.",
      "Bar chart of the total number from each city"
    ],
    "irrelevant_tables": [
      "evaluation",
      "hiring"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1383": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Status , avg(Population) FROM city GROUP BY Status"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "farm",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Status",
      "y_name": "avg(Population)",
      "x_data": [
        [
          "Town",
          "Village"
        ]
      ],
      "y_data": [
        [
          5706,
          1009.75
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "I want to know the proportion of the average population for each status by pie chart."
    ],
    "irrelevant_tables": [
      "farm_competition",
      "farm"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1398": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Low_Estimate , High_Estimate FROM film_market_estimation"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "film_rank",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Low_Estimate",
      "y_name": "High_Estimate",
      "x_data": [
        [
          80000,
          8000,
          3000,
          960,
          913,
          300,
          53,
          39,
          16
        ]
      ],
      "y_data": [
        [
          80400,
          8000,
          80400,
          960,
          913,
          1000,
          53,
          39,
          16
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a scatter chart for what are the low and high estimates of film markets?",
      "Return a scatter on what are the low and high estimates of film markets?",
      "What are the low and high estimates of film markets. Visualize by scatter chart.",
      "Return the low and high estimates for all film markets in a scatter chart",
      "Return the low and high estimates for all film markets. Show scatter chart.",
      "Plot a scatter chart, low estimate by high_estimate."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1400": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT origin , COUNT(origin) FROM Flight GROUP BY origin",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "origin",
      "y_name": "COUNT(origin)",
      "x_data": [
        [
          "Chicago",
          "Los Angeles"
        ]
      ],
      "y_data": [
        [
          2,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY origin",
      "sort": null
    },
    "nl_queries": [
      "Show how many flights for each origin city with a pie chart.",
      "How many flights for each origin city? Return a pie chart.",
      "I prefer a pie chart to understand how many flights from each origin city. ",
      "Show me the proportion of the number of flights by each origin city with a pie chart."
    ],
    "irrelevant_tables": [
      "aircraft",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1408": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "destination",
      "y_name": "count(*)",
      "x_data": [
        [
          "Boston",
          "Chicago",
          "Dallas",
          "Honolulu",
          "Los Angeles",
          "New York",
          "Sydney",
          "Tokyo",
          "Washington D.C."
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all destinations and the number of flights to each destination by a bar chart.",
      "Show all destinations and the number of flights to each destination. Plot them as bar chart.",
      "Draw a bar chart for what are the destinations and number of flights to each one?",
      "A bar chart about what are the destinations and number of flights to each one?",
      "What are the destinations and number of flights to each one. Visualize by bar chart.",
      "Draw a bar chart of destination versus the total number "
    ],
    "irrelevant_tables": [
      "certificate",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1411": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "origin",
      "y_name": "count(*)",
      "x_data": [
        [
          "Chicago",
          "Los Angeles"
        ]
      ],
      "y_data": [
        [
          2,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all origins and the number of flights from each origin by a bar chart.",
      "Show all origins and the number of flights from each origin. Show bar chart.",
      "For each origin, how many flights came from there. Show bar chart.",
      "Bar chart of the total number from each origin"
    ],
    "irrelevant_tables": [
      "employee",
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1460": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "formula_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "COUNT(name)",
      "x_data": [
        [
          "Abu Dhabi Grand Prix",
          "Australian Grand Prix",
          "Bahrain Grand Prix",
          "Belgian Grand Prix",
          "Brazilian Grand Prix",
          "British Grand Prix",
          "Canadian Grand Prix",
          "Chinese Grand Prix",
          "European Grand Prix",
          "German Grand Prix",
          "Hungarian Grand Prix",
          "Indian Grand Prix",
          "Italian Grand Prix",
          "Japanese Grand Prix",
          "Korean Grand Prix",
          "Malaysian Grand Prix",
          "Monaco Grand Prix",
          "Singapore Grand Prix",
          "Spanish Grand Prix",
          "Turkish Grand Prix"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          2,
          3,
          3,
          3,
          2,
          3,
          3,
          3,
          3,
          1,
          3,
          3,
          2,
          3,
          3,
          3,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY name",
      "sort": null
    },
    "nl_queries": [
      "What are the names of all races held between 2009 and 2011, and count them by a bar chart",
      "What are the names of races held between 2009 and 2011, and count them by a bar chart",
      "A bar chart for what are the number of the names of races held between 2009 and 2011?",
      "A bar chart for what are the number of the names of all races held between 2009 and 2011?"
    ],
    "irrelevant_tables": [
      "circuits",
      "constructorStandings"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1465": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(age) , min(age) FROM Student GROUP BY major",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM Student GROUP BY major"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "game_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(age)",
      "y_name": "min(age)",
      "x_data": [
        [
          22,
          17,
          19.33333333333333,
          17.5,
          19.8,
          19.666666666666668
        ]
      ],
      "y_data": [
        [
          18,
          17,
          18,
          17,
          18,
          16
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between average age and minimum age for different major in a scatter chart."
    ],
    "irrelevant_tables": [
      "Plays_Games",
      "SportsInfo"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1468": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT min(age) , max(age) , major FROM Student GROUP BY major",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT min(age) , max(age) , major FROM Student GROUP BY major"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "game_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "min(age)",
      "y_name": "max(age)",
      "x_data": [
        [
          18
        ],
        [
          17
        ],
        [
          18
        ],
        [
          17
        ],
        [
          18
        ],
        [
          16
        ]
      ],
      "y_data": [
        [
          26
        ],
        [
          17
        ],
        [
          22
        ],
        [
          18
        ],
        [
          21
        ],
        [
          27
        ]
      ],
      "classify": [
        50,
        100,
        520,
        540,
        550,
        600
      ],
      "describe": "GROUP BY major",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between maximum age and minimum age for different majors in a group scatter chart.",
      "Scatter plot to show min(age) on x axis and maximal age on y axis, color for different majors."
    ],
    "irrelevant_tables": [
      "SportsInfo",
      "Video_Games"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "1482": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season"
    },
    "chart": "Grouping Line",
    "hardness": "Hard",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "line",
      "x_name": "Season",
      "y_name": "COUNT(Season)",
      "x_data": [
        [
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          0,
          2,
          1,
          1,
          1,
          3,
          1
        ],
        [
          2,
          1,
          2,
          1,
          1,
          2,
          1
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [
        "Bunyodkor",
        "Pakhtakor",
        "Quruvchi"
      ],
      "describe": "GROUP BY Home_team, GROUP BY Season",
      "sort": null
    },
    "nl_queries": [
      "List the number of games in each season and group by home team in a group line chart."
    ],
    "irrelevant_tables": [
      "injury_accident",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "1496": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Home_team",
      "y_name": "COUNT(Home_team)",
      "x_data": [
        [
          "Bunyodkor",
          "Pakhtakor",
          "Quruvchi"
        ]
      ],
      "y_data": [
        [
          9,
          10,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Home_team",
      "sort": null
    },
    "nl_queries": [
      "Show the number of games for each home team in a pie chart."
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1497": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Headquarters",
      "y_name": "count(*)",
      "x_data": [
        [
          "Brazil",
          "China",
          "Netherlands",
          "UK",
          "USA"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "List all headquarters and the number of companies in each headquarter in a pie chart.",
      "List all headquarters and the number of companies in each headquarter. Show a pie chart.",
      "Give me a pie to show the total number from different headquarters."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1499": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Company",
      "y_name": "Rank",
      "x_data": [
        [
          "Industrial and Commercial Bank of China",
          "Wells Fargo",
          "HSBC"
        ]
      ],
      "y_data": [
        [
          5,
          9,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the rank of the companies in the banking industry order by their sales and profits in billion with a bar chart."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1500": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Company",
      "y_name": "Market_Value",
      "x_data": [
        [
          "Industrial and Commercial Bank of China",
          "Wells Fargo",
          "HSBC"
        ]
      ],
      "y_data": [
        [
          237.4,
          178.7,
          164.3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the market values of the companies in the banking industry with a pie chart.",
      "What is the market value of every comapny in the banking industry? Return a pie chart."
    ],
    "irrelevant_tables": [
      "station_company",
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1504": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Rank",
      "y_name": "Market_Value",
      "x_data": [
        [
          6
        ],
        [
          5
        ],
        [
          9
        ]
      ],
      "y_data": [
        [
          164.3
        ],
        [
          237.4
        ],
        [
          178.7
        ]
      ],
      "classify": [
        "HSBC",
        "Industrial and Commercial Bank of China",
        "Wells Fargo"
      ],
      "describe": "GROUP BY Company",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the rank and market values of the companies in the banking industry and group by company with a group scatter chart."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "1507": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Main_Industry",
      "y_name": "sum(market_value)",
      "x_data": [
        [
          "Banking",
          "Conglomerate",
          "Oil and gas"
        ]
      ],
      "y_data": [
        [
          580.4000000000002,
          415.9,
          1257.1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all main industry and total market value in each industry in a pie chart.",
      "Draw a pie chart to show all main industry and total market value in each industry.",
      "Show me a pie chart for what are the main indstries and total market value for each industry?",
      "What are the main indstries and total market value for each industry. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "station_company",
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1509": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Main_Industry",
      "y_name": "COUNT(Main_Industry)",
      "x_data": [
        [
          "Banking",
          "Conglomerate"
        ]
      ],
      "y_data": [
        [
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Main_Industry",
      "sort": null
    },
    "nl_queries": [
      "Show the number of companies without a gas station in each main industry with a pie chart.",
      "How many companies without a gas station in each main industry? Draw a pie chart."
    ],
    "irrelevant_tables": [
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1517": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Headquarters",
      "y_name": "COUNT(Headquarters)",
      "x_data": [
        [
          "Brazil",
          "China",
          "Netherlands",
          "UK",
          "USA"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Headquarters",
      "sort": null
    },
    "nl_queries": [
      "Show the number of companies in each headquarter with a pie chart.",
      "How many companies in each headquarter? Plot a pie chart."
    ],
    "irrelevant_tables": [
      "station_company",
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1526": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Cost FROM procedures ORDER BY cost DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Cost FROM procedures ORDER BY cost DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "hospital_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Cost",
      "x_data": [
        [
          "Complete Walletectomy",
          "Reversible Pancreomyoplasty",
          "Obfuscated Dermogastrotomy",
          "Folded Demiophtalmectomy",
          "Obtuse Pyloric Recombobulation",
          "Reverse Rhinopodoplasty",
          "Follicular Demiectomy"
        ]
      ],
      "y_data": [
        [
          10000,
          5600,
          4899,
          4500,
          3750,
          1500,
          25
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the name and cost of all procedures sorted by the cost from the highest to the lowest by a bar chart.",
      "List the name and cost of all procedures sorted by the cost from the highest to the lowest. Plot them as bar chart."
    ],
    "irrelevant_tables": [
      "Affiliated_With",
      "Appointment"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1537": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "binning": "BIN HIRE_DATE BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\") BIN HIRE_DATE BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "COUNT(HIRE_DATE)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          5,
          5,
          5,
          4,
          5,
          5,
          5
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Please give me a bar graph that categorizes the hiring dates of all employees in the same department as the employee with the first name Clara by weekly intervals and counts how many employees there are per day."
    ],
    "irrelevant_tables": [
      "locations",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1556": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
    },
    "chart": "Line",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "SALARY",
      "x_data": [
        [
          "1987-06-17",
          "1987-09-30",
          "1987-08-24",
          "1987-07-01",
          "1987-08-04",
          "1987-08-25",
          "1987-08-07",
          "1987-08-19",
          "1987-06-20",
          "1987-06-26",
          "1987-08-31",
          "1987-07-08",
          "1987-08-09",
          "1987-08-15",
          "1987-06-29",
          "1987-06-28",
          "1987-08-16",
          "1987-08-17",
          "1987-06-30",
          "1987-08-21",
          "1987-07-10",
          "1987-09-28",
          "1987-08-22",
          "1987-09-04",
          "1987-08-29",
          "1987-06-22",
          "1987-06-24",
          "1987-09-09",
          "1987-09-10",
          "1987-09-17",
          "1987-07-24",
          "1987-07-20",
          "1987-07-25",
          "1987-09-05",
          "1987-09-19",
          "1987-07-02",
          "1987-07-29",
          "1987-07-03",
          "1987-07-04",
          "1987-09-08",
          "1987-07-30",
          "1987-09-23",
          "1987-09-24",
          "1987-07-18",
          "1987-07-27",
          "1987-09-16",
          "1987-07-14",
          "1987-07-15"
        ]
      ],
      "y_data": [
        [
          24000,
          12000,
          11500,
          11000,
          11000,
          10000,
          9500,
          9500,
          9000,
          9000,
          8800,
          8200,
          8000,
          8000,
          7800,
          7700,
          7500,
          7000,
          6900,
          6800,
          6500,
          6500,
          6400,
          6200,
          6100,
          4800,
          4200,
          4200,
          4100,
          4000,
          3600,
          3300,
          3200,
          3200,
          3200,
          3100,
          3100,
          2900,
          2800,
          2800,
          2600,
          2600,
          2600,
          2500,
          2500,
          2500,
          2400,
          2200
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For all employees who have the letters D or S in their first name, visualize a line chart about the change of  salary over  hire_date .",
      "For all employees who have the letters D or S in their first name, a line chart shows the trend of  salary over  hire_date .",
      "For all employees who have the letters D or S in their first name, a line chart shows the change of  salary over  hire_date ",
      "For all employees who have the letters D or S in their first name, show me the trend about  salary over  hire_date  with a line chart."
    ],
    "irrelevant_tables": [
      "job_history",
      "countries"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1563": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_ID",
      "y_name": "AVG(SALARY)",
      "x_data": [
        [
          "AC_MGR",
          "AD_PRES",
          "FI_ACCOUNT",
          "HR_REP",
          "IT_PROG",
          "PU_CLERK",
          "PU_MAN",
          "SA_MAN",
          "SA_REP",
          "SH_CLERK",
          "ST_CLERK",
          "ST_MAN"
        ]
      ],
      "y_data": [
        [
          12000,
          24000,
          7850,
          6500,
          6000,
          2933.3333333333335,
          11000,
          11000,
          8100,
          3244.4444444444443,
          2822.222222222222,
          7350
        ]
      ],
      "classify": [],
      "describe": "GROUP BY JOB_ID",
      "sort": null
    },
    "nl_queries": [
      "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the average of salary , and group by attribute job_id in a bar chart.",
      "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  job_id and the average of salary , and group by attribute job_id.",
      "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  job_id and the average of salary , and group by attribute job_id.",
      "For all employees who have the letters D or S in their first name, find  job_id and the average of salary , and group by attribute job_id, and visualize them by a bar chart.",
      "For all employees who have the letters D or S in their first name, give me the comparison about the average of salary over the  job_id , and group by attribute job_id by a bar chart."
    ],
    "irrelevant_tables": [
      "locations",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1574": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
    },
    "chart": "Scatter",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "SALARY",
      "y_name": "COMMISSION_PCT",
      "x_data": [
        [
          24000,
          12000,
          11500,
          11000,
          11000,
          10000,
          9500,
          9500,
          9000,
          9000,
          8800,
          8200,
          8000,
          8000,
          7800,
          7700,
          7500,
          7000,
          6900,
          6800,
          6500,
          6500,
          6400,
          6200,
          6100,
          4800,
          4200,
          4200,
          4100,
          4000,
          3600,
          3300,
          3200,
          3200,
          3200,
          3100,
          3100,
          2900,
          2800,
          2800,
          2600,
          2600,
          2600,
          2500,
          2500,
          2500,
          2400,
          2200
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0.25,
          0,
          0.3,
          0.2,
          0.25,
          0.15,
          0,
          0,
          0.25,
          0,
          0.2,
          0.3,
          0,
          0,
          0.3,
          0.25,
          0,
          0.1,
          0,
          0,
          0.1,
          0.1,
          0.1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For all employees who have the letters D or S in their first name, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
      "For all employees who have the letters D or S in their first name, draw a scatter chart about the correlation between  salary and  commission_pct .",
      "For all employees who have the letters D or S in their first name, visualize a scatter chart about the correlation between  salary and  commission_pct .",
      "For all employees who have the letters D or S in their first name, a scatter chart shows the correlation between  salary and  commission_pct ."
    ],
    "irrelevant_tables": [
      "job_history",
      "locations"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1580": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "binning": "BIN HIRE_DATE BY MONTH"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "COUNT(HIRE_DATE)",
      "x_data": [
        [
          "June",
          "July",
          "Aug",
          "Sept",
          "Oct"
        ]
      ],
      "y_data": [
        [
          14,
          31,
          31,
          29,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by month.",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by month in a bar chart.",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  hire_date and the amount of hire_date bin hire_date by month, and visualize them by a bar chart.",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by month."
    ],
    "irrelevant_tables": [
      "job_history",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1611": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "SALARY",
      "y_name": "COMMISSION_PCT",
      "x_data": [
        [
          24000,
          17000,
          17000,
          9000,
          6000,
          4800,
          4800,
          4200,
          12000,
          9000,
          8200,
          7700,
          7800,
          6900,
          11000,
          3100,
          2900,
          2800,
          2600,
          2500,
          8000,
          8200,
          7900,
          6500,
          5800,
          3200,
          2700,
          2400,
          2200,
          3300,
          2800,
          2500,
          2100,
          3300,
          2900,
          2400,
          2200,
          3600,
          3200,
          2700,
          2500,
          3500,
          3100,
          2600,
          2500,
          14000,
          13500,
          12000,
          11000,
          10500,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10500,
          9500,
          7200,
          6800,
          6400,
          6200,
          11500,
          10000,
          9600,
          7400,
          7300,
          6100,
          11000,
          8800,
          8600,
          8400,
          7000,
          6200,
          3200,
          3100,
          2500,
          2800,
          4200,
          4100,
          3400,
          3000,
          3800,
          3600,
          2900,
          2500,
          4000,
          3900,
          3200,
          2800,
          3100,
          3000,
          2600,
          2600,
          4400,
          13000,
          6000,
          10000,
          12000,
          8300
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0.4,
          0.3,
          0.3,
          0.3,
          0.2,
          0.3,
          0.25,
          0.25,
          0.2,
          0.2,
          0.15,
          0.35,
          0.35,
          0.35,
          0.3,
          0.3,
          0.25,
          0.25,
          0.15,
          0.1,
          0.1,
          0.1,
          0.1,
          0.25,
          0.2,
          0.2,
          0.15,
          0.15,
          0.1,
          0.3,
          0.25,
          0.2,
          0.2,
          0.15,
          0.1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a scatter chart shows the correlation between  salary and  commission_pct .",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a scatter chart about the correlation between  salary and  commission_pct ."
    ],
    "irrelevant_tables": [
      "countries",
      "locations"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1621": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "COMMISSION_PCT",
      "x_data": [
        [
          "1987-06-17",
          "1987-06-18",
          "1987-06-19",
          "1987-06-20",
          "1987-06-21",
          "1987-06-22",
          "1987-06-23",
          "1987-06-24",
          "1987-06-25",
          "1987-06-26",
          "1987-06-27",
          "1987-06-28",
          "1987-06-29",
          "1987-06-30",
          "1987-07-01",
          "1987-07-02",
          "1987-07-03",
          "1987-07-04",
          "1987-07-05",
          "1987-07-06",
          "1987-07-07",
          "1987-07-08",
          "1987-07-09",
          "1987-07-10",
          "1987-07-11",
          "1987-07-12",
          "1987-07-13",
          "1987-07-14",
          "1987-07-15",
          "1987-07-16",
          "1987-07-17",
          "1987-07-18",
          "1987-07-19",
          "1987-07-20",
          "1987-07-21",
          "1987-07-22",
          "1987-07-23",
          "1987-07-24",
          "1987-07-25",
          "1987-07-26",
          "1987-07-27",
          "1987-07-28",
          "1987-07-29",
          "1987-07-30",
          "1987-07-31",
          "1987-08-01",
          "1987-08-02",
          "1987-08-03",
          "1987-08-04",
          "1987-08-05",
          "1987-08-06",
          "1987-08-07",
          "1987-08-08",
          "1987-08-09",
          "1987-08-10",
          "1987-08-11",
          "1987-08-12",
          "1987-08-13",
          "1987-08-14",
          "1987-08-15",
          "1987-08-16",
          "1987-08-17",
          "1987-08-18",
          "1987-08-19",
          "1987-08-20",
          "1987-08-21",
          "1987-08-22",
          "1987-08-23",
          "1987-08-24",
          "1987-08-25",
          "1987-08-26",
          "1987-08-27",
          "1987-08-28",
          "1987-08-29",
          "1987-08-30",
          "1987-08-31",
          "1987-09-01",
          "1987-09-02",
          "1987-09-03",
          "1987-09-04",
          "1987-09-05",
          "1987-09-06",
          "1987-09-07",
          "1987-09-08",
          "1987-09-09",
          "1987-09-10",
          "1987-09-11",
          "1987-09-12",
          "1987-09-13",
          "1987-09-14",
          "1987-09-15",
          "1987-09-16",
          "1987-09-17",
          "1987-09-18",
          "1987-09-19",
          "1987-09-20",
          "1987-09-21",
          "1987-09-22",
          "1987-09-23",
          "1987-09-24",
          "1987-09-25",
          "1987-09-26",
          "1987-09-27",
          "1987-09-29",
          "1987-09-30",
          "1987-10-01"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0.4,
          0.3,
          0.3,
          0.3,
          0.2,
          0.3,
          0.25,
          0.25,
          0.2,
          0.2,
          0.15,
          0.35,
          0.35,
          0.35,
          0.3,
          0.3,
          0.25,
          0.25,
          0.15,
          0.1,
          0.1,
          0.1,
          0.1,
          0.25,
          0.2,
          0.2,
          0.15,
          0.15,
          0.1,
          0.3,
          0.25,
          0.2,
          0.2,
          0.15,
          0.1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the trend of  commission_pct over  hire_date .",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a line chart about the change of  commission_pct over  hire_date .",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of  commission_pct over  hire_date  in a line chart.",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of  commission_pct over  hire_date .",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the change of  commission_pct over  hire_date ",
      "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a line chart about the change of  commission_pct over  hire_date ."
    ],
    "irrelevant_tables": [
      "countries",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1630": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT LAST_NAME , COUNT(LAST_NAME) FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 ) GROUP BY LAST_NAME",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT LAST_NAME , COUNT(LAST_NAME) FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 ) GROUP BY LAST_NAME"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "LAST_NAME",
      "y_name": "COUNT(LAST_NAME)",
      "x_data": [
        [
          "Abel",
          "Baer",
          "Bloom",
          "Cambrault",
          "De Haan",
          "Errazuriz",
          "Fox",
          "Greenberg",
          "Hartstein",
          "Higgins",
          "King",
          "Kochhar",
          "Ozer",
          "Partners",
          "Raphaely",
          "Russell",
          "Tucker",
          "Vishney",
          "Zlotkey"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY LAST_NAME",
      "sort": null
    },
    "nl_queries": [
      "Provide the frequency of the last names of employees earning more than the employee with id 163 using a bar chart."
    ],
    "irrelevant_tables": [
      "jobs",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1715": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "binning": "BIN HIRE_DATE BY MONTH"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "AVG(SALARY)",
      "x_data": [
        [
          "June",
          "July",
          "Aug",
          "Sept",
          "Oct"
        ]
      ],
      "y_data": [
        [
          8700,
          3382.7586206896553,
          9074.193548387097,
          4459.259259259259,
          8300
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "For those employees who did not have any job in the past, draw a bar chart about the distribution of  hire_date and the average of salary bin hire_date by month.",
      "For those employees who did not have any job in the past, return a bar chart about the distribution of  hire_date and the average of salary bin hire_date by month.",
      "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  hire_date and the average of salary bin hire_date by month.",
      "For those employees who did not have any job in the past, show me about the distribution of  hire_date and the average of salary bin hire_date by month in a bar chart.",
      "For those employees who did not have any job in the past, find  hire_date and the average of salary bin hire_date by month, and visualize them by a bar chart."
    ],
    "irrelevant_tables": [
      "jobs",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1741": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "SALARY",
      "y_name": "COMMISSION_PCT",
      "x_data": [
        [
          24000,
          9000,
          6000,
          4800,
          4800,
          4200,
          12000,
          9000,
          8200,
          7700,
          7800,
          6900,
          3100,
          2900,
          2800,
          2600,
          2500,
          8000,
          8200,
          6500,
          5800,
          3200,
          2700,
          2400,
          2200,
          3300,
          2800,
          2500,
          2100,
          3300,
          2900,
          2400,
          2200,
          3600,
          3200,
          2700,
          2500,
          3500,
          3100,
          2600,
          2500,
          14000,
          13500,
          12000,
          11000,
          10500,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10500,
          9500,
          7200,
          6800,
          6400,
          6200,
          11500,
          10000,
          9600,
          7400,
          7300,
          6100,
          11000,
          8800,
          8400,
          7000,
          6200,
          3200,
          3100,
          2500,
          2800,
          4200,
          4100,
          3400,
          3000,
          3800,
          3600,
          2900,
          2500,
          4000,
          3900,
          3200,
          2800,
          3100,
          3000,
          2600,
          2600,
          6000,
          6500,
          10000,
          12000,
          8300
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0.4,
          0.3,
          0.3,
          0.3,
          0.2,
          0.3,
          0.25,
          0.25,
          0.2,
          0.2,
          0.15,
          0.35,
          0.35,
          0.35,
          0.3,
          0.3,
          0.25,
          0.25,
          0.15,
          0.1,
          0.1,
          0.1,
          0.1,
          0.25,
          0.2,
          0.2,
          0.15,
          0.15,
          0.1,
          0.3,
          0.25,
          0.2,
          0.15,
          0.1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For those employees who did not have any job in the past, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
      "For those employees who did not have any job in the past, return a scatter chart about the correlation between  salary and  commission_pct .",
      "For those employees who did not have any job in the past, a scatter chart shows the correlation between  salary and  commission_pct .",
      "For those employees who did not have any job in the past, draw a scatter chart about the correlation between  salary and  commission_pct ."
    ],
    "irrelevant_tables": [
      "locations",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1807": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME"
    },
    "chart": "Pie",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "FIRST_NAME",
      "y_name": "COUNT(FIRST_NAME)",
      "x_data": [
        [
          "Adam",
          "Payam",
          "William"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY FIRST_NAME",
      "sort": null
    },
    "nl_queries": [
      "For employees with first names that end with the letter 'm', groups and counts the first name to visualize a pie graph.",
      "For those employees whose first name is ending with the letter m, show the proportion of the first name using a pie chart."
    ],
    "irrelevant_tables": [
      "job_history",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1831": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'",
        "binning": "BIN HIRE_DATE BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "SUM(SALARY)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          75800,
          68100,
          116200,
          70400,
          92000,
          78700,
          72300
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "For those employees whose first name does not contain the letter M, sum their salary by binning the hire date into the day of week interval for visualizing a bar chart.",
      "Bin the hire date into the day of week interval, and then calculate the total salary of employees in each day for a bar chart, note that just select those employees without the letter M in their first name."
    ],
    "irrelevant_tables": [
      "locations",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1839": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees",
        "binning": "BIN HIRE_DATE BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "COUNT(HIRE_DATE)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          15,
          15,
          16,
          16,
          15,
          15,
          15
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Bin the hire date of employees into the day of week interval and count them for visualizing a bar chart.",
      "Give a bar chart to show the number of employees by each hire date, note that bin the hire date into the day of week interval."
    ],
    "irrelevant_tables": [
      "departments",
      "countries"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1966": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "bedType",
      "y_name": "count(*)",
      "x_data": [
        [
          "Double",
          "King",
          "Queen"
        ]
      ],
      "y_data": [
        [
          2,
          4,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Visualize a pie chart with what are the number of rooms for each bed type?",
      "Return a pie chart on what are the number of rooms for each bed type?",
      "What are the number of rooms for each bed type. Show a pie chart.",
      "Give me a pie to show the total number from different bedtype."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1968": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "decor",
      "y_name": "avg(basePrice)",
      "x_data": [
        [
          "modern",
          "rustic",
          "traditional"
        ]
      ],
      "y_data": [
        [
          112.5,
          162.5,
          187.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the average price of the rooms in different decor using a pie chart.",
      "What is the proportion of the average base price of the rooms for each different decor? Show me a pie chart!",
      "Please use a pie chart to show the proportion of the average price of the rooms in a different decor."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1969": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "decor",
      "y_name": "avg(basePrice)",
      "x_data": [
        [
          "modern",
          "rustic",
          "traditional"
        ]
      ],
      "y_data": [
        [
          112.5,
          162.5,
          187.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the average price of the rooms in different decor using a bar chart.",
      "What is the average price of the rooms for each different decor? Show me a bar chart!",
      "Please use a bar chart to show the average price of the rooms in a different decor.",
      "Give me a bar chart for the average of baseprice of each decor"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1971": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT decor , min(basePrice) FROM Rooms GROUP BY decor"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "decor",
      "y_name": "min(basePrice)",
      "x_data": [
        [
          "modern",
          "rustic",
          "traditional"
        ]
      ],
      "y_data": [
        [
          75,
          150,
          150
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the proportion of the minimum price of the rooms for each different decor? Show me a pie chart!",
      "Please use a pie chart to show the proportion of the minimum price of the rooms in a different decor.",
      "Show the minimum price of the rooms in different decor using a pie chart."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1972": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(basePrice)",
      "y_name": "min(basePrice)",
      "x_data": [
        [
          112.5,
          162.5,
          187.5
        ]
      ],
      "y_data": [
        [
          75,
          150,
          150
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Please give me scatter to visualize two attr: the average and minimum price of the rooms in different decor using a scatter."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "1973": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(basePrice)",
      "y_name": "min(basePrice)",
      "x_data": [
        [
          112.5
        ],
        [
          162.5
        ],
        [
          187.5
        ]
      ],
      "y_data": [
        [
          75
        ],
        [
          150
        ],
        [
          150
        ]
      ],
      "classify": [
        "modern",
        "rustic",
        "traditional"
      ],
      "describe": "GROUP BY decor",
      "sort": null
    },
    "nl_queries": [
      "Please give me scatter to visualize three attr: the average and minimum price of the rooms in different decor using a scatter.",
      "Show avg(baseprice) vs minimal baseprice as scatter plot use a different color for each decor"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "1974": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "decor",
      "y_name": "count(*)",
      "x_data": [
        [
          "modern",
          "traditional"
        ]
      ],
      "y_data": [
        [
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the number of rooms with king bed for each decor type. Plot them as pie chart.",
      "Draw a pie chart for how many rooms have king beds? Report the number for each decor type."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1975": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "decor",
      "y_name": "count(*)",
      "x_data": [
        [
          "modern",
          "traditional"
        ]
      ],
      "y_data": [
        [
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a bar chart on how many rooms have king beds? Report the number for each decor type.",
      "How many rooms have king beds? Report the number for each decor type. Plot them as bar chart."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "1976": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "bedType",
      "y_name": "avg(basePrice)",
      "x_data": [
        [
          "Double",
          "King",
          "Queen"
        ]
      ],
      "y_data": [
        [
          100,
          181.25,
          150
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a pie on what is the average base price of different bed type? List bed type and average base price.",
      "Return a pie chart on what is the average base price of different bed type? List bed type and average base price.",
      "What is the average base price of different bed type? List bed type and average base price. Visualize by pie chart.",
      "For each bed type, find the average base price of different bed type. Plot them as pie chart.",
      "Return a pie on what is the average base price of rooms, for each bed type?",
      "Return a pie chart on what is the average base price of rooms, for each bed type?",
      "What is the average base price of rooms, for each bed type. Show a pie chart.",
      "Create a pie chart showing mean baseprice across bedtype."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1978": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "decor",
      "y_name": "count(*)",
      "x_data": [
        [
          "modern",
          "rustic",
          "traditional"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Pie. how many rooms cost more than 120, for each different decor?",
      "How many rooms cost more than 120, for each different decor. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "1992": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
        "binning": "BIN Date_Claim_Settled BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims ) BIN Date_Claim_Settled BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Claim_Settled",
      "y_name": "COUNT(Date_Claim_Settled)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          2,
          0,
          0,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Claim_Settled BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Among all the claims, which claims have a claimed amount larger than the average? Please Bin the date it was settled into weekday interval and count them to show a bar chart.",
      "For all the claims whose claimed amount is larger than the average, bin the settlement date into the day of week interval and count them for visualizing a bar chart."
    ],
    "irrelevant_tables": [
      "Customers",
      "Customer_Policies"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2005": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC"
    },
    "chart": "Grouping Line",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Payment_Made",
      "y_name": "Amount_Payment",
      "x_data": [
        [
          "2017-05-03",
          "2017-05-04",
          "2017-05-28",
          "2017-06-24",
          "2017-07-31",
          "2017-08-06",
          "2017-10-07",
          "2017-12-16",
          "2018-01-10",
          "2018-01-19",
          "2018-01-28",
          "2018-02-16",
          "2018-02-18",
          "2018-02-24"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          177130,
          0,
          0,
          0,
          0
        ],
        [
          0,
          123255,
          0,
          0,
          0,
          38324,
          71246,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          448613,
          456098,
          423154,
          0,
          0,
          0,
          407235,
          0,
          319142,
          241730,
          235893,
          0
        ],
        [
          172309,
          0,
          155654,
          0,
          0,
          0,
          0,
          459407,
          0,
          0,
          0,
          0,
          0,
          7343
        ]
      ],
      "classify": [
        "American Express",
        "Discover Card",
        "MasterCard",
        "Visa"
      ],
      "describe": "GROUP BY Payment_Method_Code, GROUP BY Date_Payment_Made",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a line chart to show the trend of the amount of each payment of different payment methods, ordered by the payment date in ascending order."
    ],
    "irrelevant_tables": [
      "Settlements",
      "Customer_Policies"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2009": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Payment_Method_Code",
      "y_name": "COUNT(Payment_Method_Code)",
      "x_data": [
        [
          "American Express",
          "Discover Card",
          "MasterCard",
          "Visa"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          7,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Payment_Method_Code",
      "sort": null
    },
    "nl_queries": [
      "Show me the proportion of each payment method code using a pie chart."
    ],
    "irrelevant_tables": [
      "Customer_Policies",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2011": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Payment_Method_Code",
      "y_name": "SUM(Amount_Payment)",
      "x_data": [
        [
          "American Express",
          "Discover Card",
          "MasterCard",
          "Visa"
        ]
      ],
      "y_data": [
        [
          177130,
          232825,
          2531865,
          794713
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Payment_Method_Code",
      "sort": null
    },
    "nl_queries": [
      "How many total amounts of payments by each method code? You can give me a bar chart.",
      "Please use a bar chart to show the total amount of payment by each payment method code.",
      "Bar chart of sum amount payment from each payment method code"
    ],
    "irrelevant_tables": [
      "Customers",
      "Customer_Policies"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2012": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Payment_Method_Code",
      "y_name": "AVG(Amount_Payment)",
      "x_data": [
        [
          "American Express",
          "Discover Card",
          "MasterCard",
          "Visa"
        ]
      ],
      "y_data": [
        [
          177130,
          77608.33333333333,
          361695,
          198678.25
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Payment_Method_Code",
      "sort": null
    },
    "nl_queries": [
      "What about the average amounts of payments by each method code? You can give me a bar chart.",
      "Please use a bar chart to show the average amount of payment by each payment method code.",
      "Bar graph to show the average of amount payment from different payment method code"
    ],
    "irrelevant_tables": [
      "Customer_Policies",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2013": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Payment_Method_Code",
      "y_name": "SUM(Amount_Payment)",
      "x_data": [
        [
          "American Express",
          "Discover Card",
          "MasterCard",
          "Visa"
        ]
      ],
      "y_data": [
        [
          177130,
          232825,
          2531865,
          794713
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Payment_Method_Code",
      "sort": null
    },
    "nl_queries": [
      "What about the proportion of the total amounts of payments by each method code? You can give me a pie chart.",
      "Please use a pie chart to show the proportion of the total amount of payment by each payment method code.",
      "Create a pie chart showing total number of amount payment across payment method code."
    ],
    "irrelevant_tables": [
      "Settlements",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2014": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Payment_Made",
      "y_name": "SUM(Amount_Payment)",
      "x_data": [
        [
          "2017-05-03",
          "2017-05-04",
          "2017-05-28",
          "2017-06-24",
          "2017-07-31",
          "2017-08-06",
          "2017-10-07",
          "2017-12-16",
          "2018-01-10",
          "2018-01-19",
          "2018-01-28",
          "2018-02-16",
          "2018-02-18",
          "2018-02-24"
        ]
      ],
      "y_data": [
        [
          172309,
          123255,
          604267,
          456098,
          423154,
          38324,
          71246,
          459407,
          407235,
          177130,
          319142,
          241730,
          235893,
          7343
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Date_Payment_Made",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the trend about the total amount of each payment about the payment day, line chart. Note that, you should order the payment day in ascending order.",
      "Return a trend line with sorting the payment day in ascending order to show the total amount of payment by each payment day."
    ],
    "irrelevant_tables": [
      "Claims",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2015": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Payment_Made",
      "y_name": "AVG(Amount_Payment)",
      "x_data": [
        [
          "2017-05-03",
          "2017-05-04",
          "2017-05-28",
          "2017-06-24",
          "2017-07-31",
          "2017-08-06",
          "2017-10-07",
          "2017-12-16",
          "2018-01-10",
          "2018-01-19",
          "2018-01-28",
          "2018-02-16",
          "2018-02-18",
          "2018-02-24"
        ]
      ],
      "y_data": [
        [
          172309,
          123255,
          302133.5,
          456098,
          423154,
          38324,
          71246,
          459407,
          407235,
          177130,
          319142,
          241730,
          235893,
          7343
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Date_Payment_Made",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a trend line to show the average amount of payment by each payment day.",
      "Show the trend about the average amount of each payment about the payment day, line chart. Note that, you should order the payment day in ascending order.",
      "Return a trend line with sorting the payment day in ascending order to show the average amount of payment by each payment day."
    ],
    "irrelevant_tables": [
      "Customers",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2018": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements",
        "binning": "BIN Date_Claim_Settled BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Claim_Settled",
      "y_name": "COUNT(Date_Claim_Settled)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          0,
          4,
          2,
          2,
          2,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Claim_Settled BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart."
    ],
    "irrelevant_tables": [
      "Payments",
      "Customer_Policies"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2019": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements",
        "binning": "BIN Date_Claim_Made BY YEAR"
      },
      "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Claim_Made",
      "y_name": "COUNT(Date_Claim_Made)",
      "x_data": [
        [
          "2016",
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          4,
          8,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Claim_Made BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Bin the claim date into the Year interval and count them for visualizing a bar chart."
    ],
    "irrelevant_tables": [
      "Payments",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2021": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_Claim_Settled",
      "y_name": "COUNT(Date_Claim_Settled)",
      "x_data": [
        [
          "2017-10-06",
          "2017-11-04",
          "2017-11-15",
          "2017-11-30",
          "2017-12-24",
          "2018-01-16",
          "2018-01-27",
          "2018-02-04",
          "2018-02-11",
          "2018-02-14",
          "2018-02-15",
          "2018-02-20",
          "2018-03-02"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          3,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Date_Claim_Settled",
      "sort": null
    },
    "nl_queries": [
      "Plot date claim settled by the number of date claim settled as a line chart"
    ],
    "irrelevant_tables": [
      "Customers",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2027": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'",
        "binning": "BIN Date_Payment_Made BY YEAR"
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "SUM(Amount_Payment)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          787370,
          7343
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Payment_Made BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Sum the amount for all the payments processed with Visa by each year using a bar chart."
    ],
    "irrelevant_tables": [
      "Settlements",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2036": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'",
        "binning": "BIN Date_Payment_Made BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "AVG(Amount_Payment)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          172309,
          0,
          0,
          233375,
          155654
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Payment_Made BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart."
    ],
    "irrelevant_tables": [
      "Claims",
      "Customer_Policies"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2065": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "loan_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "cust_name",
      "y_name": "acc_bal",
      "x_data": [
        [
          "Mary",
          "Jack"
        ]
      ],
      "y_data": [
        [
          2000,
          1000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the name and account balance of the customer whose name includes the letter 'a'. Show a pie chart.",
      "Draw a pie chart for what are the names and account balances of customers with the letter a in their names?",
      "Return a pie chart on what are the names and account balances of customers with the letter a in their names?"
    ],
    "irrelevant_tables": [
      "loan",
      "bank"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2067": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "loan_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "acc_type",
      "y_name": "avg(acc_bal)",
      "x_data": [
        [
          "checking",
          "saving"
        ]
      ],
      "y_data": [
        [
          1000,
          2000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each account type, find the average account balance of customers with credit score lower than 50. Show a pie chart.",
      "Show me a pie chart for what is the average account balance of customers with credit score below 50 for the different account types?"
    ],
    "irrelevant_tables": [
      "loan",
      "bank"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2110": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events",
        "binning": "BIN date_moved_in BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events BIN date_moved_in BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_moved_in",
      "y_name": "COUNT(date_moved_in)",
      "x_data": [
        [
          "2015",
          "2016"
        ]
      ],
      "y_data": [
        [
          9,
          4
        ]
      ],
      "classify": [],
      "describe": "BIN date_moved_in BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Group and count the move in date in a bar chart, and I want to bin the X into Year interval.",
      "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them, please bin X-axis into Year interval."
    ],
    "irrelevant_tables": [
      "Services",
      "Timed_Locations_of_Things"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2119": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events",
        "binning": "BIN date_moved_in BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events BIN date_moved_in BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_moved_in",
      "y_name": "COUNT(date_moved_in)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          0,
          4,
          0,
          0,
          9,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_moved_in BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Group and count the move in date in a bar chart, and bin the X-axis into week day interval.",
      "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them, please bin X-axis into Day of Week interval."
    ],
    "irrelevant_tables": [
      "Things",
      "Organizations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2168": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Team , COUNT(*) FROM technician GROUP BY Team"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Team",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "CHC",
          "CLE",
          "CWS",
          "NYY",
          "PHA"
        ]
      ],
      "y_data": [
        [
          1,
          4,
          2,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different teams of technicians and the number of technicians in each team in a pie chart.",
      "Show different teams of technicians and the number of technicians in each team. Show a pie chart.",
      "For each team, how many technicians are there. Visualize by pie chart."
    ],
    "irrelevant_tables": [
      "repair",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2172": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "CD drive",
          "DVD burner",
          "DVD drive",
          "Floppy disk",
          "Memory",
          "Toner cartridge",
          "ZIP drive"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": null
    },
    "nl_queries": [
      "Select the name of the products with a price less than or equal to $200, and count them by a bar chart",
      "A bar chart for what are the number of the names of products with price at most 200?",
      "What are the names of products with price at most 200, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2174": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "max(revenue)",
      "x_data": [
        [
          "Creative Labs",
          "Iomega",
          "Hewlett-Packard",
          "Winchester",
          "Fujitsu",
          "Sony"
        ]
      ],
      "y_data": [
        [
          100,
          200,
          50,
          30,
          130,
          120
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Give me a bar chart to show the names and revenue of the company that earns the highest revenue in each headquarter city."
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2180": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "CD drive",
          "DVD burner",
          "DVD drive",
          "Floppy disk",
          "Hard drive",
          "Memory",
          "Monitor",
          "Printer",
          "Toner cartridge",
          "ZIP drive"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": null
    },
    "nl_queries": [
      "A bar chart for what are the number of the names of all products?",
      "Select the names of all the products in the store, and count them by a bar chart",
      "What are the names of all products, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2181": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "sum(revenue)",
      "x_data": [
        [
          "Creative Labs",
          "Fujitsu",
          "Hewlett-Packard",
          "Iomega",
          "Sony",
          "Winchester"
        ]
      ],
      "y_data": [
        [
          100,
          130,
          50,
          200,
          120,
          30
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the total revenue for each manufacturer. Plot them as bar chart.",
      "A bar chart about what is the total revenue of each manufacturer?",
      "Return a bar chart on what is the total revenue of each manufacturer?",
      "Bar graph to show sum revenue from different name"
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2303": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Revenue",
      "x_data": [
        [
          "Iomega",
          "Fujitsu",
          "Sony",
          "Creative Labs",
          "Hewlett-Packard",
          "Winchester"
        ]
      ],
      "y_data": [
        [
          200,
          130,
          120,
          100,
          50,
          30
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Please show me a bar chart for visualizing the name and revenue of all manufacturers sorted by their revenue in the descending order.",
      "What are the names, and revenues for manufacturers, sorted by revenue descending in a bar graph?"
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2304": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarter , Revenue FROM manufacturers ORDER BY revenue DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarter , Revenue FROM manufacturers ORDER BY revenue DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarter",
      "y_name": "Revenue",
      "x_data": [
        [
          "Beijing",
          "Taiwan",
          "Tokyo",
          "Austin",
          "Los Angeles",
          "Paris"
        ]
      ],
      "y_data": [
        [
          200,
          130,
          120,
          100,
          50,
          30
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Give me a bar chart with the headquarters and revenues for manufacturers, sorted by revenue descending."
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2307": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Name",
      "y_name": "Num_of_Component",
      "x_data": [
        [
          "Billiard table",
          "Dining set"
        ]
      ],
      "y_data": [
        [
          14,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the component amounts and names of all furnitures that have more than 10 components. Show me the proportion of component amounts using a pie chart."
    ],
    "irrelevant_tables": [
      "furniture_manufacte",
      "manufacturer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2311": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Name",
      "y_name": "Market_Rate",
      "x_data": [
        [
          "Bench",
          "Four-poster bed"
        ]
      ],
      "y_data": [
        [
          3.5,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Visualize names and market shares of furnitures which no any company is producing in our records by a pie chart.",
      "Please give me a pie chart to show the market share of different furniture name, which no any company is producing in our records by a pie chart."
    ],
    "irrelevant_tables": [
      "manufacturer"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2348": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "mountain_photos",
    "vis_obj": {
      "chart": "pie",
      "x_name": "brand",
      "y_name": "COUNT(brand)",
      "x_data": [
        [
          "Olympus",
          "Panasonic",
          "Schneider Kreuznach",
          "Sigma"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY brand",
      "sort": null
    },
    "nl_queries": [
      "Count the brand of each camera lens with a pie chart.",
      "Compute the total how many brand across brand as a pie chart."
    ],
    "irrelevant_tables": [
      "photos",
      "mountain"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2350": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT color , COUNT(color) FROM photos GROUP BY color"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "mountain_photos",
    "vis_obj": {
      "chart": "pie",
      "x_name": "color",
      "y_name": "COUNT(color)",
      "x_data": [
        [
          "Black/White",
          "RBG"
        ]
      ],
      "y_data": [
        [
          2,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY color",
      "sort": null
    },
    "nl_queries": [
      "Group and count the color scheme for all the photos using a pie chart."
    ],
    "irrelevant_tables": [
      "camera_lens",
      "mountain"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2351": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT color , COUNT(color) FROM photos GROUP BY color"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "mountain_photos",
    "vis_obj": {
      "chart": "bar",
      "x_name": "color",
      "y_name": "COUNT(color)",
      "x_data": [
        [
          "Black/White",
          "RBG"
        ]
      ],
      "y_data": [
        [
          2,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY color",
      "sort": null
    },
    "nl_queries": [
      "Compare the number of items in each color scheme using a bar chart.",
      "Please draw a bar chart to show the total number of different color.",
      "Bar chart x axis color y axis the number of color"
    ],
    "irrelevant_tables": [
      "camera_lens",
      "mountain"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2416": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "museum_visit",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Name",
      "y_name": "Level_of_membership",
      "x_data": [
        [
          "Fernando Gago",
          "Gonzalo Higua\u00edn ",
          "Guti Midfielder"
        ]
      ],
      "y_data": [
        [
          6,
          8,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the name and membership level of the visitors whose membership level is higher than 4. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "museum"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2422": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "music_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "languages",
      "y_name": "avg(rating)",
      "x_data": [
        [
          "bangla",
          "english"
        ]
      ],
      "y_data": [
        [
          7.5,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the average rating of songs for each language. Plot them as pie chart.",
      "Return a pie chart on what is the average song rating for each language?",
      "Display a pie chart for what is the average song rating for each language?",
      "Give me a pie to show mean rating from different languages."
    ],
    "irrelevant_tables": [
      "genre",
      "files"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2428": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT g_name , rating FROM genre ORDER BY g_name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT g_name , rating FROM genre ORDER BY g_name"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "music_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "g_name",
      "y_name": "rating",
      "x_data": [
        [
          "blues",
          "folk",
          "modern",
          "nazrul",
          "pop",
          "tagore"
        ]
      ],
      "y_data": [
        [
          7,
          9,
          8,
          7,
          9,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the names of all genres in alphabetical oder, together with its ratings in a bar chart.",
      "List the names of all genres in alphabetical oder, together with its ratings. Plot them as bar chart.",
      "Show me a bar chart for what are the names of all genres in alphabetical order, combined with its ratings?",
      "Return a bar chart on what are the names of all genres in alphabetical order, combined with its ratings?",
      "What are the names of all genres in alphabetical order, combined with its ratings. Show bar chart."
    ],
    "irrelevant_tables": [
      "files",
      "song"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2437": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "music_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Artist",
      "y_name": "Age",
      "x_data": [
        [
          "Gorgoroth",
          "Ophiolatry",
          "Black Flame",
          "Tangorodrim",
          "Triumfall"
        ]
      ],
      "y_data": [
        [
          34,
          22,
          18,
          27,
          49
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How old were these singers when they first received a famous tile, using a bar chart and in descending order of age?"
    ],
    "irrelevant_tables": [
      "volume",
      "music_festival"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2440": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "music_4",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Result",
      "y_name": "COUNT(Result)",
      "x_data": [
        [
          "Awarded",
          "Nominated"
        ]
      ],
      "y_data": [
        [
          3,
          6
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Result",
      "sort": null
    },
    "nl_queries": [
      "Return the results of all music festivals using a pie chart.",
      "What is the proportion of results for each music festival? Counld you show me the result with a pie chart.",
      "Please give me a pie chart to show the proportion of results of all music festival.",
      "Create a pie chart showing the number of result across result."
    ],
    "irrelevant_tables": [
      "artist",
      "volume"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2464": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "pie",
      "x_name": "gender",
      "y_name": "count(*)",
      "x_data": [
        [
          "female",
          "male"
        ]
      ],
      "y_data": [
        [
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Pie chart. how many people are under 40 for each gender?",
      "How many people are under 40 for each gender. Show a pie chart."
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2466": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT job , COUNT(job) FROM Person GROUP BY job",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "pie",
      "x_name": "job",
      "y_name": "COUNT(job)",
      "x_data": [
        [
          "doctor",
          "engineer",
          "student"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY job",
      "sort": null
    },
    "nl_queries": [
      "Count the job title of all people using a pie chart.",
      "What are the job titles of every person? Please plot the result with a pie chart.",
      "Compute the total the number of job across job as a pie chart."
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2473": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "avg(age)",
      "x_data": [
        [
          "female",
          "male"
        ]
      ],
      "y_data": [
        [
          25.5,
          40
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a bar chart on what is the average age for each gender?",
      "Draw a bar chart for what is the average age for each gender?",
      "What is the average age for each gender. Visualize by bar chart.",
      "How old is each gender, on average. Plot them as bar chart.",
      "Bar graph to show the average of age from different gender",
      "Give me a histogram for how old is each gender, on average?",
      "Return a histogram on how old is each gender, on average?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2483": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Nationality",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "England",
          "Northern Ireland",
          "Wales"
        ]
      ],
      "y_data": [
        [
          9,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the different nationalities and the number of journalists of each nationality with a pie chart.",
      "Create a pie chart showing the total number across nationality."
    ],
    "irrelevant_tables": [
      "news_report",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2485": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "England",
          "Northern Ireland",
          "Wales"
        ]
      ],
      "y_data": [
        [
          9,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": null
    },
    "nl_queries": [
      "Show me the propotion of the journalist's nationality using a pie chart.",
      "Visualize a pie chart, count and group by nationality from the journalist table."
    ],
    "irrelevant_tables": [
      "news_report",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2489": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Nationality",
      "y_name": "SUM(Age)",
      "x_data": [
        [
          "England",
          "Northern Ireland",
          "Wales"
        ]
      ],
      "y_data": [
        [
          308,
          29,
          27
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": null
    },
    "nl_queries": [
      "Show me a pie chart for what are the nationalities and the total ages of journalists?",
      "Visualize a pie chart with what are the nationalities and the total ages of journalists?",
      "What are the nationalities and the total ages of journalists. Return me a pie chart."
    ],
    "irrelevant_tables": [
      "news_report",
      "event"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2503": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Argentina",
          "Hungary",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different nationalities along with the number of hosts of each nationality in a bar chart.",
      "Show different nationalities along with the number of hosts of each nationality. Visualize by bar chart.",
      "A bar chart about how many hosts does each nationality have? List the nationality and the count.",
      "How many hosts does each nationality have? List the nationality and the count with a bar chart.",
      "How many hosts does each nationality have? List the nationality and the count. Visualize by bar chart.",
      "Bar chart x axis nationality y axis the total number ",
      "Return a histogram on how many hosts does each nationality have? List the nationality and the count."
    ],
    "irrelevant_tables": [
      "party",
      "party_host"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2506": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM party GROUP BY Location",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Heineken Music Hall Amsterdam",
          "Hemkade 48 Zaandam",
          "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam",
          "RAI Amsterdam",
          "Various locations"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": null
    },
    "nl_queries": [
      "Count the total number of different locations of parties using a pie chart.",
      "Give me the proportion about the location of each party with a pie chart.",
      "Create a pie chart showing the number of location across location."
    ],
    "irrelevant_tables": [
      "party_host",
      "host"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2516": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Minister",
      "y_name": "COUNT(Minister)",
      "x_data": [
        [
          "Dr. Kwame Nkrumah (MP)",
          "Ebenezer Ako-Adjei (MP)",
          "Imoru Egala (MP)"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Minister",
      "sort": null
    },
    "nl_queries": [
      "Which ministers are not a part of the Progress Party, and count them by a pie chart",
      "Show all ministers who do not belong to Progress Party, and count them by a pie chart"
    ],
    "irrelevant_tables": [
      "member",
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2526": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Minister",
      "y_name": "COUNT(Minister)",
      "x_data": [
        [
          "Dr. Kwame Nkrumah (MP)",
          "Ebenezer Ako-Adjei (MP)",
          "Imoru Egala (MP)",
          "Kojo Botsio (MP)"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Minister",
      "sort": null
    },
    "nl_queries": [
      "Show the proportion of all ministers using a pie chart.",
      "Compute the total how many minister across minister as a pie chart."
    ],
    "irrelevant_tables": [
      "region",
      "member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2543": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "perpetrator",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Country",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "China",
          "India",
          "Japan",
          "South Korea"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Visualize a pie chart with what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2548": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(pet_age)",
      "y_name": "max(pet_age)",
      "x_data": [
        [
          3,
          1.5
        ]
      ],
      "y_data": [
        [
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between the average and maximum age for each type of pet using a scatter plot.",
      "Please plot a scatter chart to tell me what is the correlation between average and maximum age for each pet type?"
    ],
    "irrelevant_tables": [
      "Has_Pet",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2549": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "PetType",
      "y_name": "avg(pet_age)",
      "x_data": [
        [
          "cat",
          "dog"
        ]
      ],
      "y_data": [
        [
          3,
          1.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the average age for each type of pet. Visualize them as a pie chart.",
      "Give me a pie to show the average of pet age from different pettype."
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2550": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY PetType",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY PetType"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(pet_age)",
      "y_name": "max(pet_age)",
      "x_data": [
        [
          3
        ],
        [
          1.5
        ]
      ],
      "y_data": [
        [
          3
        ],
        [
          2
        ]
      ],
      "classify": [
        "cat",
        "dog"
      ],
      "describe": "GROUP BY PetType",
      "sort": null
    },
    "nl_queries": [
      "Find the relationship between the average and maximum age for each type of pet using a grouped scatter plot.",
      "Please plot a scatter chart to tell me what is the correlation between average and maximum age with different colors for each pet type?",
      "Show the relation between avg(pet age) and maximal pet age for each PetType using a grouped scatter chart"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2567": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Carrier",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Sprint",
          "TMobile"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different carriers of phones together with the number of phones with each carrier by a pie chart."
    ],
    "irrelevant_tables": [
      "phone_market",
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2568": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Carrier",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Sprint",
          "TMobile"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different carriers of phones together with the number of phones with each carrier by a bar chart.",
      "Show different carriers of phones together with the number of phones with each carrier. Plot them as bar chart.",
      "Plot the total number by grouped by carrier as a bar graph"
    ],
    "irrelevant_tables": [
      "market",
      "phone_market"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2569": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Carrier",
      "y_name": "COUNT(Carrier)",
      "x_data": [
        [
          "Sprint",
          "TMobile"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Carrier",
      "sort": null
    },
    "nl_queries": [
      "What is the number of carriers of phones? Give me a bar chart.",
      "Can you show a bar chart to visualize the number of carriers?",
      "Bar chart x axis carrier y axis the number of carrier"
    ],
    "irrelevant_tables": [
      "market",
      "phone_market"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2570": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Carrier",
      "y_name": "COUNT(Carrier)",
      "x_data": [
        [
          "Sprint",
          "TMobile"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Carrier",
      "sort": null
    },
    "nl_queries": [
      "Can you visualize a pie chart to show the proportion of carriers?",
      "Create a pie chart showing the number of carrier across carrier."
    ],
    "irrelevant_tables": [
      "phone_market",
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2571": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "phone_market",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Carrier",
      "y_name": "SUM(Memory_in_G)",
      "x_data": [
        [
          "Sprint",
          "TMobile"
        ]
      ],
      "y_data": [
        [
          160,
          208
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Carrier",
      "sort": null
    },
    "nl_queries": [
      "Give me a pie to show total number of memory in g from different carrier."
    ],
    "irrelevant_tables": [
      "market",
      "phone_market"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2593": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "poker_player",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Nationality",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Bulgaria",
          "Russia"
        ]
      ],
      "y_data": [
        [
          1,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a pie on how many people are there of each nationality?",
      "How many people are there of each nationality. Visualize by pie chart.",
      "Give me a pie to show the total number from different nationality."
    ],
    "irrelevant_tables": [
      "poker_player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2604": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "pie",
      "x_name": "catalog_level_name",
      "y_name": "catalog_level_number",
      "x_data": [
        [
          "Sub-Category",
          "Product"
        ]
      ],
      "y_data": [
        [
          8,
          9
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a pie chart for what are the name and level of catalog structure with level number between 5 and 10"
    ],
    "irrelevant_tables": [
      "Attribute_Definitions",
      "Catalog_Contents_Additional_Attributes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2605": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "bar",
      "x_name": "catalog_level_name",
      "y_name": "catalog_level_number",
      "x_data": [
        [
          "Sub-Category",
          "Product"
        ]
      ],
      "y_data": [
        [
          8,
          9
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10",
      "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10"
    ],
    "irrelevant_tables": [
      "Catalogs",
      "Attribute_Definitions"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2606": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "pie",
      "x_name": "catalog_entry_name",
      "y_name": "capacity",
      "x_data": [
        [
          "Vimto",
          "Sprite Lemo",
          "Dr Pepper",
          "Diet Pepsi",
          "Diet Mountain Dew"
        ]
      ],
      "y_data": [
        [
          6,
          8,
          1,
          9,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the name and capacity of products with price greater than 700 (in USD). Visualize by pie chart.",
      "Pie. which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
      "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities with a pie chart."
    ],
    "irrelevant_tables": [
      "Attribute_Definitions",
      "Catalog_Structure"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2615": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'",
        "binning": "BIN payment_date BY MONTH"
      },
      "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "bar",
      "x_name": "payment_date",
      "y_name": "COUNT(payment_date)",
      "x_data": [
        [
          "Feb",
          "Mar"
        ]
      ],
      "y_data": [
        [
          1,
          13
        ]
      ],
      "classify": [],
      "describe": "BIN payment_date BY MONTH",
      "sort": null
    },
    "nl_queries": [
      "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check', bin the payment date by month and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Bookings",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2617": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date"
    },
    "chart": "Line",
    "hardness": "Hard",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "line",
      "x_name": "payment_date",
      "y_name": "COUNT(payment_date)",
      "x_data": [
        [
          "2018-02-27",
          "2018-03-02",
          "2018-03-03",
          "2018-03-09",
          "2018-03-12",
          "2018-03-17",
          "2018-03-19",
          "2018-03-22",
          "2018-03-23"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          3,
          1,
          2,
          2,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY payment_date",
      "sort": null
    },
    "nl_queries": [
      "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart"
    ],
    "irrelevant_tables": [
      "Bookings",
      "Products_for_Hire"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2622": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "program_share",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Time_of_day",
      "y_name": "count(*)",
      "x_data": [
        [
          "Morning",
          "Night",
          "Noon"
        ]
      ],
      "y_data": [
        [
          4,
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Count the number of programs broadcast for each time section of a day by a pie chart.",
      "Count the number of programs broadcast for each time section of a day. Visualize by pie chart."
    ],
    "irrelevant_tables": [
      "program",
      "channel"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2624": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "program_share",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Owner",
      "y_name": "sum(Rating_in_percent)",
      "x_data": [
        [
          "Anhui Television",
          "CCTV",
          "HBS",
          "Shandong Television"
        ]
      ],
      "y_data": [
        [
          0.2,
          2.43,
          0.53,
          0.19
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Find the total rating ratio for each channel owner. Show a pie chart.",
      "Return a pie chart on what is the total rating of channel for each channel owner?",
      "What is the total rating of channel for each channel owner. Plot them as pie chart.",
      "Compute the total total number of rating in percent across owner as a pie chart."
    ],
    "irrelevant_tables": [
      "broadcast_share",
      "program"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2630": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Type",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "Private",
          "Public",
          "Tribal"
        ]
      ],
      "y_data": [
        [
          7868,
          5267,
          1000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Please give me a pie chart showing institution types, along with the total enrollment for each type.",
      "Please tell me the proportion of total enrollment for each type using a pie chart.",
      "Give me a pie to show sum enrollment from different type."
    ],
    "irrelevant_tables": [
      "building",
      "protein"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2631": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "Private",
          "Public",
          "Tribal"
        ]
      ],
      "y_data": [
        [
          7868,
          5267,
          1000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Please give me a bar chart showing institution types, along with the total enrollment for each type.",
      "Please compare the total enrollment for each type using a bar chart.",
      "Bar chart x axis type y axis total number of enrollment"
    ],
    "irrelevant_tables": [
      "building",
      "protein"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2633": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT count(*) , sum(enrollment) FROM institution GROUP BY TYPE",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "count(*)",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          7,
          3,
          1
        ]
      ],
      "y_data": [
        [
          7868,
          5267,
          1000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the number of institutions and total enrollment for each type with a scatter plot."
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2634": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "count(*)",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          7
        ],
        [
          3
        ],
        [
          1
        ]
      ],
      "y_data": [
        [
          7868
        ],
        [
          5267
        ],
        [
          1000
        ]
      ],
      "classify": [
        "Private",
        "Public",
        "Tribal"
      ],
      "describe": "GROUP BY Type",
      "sort": null
    },
    "nl_queries": [
      "Show count(*) vs sum enrollment as scatter plot use a different color for each Type"
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "2637": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Floors FROM building ORDER BY floors",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Floors FROM building ORDER BY floors"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Floors",
      "x_data": [
        [
          "Tampa City Hall",
          "Citizens Bank Building",
          "Floridan Hotel",
          "Franklin Exchange Building",
          "Park Tower",
          "One Tampa City Center",
          "Bank of America Tower",
          "100 North Tampa"
        ]
      ],
      "y_data": [
        [
          10,
          12,
          17,
          22,
          36,
          39,
          42,
          42
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart that the name as the X-axis, and the number of floors for all buildings as Y-axis, and ordered by the number of floors in ascending.",
      "Please compare the number of floors for all building names using a bar chart, and order by the number of floors in ascending."
    ],
    "irrelevant_tables": [
      "Institution",
      "protein"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2638": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Street_address , Floors FROM building ORDER BY floors",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Street_address , Floors FROM building ORDER BY floors"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Street_address",
      "y_name": "Floors",
      "x_data": [
        [
          "315 John F. Kennedy Boulevard",
          "701 North Franklin Street",
          "905 Franklin Street",
          "655 North Franklin Street",
          "400 North Tampa Street",
          "201 North Franklin Street",
          "101 East Kennedy Boulevard",
          "100 North Tampa Street"
        ]
      ],
      "y_data": [
        [
          10,
          12,
          17,
          22,
          36,
          39,
          42,
          42
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Please compare the number of floors for all street address using a bar chart, and order by the number of floors in ascending.",
      "Return a bar chart that the street address as the X-axis, and the number of floors for all buildings as Y-axis, and ordered by the number of floors in ascending."
    ],
    "irrelevant_tables": [
      "protein",
      "Institution"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2642": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "DP/GT",
          "GT"
        ]
      ],
      "y_data": [
        [
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "Show me the proportion of classes of all races using a pie chart.",
      "What is the proportion of classes of all races? Give me a pie chart."
    ],
    "irrelevant_tables": [
      "track"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2645": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Name , Seating FROM track WHERE year_opened > 2000",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Name",
      "y_name": "Seating",
      "x_data": [
        [
          "Chicagoland Speedway",
          "Kansas Speedway"
        ]
      ],
      "y_data": [
        [
          75000,
          81687
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show names and seatings for all tracks opened after 2000 by a pie chart.",
      "Visualize a pie chart with what are the names and seatings for all tracks opened after 2000?"
    ],
    "irrelevant_tables": [
      "race"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2646": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Seating",
      "x_data": [
        [
          "Chicagoland Speedway",
          "Kansas Speedway"
        ]
      ],
      "y_data": [
        [
          75000,
          81687
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show names and seatings, ordered by seating for all tracks in asc opened after 2000 in a bar chart.",
      "Show names and seatings, ordered by seating for all tracks in ascending opened after 2000. Plot them as bar chart.",
      "Return a bar chart on what are the names and seatings for all tracks opened after 2000, ordered by seating in ascending?",
      "What are the names and seatings for all tracks opened after 2000, ordered by seating in ascending. Visualize by bar chart."
    ],
    "irrelevant_tables": [
      "race"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2652": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Builder , COUNT(Builder) FROM railway GROUP BY Builder ORDER BY Builder ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Builder , COUNT(Builder) FROM railway GROUP BY Builder ORDER BY Builder ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Builder",
      "y_name": "COUNT(Builder)",
      "x_data": [
        [
          "Avonside",
          "GER Hartford",
          "GER Stratford",
          "GNR Doncaster",
          "GWR Swindon",
          "MR Derby",
          "SECR Ashford",
          "Stephenson",
          "Swindon Works"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Builder",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart for listing the number of the builders of railways in ascending alphabetical order.",
      "List the builders of railways in ascending alphabetical order, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "railway_manage",
      "manager"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2656": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country"
    },
    "chart": "Pie",
    "hardness": "Hard",
    "db_id": "railway",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Australia",
          "England",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": null
    },
    "nl_queries": [
      "Show the countries that have managers of age above 50 or below 46, and count them by a pie chart",
      "A pie chart for showing the number of the countries that have managers of age above 50 or below 46."
    ],
    "irrelevant_tables": [
      "railway",
      "railway_manage"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2657": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Australia",
          "England",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": null
    },
    "nl_queries": [
      "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart",
      "A bar chart for showing the number of the countries that have managers of age above 50 or below 46."
    ],
    "irrelevant_tables": [
      "railway_manage",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2695": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "school_bus",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Home_city",
      "y_name": "COUNT(Home_city)",
      "x_data": [
        [
          "Bethel",
          "Coventry",
          "East Hartford",
          "Hartford",
          "Manchester"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          3,
          6,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Home_city",
      "sort": null
    },
    "nl_queries": [
      "Show the proportion of the home city of all drivers with a pie chart.",
      "Please give me a pie chart to show the proportion of the home city of all drivers ",
      "Give me a pie to show how many home city from different home city."
    ],
    "irrelevant_tables": [
      "school_bus",
      "school"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2703": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "donator_name",
      "y_name": "sum(amount)",
      "x_data": [
        [
          "San Jos\u00e9 de Ocoa",
          "Valverde",
          "Distrito Nacional",
          "Monte Plata",
          "San Crist\u00f3bal",
          "Santo Domingo Este",
          "Santiago",
          "La Vega",
          "Duarte",
          "Com. Dom. En Estados Unidos",
          "Peravia"
        ]
      ],
      "y_data": [
        [
          9.83,
          9.73,
          9.55,
          9.51,
          9.05,
          8.99,
          8.85,
          8.82,
          8.53,
          8.43,
          8.33
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List each donator name and the amount of endowment in descending order of the amount of endowment by a bar chart.",
      "List each donator name and the amount of endowment in descending order of the amount of endowment. Plot them as bar chart."
    ],
    "irrelevant_tables": [
      "School",
      "budget"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2705": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT County , sum(enrollment) FROM school GROUP BY county"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "pie",
      "x_name": "County",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "20 Elkhart",
          "46 LaPorte 71 St. Joseph",
          "50 Marshall",
          "71 St. Joseph",
          "75 Starke"
        ]
      ],
      "y_data": [
        [
          601,
          852,
          1098,
          984,
          620
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the proportion of the total enrollment in each county with a pie chart.",
      "Please give me a pie chart for the proportion of the total enrollment in each county.",
      "Compute the total sum enrollment across county as a pie chart."
    ],
    "irrelevant_tables": [
      "endowment",
      "budget"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2708": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT count(*) , sum(enrollment) FROM school GROUP BY county",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM school GROUP BY county"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "count(*)",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          1,
          1,
          3,
          2,
          1
        ]
      ],
      "y_data": [
        [
          601,
          852,
          1098,
          984,
          620
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the number of schools in each county and total enrollment in each county by a scatter plot.",
      "Plot the number of schools and total enrollment in each county with a scatter chart."
    ],
    "irrelevant_tables": [
      "budget",
      "endowment"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2709": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT count(*) , sum(enrollment) FROM school GROUP BY County",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM school GROUP BY County"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "count(*)",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          1
        ],
        [
          1
        ],
        [
          3
        ],
        [
          2
        ],
        [
          1
        ]
      ],
      "y_data": [
        [
          601
        ],
        [
          852
        ],
        [
          1098
        ],
        [
          984
        ],
        [
          620
        ]
      ],
      "classify": [
        "20 Elkhart",
        "46 LaPorte 71 St. Joseph",
        "50 Marshall",
        "71 St. Joseph",
        "75 Starke"
      ],
      "describe": "GROUP BY County",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the number of schools in each county and total enrollment in each county by a grouped scatter plot.",
      "Plot the number of schools and total enrollment in each county with a grouped scatter chart.",
      "Show count(*) vs total number of enrollment as scatter plot use a different color for each County"
    ],
    "irrelevant_tables": [
      "endowment",
      "budget"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "2724": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "school_player",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Denomination",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Anglican",
          "Catholic",
          "Uniting Church"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each denomination, return the denomination and the count of schools with that denomination. Visualize by bar chart.",
      "Create a bar chart showing the total number across denomination"
    ],
    "irrelevant_tables": [
      "school_details",
      "player"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2736": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Rank",
      "y_name": "count(*)",
      "x_data": [
        [
          "Commander, junior captain",
          "Lieutenant",
          "Midshipman"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a pie chart for how many captains with younger than 50 are in each rank?",
      "How many captains with younger than 50 are in each rank. Visualize by pie chart.",
      "Count the number of captains younger than 50 of each rank in a pie chart.",
      "Count the number of captains younger than 50 of each rank. Plot them as pie chart."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2743": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(age)",
      "y_name": "min(age)",
      "x_data": [
        [
          45,
          43,
          38,
          38,
          51.33333333333334
        ]
      ],
      "y_data": [
        [
          45,
          43,
          38,
          38,
          40
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show me a scatter plot for the relationship between average and minimum age of captains in each class."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2745": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT avg(age) , min(age) FROM captain GROUP BY Class",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "avg(age)",
      "y_name": "min(age)",
      "x_data": [
        [
          45
        ],
        [
          43
        ],
        [
          38
        ],
        [
          38
        ],
        [
          51.33333333333334
        ]
      ],
      "y_data": [
        [
          45
        ],
        [
          43
        ],
        [
          38
        ],
        [
          38
        ],
        [
          40
        ]
      ],
      "classify": [
        "Armed schooner",
        "Cutter",
        "Frigate",
        "Sloop-of-war",
        "Third-rate ship of the line"
      ],
      "describe": "GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "Show me a scatter plot for the relationship between average and minimum age of captains in each class, color different classes."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "2748": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "GL",
          "KR"
        ]
      ],
      "y_data": [
        [
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "For those ships that do not have a captain, tell me the proportion of their classes using a pie chart.",
      "Give me a pie chart showing the proportion of ships' classes that do not have a captain."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2749": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "GL",
          "KR"
        ]
      ],
      "y_data": [
        [
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "Give me a bar chart showing the total number of ships' classes that do not have a captain."
    ],
    "irrelevant_tables": [],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2750": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "Armed schooner",
          "Cutter",
          "Frigate",
          "Sloop-of-war",
          "Third-rate ship of the line"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          1,
          0,
          1
        ],
        [
          1,
          1,
          0,
          0,
          2
        ]
      ],
      "classify": [
        "Commander, junior captain",
        "Lieutenant",
        "Midshipman"
      ],
      "describe": "GROUP BY Rank, GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of captains in each rank and class? Let class as X-axis, and categorize by rank with a stacked bar chart.",
      "A stacked bar graph shows the total number of captains categorize by ranks of different classes."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "stacked_bar": true
      },
      {
        "channel_specified": [],
        "stacked_bar": true
      }
    ]
  },
  "2752": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "Armed schooner",
          "Cutter",
          "Frigate",
          "Sloop-of-war",
          "Third-rate ship of the line"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": null
    },
    "nl_queries": [
      "Show me a pie chart comparing the total number of captains in each class.",
      "Visualize the proportion of the total number of captains in each class using a pie chart.",
      "Compute the total how many class across class as a pie chart."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2757": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Type",
      "y_name": "COUNT(Type)",
      "x_data": [
        [
          "Battle ship",
          "Cargo ship"
        ]
      ],
      "y_data": [
        [
          3,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Type",
      "sort": null
    },
    "nl_queries": [
      "What is the total number of each ship type? Give me a pie chart.",
      "Show me a pie chart showing the total number of each ship type."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2759": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "United Kingdom",
          "United States"
        ]
      ],
      "y_data": [
        [
          5,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": null
    },
    "nl_queries": [
      "A pie chart showing the total number of each ship's nationality.",
      "What is the proportion of the nationality of all ships? Give me a pie chart.\n",
      "Create a pie chart showing the number of nationality across nationality."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2764": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Type",
      "y_name": "avg(Tonnage)",
      "x_data": [
        [
          "Battle ship",
          "Cargo ship"
        ]
      ],
      "y_data": [
        [
          4845,
          3932.2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different types of ships and the average tonnage of ships of each type in a pie chart.",
      "For each type, what is the average tonnage. Plot them as pie chart.",
      "Give me a pie to show the average of tonnage from different type."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2767": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT City , COUNT(City) FROM branch GROUP BY City",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT City , COUNT(City) FROM branch GROUP BY City"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "shop_membership",
    "vis_obj": {
      "chart": "pie",
      "x_name": "City",
      "y_name": "COUNT(City)",
      "x_data": [
        [
          "London",
          "Oxford"
        ]
      ],
      "y_data": [
        [
          5,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY City",
      "sort": null
    },
    "nl_queries": [
      "Show me the proportion of cities of the branch table with a pie chart."
    ],
    "irrelevant_tables": [
      "member",
      "purchase"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2775": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "singer",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Citizenship",
      "y_name": "max(Net_Worth_Millions)",
      "x_data": [
        [
          "Australia",
          "Chile",
          "France",
          "Germany",
          "United States"
        ]
      ],
      "y_data": [
        [
          17,
          17.4,
          30,
          14.3,
          28.8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different citizenships and the maximum net worth of singers of each citizenship by a pie chart.",
      "Visualize by pie chart about different citizenships and the maximum net worth of singers of each citizenship.",
      "For each citizenship, what is the maximum net worth. Show a pie chart."
    ],
    "irrelevant_tables": [
      "song"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2799": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT state , min(enr) FROM college GROUP BY state",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "pie",
      "x_name": "state",
      "y_name": "min(enr)",
      "x_data": [
        [
          "AZ",
          "FL",
          "LA",
          "OK"
        ]
      ],
      "y_data": [
        [
          12000,
          19000,
          18000,
          22000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A pie chart for the proportion of the smallest enrollment in each state.",
      "Give me a pie to show minimal enr from different state."
    ],
    "irrelevant_tables": [
      "Tryout",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2802": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cName",
      "y_name": "count(*)",
      "x_data": [
        [
          "ASU",
          "LSU",
          "FSU",
          "OU"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of students who participate in the tryout for each college ordered by descending count. Visualize by bar chart.",
      "Display a bar chart for how many students participated in tryouts for each college by descennding count?",
      "Return a bar chart on how many students participated in tryouts for each college by descennding count?",
      "How many students participated in tryouts for each college by descennding count. Visualize by bar chart."
    ],
    "irrelevant_tables": [
      "College",
      "Player"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2804": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Product_Name",
      "y_name": "COUNT(Product_Name)",
      "x_data": [
        [
          "Business Policy",
          "Business Policy B",
          "Dinning",
          "Men suits"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Product_Name",
      "sort": null
    },
    "nl_queries": [
      "List the names of products that are not in any event, and count them by a pie chart",
      "A pie chart for listing the number of the names of products that are not in any event."
    ],
    "irrelevant_tables": [
      "Parties_in_Events",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2806": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Product_Type_Code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Books",
          "Clothes",
          "Electronics",
          "Food"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          4,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different type codes of products and the number of products with each type code with a pie chart.",
      "Create a pie chart showing the total number across product type code."
    ],
    "irrelevant_tables": [
      "Assets",
      "Parties_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2807": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Type_Code",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Books",
          "Clothes",
          "Electronics",
          "Food"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          4,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different type codes of products and the number of products with each type code in a bar chart.",
      "Show different type codes of products and the number of products with each type code. Visualize by bar chart.",
      "Give me a bar chart for the total number of each product type code"
    ],
    "irrelevant_tables": [
      "Assets",
      "Channels"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2809": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Product_Type_Code",
      "y_name": "COUNT(Product_Type_Code)",
      "x_data": [
        [
          "Books",
          "Clothes",
          "Electronics",
          "Food"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          4,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Product_Type_Code",
      "sort": null
    },
    "nl_queries": [
      "A pie chart shows the proportion of different product type codes."
    ],
    "irrelevant_tables": [
      "Parties",
      "Parties_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2810": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Type_Code",
      "y_name": "COUNT(Product_Type_Code)",
      "x_data": [
        [
          "Books",
          "Clothes",
          "Electronics",
          "Food"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          4,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Product_Type_Code",
      "sort": null
    },
    "nl_queries": [
      "Visualize a bar chart for showing the total number of different product type codes.",
      "Bar chart x axis product type code y axis the number of product type code"
    ],
    "irrelevant_tables": [
      "Assets_in_Events",
      "Products_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2817": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Position",
      "y_name": "count(*)",
      "x_data": [
        [
          "Full Back",
          "Left Wing",
          "Loose Forward",
          "Prop",
          "Second Row"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show me the proportion on what is the number of players who have points less than 30 for each position by a pie chart?"
    ],
    "irrelevant_tables": [
      "competition",
      "club_rank"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2818": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Position",
      "y_name": "count(*)",
      "x_data": [
        [
          "Full Back",
          "Left Wing",
          "Loose Forward",
          "Prop",
          "Second Row"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What is the number of players who have points less than 30 for each position. Plot them as bar chart.",
      "Give me a histogram for what is the number of players who have points less than 30 for each position?"
    ],
    "irrelevant_tables": [
      "competition_result",
      "club"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2820": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Competition_type",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Friendly",
          "Tournament"
        ]
      ],
      "y_data": [
        [
          8,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "List the types of competition and the number of competitions of each type in a bar chart.",
      "List the types of competition and the number of competitions of each type. Visualize by bar chart.",
      "What are the types of competition and number of competitions for that type. Show bar chart.",
      "Plot the total number by grouped by competition type as a bar graph",
      "Give me a histogram for what are the types of competition and number of competitions for that type?",
      "Return a histogram on what are the types of competition and number of competitions for that type?"
    ],
    "irrelevant_tables": [
      "competition_result",
      "player"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2830": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "local_authority",
      "y_name": "COUNT(local_authority)",
      "x_data": [
        [
          "Brentwood",
          "Broxbourne",
          "Chiltern",
          "Three Rivers",
          "Thurrock",
          "Watford"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          3,
          3,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY local_authority",
      "sort": null
    },
    "nl_queries": [
      "Bar chart of how many local authority from each local authority"
    ],
    "irrelevant_tables": [
      "train",
      "weekly_weather"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2850": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "billing_country",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "USA",
          "Canada",
          "Brazil",
          "France",
          "Germany"
        ]
      ],
      "y_data": [
        [
          91,
          56,
          35,
          35,
          28
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "What are the top 5 countries by number of invoices and how many do they have. Plot them as bar chart.",
      "Return a histogram on what are the top 5 countries by number of invoices and how many do they have?"
    ],
    "irrelevant_tables": [
      "playlist_tracks",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2851": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "billing_country",
      "y_name": "AVG(total)",
      "x_data": [
        [
          "Chile",
          "Hungary",
          "Ireland",
          "Czech Republic",
          "Austria",
          "Finland",
          "Netherlands",
          "India",
          "USA",
          "Norway"
        ]
      ],
      "y_data": [
        [
          6.659999999999998,
          6.517142857142857,
          6.517142857142857,
          6.445714285714287,
          6.088571428571428,
          5.945714285714287,
          5.802857142857143,
          5.789230769230769,
          5.747912087912091,
          5.659999999999998
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size?"
    ],
    "irrelevant_tables": [
      "invoice_lines",
      "tracks"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2857": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "billing_country",
      "y_name": "SUM(total)",
      "x_data": [
        [
          "USA",
          "Canada",
          "France",
          "Brazil",
          "Germany",
          "United Kingdom",
          "Czech Republic",
          "Portugal"
        ]
      ],
      "y_data": [
        [
          523.0600000000003,
          303.95999999999987,
          195.09999999999997,
          190.1,
          156.48,
          112.86,
          90.24,
          77.23999999999998
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes?",
      "What are the names of the top 8 countries by total invoice size and what are those sizes. Plot them as bar chart.",
      "Give me a histogram for what are the names of the top 8 countries by total invoice size and what are those sizes?"
    ],
    "irrelevant_tables": [
      "customers",
      "playlist_tracks"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "2861": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Type",
      "y_name": "count(*)",
      "x_data": [
        [
          "City Mall",
          "Village Store"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each type of store, how many of them are there. Show a pie chart."
    ],
    "irrelevant_tables": [
      "product",
      "store_district"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2874": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Grade , count(*) FROM list GROUP BY grade",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Grade , count(*) FROM list GROUP BY grade"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "student_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Grade",
      "y_name": "count(*)",
      "x_data": [
        [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      ],
      "y_data": [
        [
          16,
          12,
          3,
          6,
          12,
          8,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Scatter plot to show grade on x axis and the total number on y axis."
    ],
    "irrelevant_tables": [
      "teachers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2881": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "student_assessment",
    "vis_obj": {
      "chart": "pie",
      "x_name": "course_name",
      "y_name": "COUNT(course_name)",
      "x_data": [
        [
          "English",
          "French",
          "data structure",
          "statistics",
          "database",
          "Art history"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY course_name",
      "sort": null
    },
    "nl_queries": [
      "Give me a pie chart show the proportion of the number of course names in the course table.",
      "Give me a pie to show how many course name from different course name."
    ],
    "irrelevant_tables": [
      "Candidates",
      "Student_Course_Attendance"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2900": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "student_transcripts_tracking",
    "vis_obj": {
      "chart": "bar",
      "x_name": "other_student_details",
      "y_name": "COUNT(other_student_details)",
      "x_data": [
        [
          "assumenda",
          "atque",
          "autem",
          "dolorum",
          "et",
          "facilis",
          "laborum",
          "nesciunt",
          "non",
          "omnis",
          "qui",
          "quia",
          "rerum",
          "voluptatem"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY other_student_details",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List all the student details in reversed lexicographical order, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Addresses",
      "Student_Enrolment_Courses"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2928": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "Australia",
          "Canada",
          "France",
          "Italy",
          "Poland",
          "Tunisia",
          "Ukraine"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": null
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of  Nationality and the amount of Nationality , and group by attribute Nationality.",
      "Return a bar chart about the distribution of  Nationality and the amount of Nationality , and group by attribute Nationality.",
      "Find  Nationality and the amount of Nationality , and group by attribute Nationality, and visualize them by a bar chart.",
      "Visualize a bar chart about the distribution of  Nationality and the amount of Nationality , and group by attribute Nationality.",
      "Bar chart x axis nationality y axis how many nationality"
    ],
    "irrelevant_tables": [
      "stadium",
      "record"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "2941": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM artist GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Fiji",
          "United States",
          "Zimbabwe"
        ]
      ],
      "y_data": [
        [
          1,
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": null
    },
    "nl_queries": [
      "Give me a bar chart about the number of countries in the artist table"
    ],
    "irrelevant_tables": [
      "exhibition",
      "exhibition_record"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2960": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "staff_details",
      "y_name": "COUNT(staff_details)",
      "x_data": [
        [
          "ab",
          "accusamus",
          "animi",
          "aspernatur",
          "consequatur",
          "dicta",
          "dolor",
          "doloribus",
          "est",
          "iure",
          "nulla",
          "quo",
          "sint",
          "voluptatibus"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY staff_details",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What details are there on the research staff? List the result in ascending alphabetical order, and count them by a bar chart",
      "List the research staff details, and order in ascending order, and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Documents",
      "Organisations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2962": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_from , COUNT(date_from) FROM Project_Staff",
        "binning": "BIN date_from BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_from",
      "y_name": "COUNT(date_from)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          4,
          0,
          2,
          1,
          2,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_from BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "When do all the researcher role staff start to work? Bin the time into weekday interval and count them with a bar chart."
    ],
    "irrelevant_tables": [
      "Research_Outcomes",
      "Tasks"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2963": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_to , COUNT(date_to) FROM Project_Staff",
        "binning": "BIN date_to BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "tracking_grants_for_research",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_to",
      "y_name": "COUNT(date_to)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          2,
          3,
          1,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_to BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "When do all the researcher role staff stop working? Bin the time into weekday interval and count them with a bar chart."
    ],
    "irrelevant_tables": [
      "Research_Staff",
      "Organisation_Types"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "2998": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
        "binning": "BIN date_of_transaction BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100 BIN date_of_transaction BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_transaction",
      "y_name": "COUNT(date_of_transaction)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          3,
          0,
          3,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_transaction BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "A bar chart for what are the number of the dates of transactions with at least 100 share count or amount bigger than 100? Bin date by weekday.",
      "What are the dates of transactions with at least 100 share count or amount bigger than 100, bin date by weekdat and count them by a bar chart"
    ],
    "irrelevant_tables": [
      "Lots",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "3004": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "pie",
      "x_name": "transaction_type_code",
      "y_name": "avg(amount_of_transaction)",
      "x_data": [
        [
          "PUR",
          "SALE"
        ]
      ],
      "y_data": [
        [
          25945880.3716125,
          11198167.237771427
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the average transaction amount for different transaction types with a pie chart.",
      "Show the average transaction amount for different transaction types. Visualize by pie chart.",
      "Compute the total the average of amount of transaction across transaction type code as a pie chart."
    ],
    "irrelevant_tables": [
      "Sales",
      "Purchases"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3009": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS",
        "binning": "BIN date_of_transaction BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_transaction",
      "y_name": "SUM(share_count)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Wed",
          "Thur",
          "Fri",
          "Sat",
          "Sun"
        ]
      ],
      "y_data": [
        [
          674529892,
          96529,
          1663726,
          0,
          9357173,
          0,
          97709
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_transaction BY WEEKDAY",
      "sort": null
    },
    "nl_queries": [
      "Bin all date of transactions into the weekday interval, and sum the share count of each bin. Return the result using a bar chart."
    ],
    "irrelevant_tables": [
      "Sales",
      "Ref_Transaction_Types"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "3046": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "AVG(Number_of_Platforms)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          13,
          17,
          14
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": null
    },
    "nl_queries": [
      "Give me a bar chart about the average of number_of_platforms in different locations.",
      "What is the average of number_of_platforms for each location? Show the comparison with a bar chart.",
      "Bar chart x axis location y axis the average of number of platforms"
    ],
    "irrelevant_tables": [
      "train",
      "train_station"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3047": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM station GROUP BY Location"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          10
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": null
    },
    "nl_queries": [
      "How many different locations? Show the proportion with a pie chart.",
      "Give me a pie chart about the proportion of the different locations."
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3051": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Location",
      "y_name": "sum(number_of_platforms)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          13,
          17,
          140
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all locations and the total number of platforms for all train stations in each location in a pie chart.",
      "Show the proportion of the total number of platforms of locations in each location in a pie chart.",
      "Give me a pie to show total number of number of platforms from different location."
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3054": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Location",
      "y_name": "sum(total_passengers)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          36.330999999999996,
          29.658,
          498.50700000000006
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the proportion of the total number of passengers in each location with a pie chart.",
      "Give me a pie about the proportion of each location's total number of passengers."
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3056": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "sum(number_of_platforms)",
      "y_name": "sum(total_passengers)",
      "x_data": [
        [
          13
        ],
        [
          17
        ],
        [
          140
        ]
      ],
      "y_data": [
        [
          36.331
        ],
        [
          29.658
        ],
        [
          498.50700000000006
        ]
      ],
      "classify": [
        "Birmingham",
        "Glasgow",
        "London"
      ],
      "describe": "GROUP BY Location",
      "sort": null
    },
    "nl_queries": [
      "Draw a scatterplot of sum(number of platforms) vs total number of total passengers where sum(number of platforms) is on the x-axis and points are colored by Location"
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "3067": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , followers FROM user_profiles ORDER BY followers DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "twitter_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "followers",
      "x_data": [
        [
          "Tyler Swift",
          "Natalie Portman",
          "Black Widow\n",
          "Celine Dion",
          "Iron Man",
          "Mary",
          "Susan"
        ]
      ],
      "y_data": [
        [
          99999998,
          94375428,
          35425845,
          23927492,
          6662425,
          890,
          100
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the name and number of followers for each user, and sort the results by the number of followers in descending order with a bar chart."
    ],
    "irrelevant_tables": [
      "follows",
      "tweets"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3070": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Affiliation",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "Private/Methodist",
          "Public"
        ]
      ],
      "y_data": [
        [
          2100,
          119027
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Display a pie chart for what are the total enrollments of universities of each affiliation type?",
      "Visualize a pie chart with what are the total enrollments of universities of each affiliation type?",
      "What are the total enrollments of universities of each affiliation type. Plot them as pie chart.",
      "Compute the total total number of enrollment across affiliation as a pie chart."
    ],
    "irrelevant_tables": [
      "basketball_match"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3079": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.563,
          0.625
        ],
        [
          0.813
        ],
        [
          0.875
        ]
      ],
      "y_data": [
        [
          0.6,
          0.706
        ],
        [
          0.8240000000000001
        ],
        [
          0.946
        ]
      ],
      "classify": [
        "3-5",
        "6-2",
        "8-0"
      ],
      "describe": "GROUP BY ACC_Road",
      "sort": null
    },
    "nl_queries": [
      "Visualize a grouped scatter chart about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute ACC_Road.",
      "Draw a scatterplot of acc percent vs all_games_percent where acc percent is on the x-axis and points are colored by ACC_Road"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3085": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.875,
          0.563
        ],
        [
          0.625,
          0.813
        ]
      ],
      "y_data": [
        [
          0.946,
          0.6
        ],
        [
          0.706,
          0.8240000000000001
        ]
      ],
      "classify": [
        "6-2",
        "7-1"
      ],
      "describe": "GROUP BY ACC_Home",
      "sort": null
    },
    "nl_queries": [
      "A scatter chart shows the correlation between  ACC_Percent and  All_Games_Percent , and colored by attribute ACC_Home.",
      "Show the relation between acc percent and all_games_percent for each ACC_Home using a grouped scatter chart"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      },
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3097": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.625,
          0.875
        ],
        [
          0.563
        ],
        [
          0.813
        ]
      ],
      "y_data": [
        [
          0.706,
          0.946
        ],
        [
          0.6
        ],
        [
          0.8240000000000001
        ]
      ],
      "classify": [
        "14-2",
        "14-3",
        "15-1"
      ],
      "describe": "GROUP BY All_Home",
      "sort": null
    },
    "nl_queries": [
      "Scatterplot of all_games_percent vs acc percent colored by All_Home"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3121": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.875,
          0.813,
          0.625,
          0.563
        ]
      ],
      "y_data": [
        [
          0.946,
          0.8240000000000001,
          0.706,
          0.6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Return a scatter chart about the correlation between  ACC_Percent and  All_Games_Percent .",
      "A scatter chart shows the correlation between  ACC_Percent and  All_Games_Percent .",
      "Show me about the correlation between  ACC_Percent and  All_Games_Percent  in a scatter chart.",
      "Scatter plot to show acc percent on x axis and all_games_percent on y axis."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3139": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "pie",
      "x_name": "All_Games",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          "35-2",
          "28-6",
          "24-10",
          "21-14"
        ]
      ],
      "y_data": [
        [
          0.946,
          0.8240000000000001,
          0.706,
          0.6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Create a pie chart showing all_games_percent across all games."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3150": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "pie",
      "x_name": "ACC_Regular_Season",
      "y_name": "ACC_Percent",
      "x_data": [
        [
          "14-2",
          "13-3",
          "10-6",
          "9-7"
        ]
      ],
      "y_data": [
        [
          0.875,
          0.813,
          0.625,
          0.563
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For the attribute  ACC_Regular_Season and  ACC_Percent, show their proportion by a pie chart.",
      "Create a pie chart showing acc_percent across acc regular season."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3165": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.625
        ],
        [
          0.813
        ],
        [
          0.875
        ],
        [
          0.563
        ]
      ],
      "y_data": [
        [
          0.706
        ],
        [
          0.8240000000000001
        ],
        [
          0.946
        ],
        [
          0.6
        ]
      ],
      "classify": [
        "Clemson",
        "Duke",
        "North Carolina",
        "Virginia Tech"
      ],
      "describe": "GROUP BY Team_Name",
      "sort": null
    },
    "nl_queries": [
      "Scatterplot of all_games_percent vs acc percent colored by Team_Name"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3171": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.625
        ],
        [
          0.813
        ],
        [
          0.875
        ],
        [
          0.563
        ]
      ],
      "y_data": [
        [
          0.706
        ],
        [
          0.8240000000000001
        ],
        [
          0.946
        ],
        [
          0.6
        ]
      ],
      "classify": [
        "10-6",
        "13-3",
        "14-2",
        "9-7"
      ],
      "describe": "GROUP BY ACC_Regular_Season",
      "sort": null
    },
    "nl_queries": [
      "A scatter chart shows the correlation between  ACC_Percent and  All_Games_Percent , and colored by attribute ACC_Regular_Season."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3177": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Games",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Games"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "ACC_Percent",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          0.563
        ],
        [
          0.625
        ],
        [
          0.813
        ],
        [
          0.875
        ]
      ],
      "y_data": [
        [
          0.6
        ],
        [
          0.706
        ],
        [
          0.8240000000000001
        ],
        [
          0.946
        ]
      ],
      "classify": [
        "21-14",
        "24-10",
        "28-6",
        "35-2"
      ],
      "describe": "GROUP BY All_Games",
      "sort": null
    },
    "nl_queries": [
      "Return a grouped scatter chart about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute All_Games."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3198": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT state , COUNT(state) FROM votes GROUP BY state",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT state , COUNT(state) FROM votes GROUP BY state"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "voter_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "state",
      "y_name": "COUNT(state)",
      "x_data": [
        [
          "CA",
          "NJ",
          "NY"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY state",
      "sort": null
    },
    "nl_queries": [
      "List the states of all votes, compute the total number of states, and show the proportion with a pie chart."
    ],
    "irrelevant_tables": [
      "CONTESTANTS",
      "AREA_CODE_STATE"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3207": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Age",
      "x_data": [
        [
          "Graeme McDowell",
          "Adam Scott"
        ]
      ],
      "y_data": [
        [
          34,
          26
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the name and age for all male people who don't have a wedding by a bar chart.",
      "Show the name and age for all male people who don't have a wedding. Visualize by bar chart."
    ],
    "irrelevant_tables": [
      "church"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "3213": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Australia",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": null
    },
    "nl_queries": [
      "A pie chart about the proportion of the number of countries for all people whose age is smaller than the average."
    ],
    "irrelevant_tables": [
      "wedding",
      "church"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3215": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Country , count(*) FROM people GROUP BY country",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Country , count(*) FROM people GROUP BY country"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Country",
      "y_name": "count(*)",
      "x_data": [
        [
          "Australia",
          "Canada",
          "Northern Ireland",
          "Sweden",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show all countries and the number of people from each country in a pie chart.",
      "Give me a pie to show the total number from different country."
    ],
    "irrelevant_tables": [
      "church",
      "wedding"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3222": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Appelation , COUNT(Appelation) FROM WINE WHERE Score > 93 GROUP BY Appelation ORDER BY Name",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Appelation , COUNT(Appelation) FROM WINE WHERE Score > 93 GROUP BY Appelation ORDER BY Name"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Appelation",
      "y_name": "COUNT(Appelation)",
      "x_data": [
        [
          "Amador County",
          "Anderson Valley",
          "Bennett Valley",
          "Carneros",
          "Chalk Hill",
          "Dry Creek Valley",
          "Napa Valley",
          "Paso Robles",
          "Russian River Valley",
          "Rutherford",
          "Santa Lucia Highlands",
          "Santa Maria Valley",
          "Sonoma Coast",
          "Sonoma County",
          "Sonoma Valley",
          "St. Helena",
          "Sta. Rita Hills"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          14,
          2,
          11,
          1,
          6,
          1,
          5,
          6,
          2,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Appelation",
      "sort": null
    },
    "nl_queries": [
      "A bar chart shows the number of appellations whose score is higher than 93, and ordered by Name."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "3227": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "COUNT(Year)",
      "x_data": [
        [
          "2006",
          "2007",
          "2008"
        ]
      ],
      "y_data": [
        [
          4,
          11,
          2
        ],
        [
          1,
          1,
          0
        ],
        [
          1,
          1,
          0
        ]
      ],
      "classify": [
        "Cabernet Sauvingnon",
        "Grenache",
        "Syrah"
      ],
      "describe": "GROUP BY Grape, GROUP BY Year",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those wines whose price is bigger than 100, group by grape, count their total number of each year and sort by year in asc in a bar chart."
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "sort_by": "field",
        "stacked_bar": true
      }
    ]
  },
  "3229": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "COUNT(Year)",
      "x_data": [
        [
          "2006",
          "2007",
          "2008"
        ]
      ],
      "y_data": [
        [
          6,
          13,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Year",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart listing the number of wines whose price is bigger than 100 ordered by year.",
      "What is the number of wines with price higher than 100, sorted by year? Visualize them by a bar chart.",
      "A bar chart for how many wines whose price is bigger than 100 ordered by year."
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3230": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "COUNT(Year)",
      "x_data": [
        [
          "2006",
          "2007",
          "2008"
        ]
      ],
      "y_data": [
        [
          6,
          13,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN Year BY TIME",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those wines with a price is bigger than 100, count then and group by year, order by year in asc. Visualize the result with a bar chart.",
      "A bar chart showing the number of those wines with a price is bigger than 100 and order by year in asc."
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3240": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "avg(Price)",
      "x_data": [
        [
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2066"
        ]
      ],
      "y_data": [
        [
          60.714285714285715,
          52.82142857142857,
          52.941176470588225,
          49.41847826086956,
          39.70769230769231,
          30.953846153846154,
          32
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Plot year by mean price as a line chart"
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3259": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Venue",
      "y_name": "COUNT(Venue)",
      "x_data": [
        [
          "Istanbul Turkey",
          "London UK",
          "New Jersey USA",
          "New York USA"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Venue",
      "sort": null
    },
    "nl_queries": [
      "A pie chart shows the venue for each workshop.",
      "Return the number of venues of each workshop in a pie chart."
    ],
    "irrelevant_tables": [
      "Acceptance",
      "submission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3260": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "COUNT(Venue)",
      "x_data": [
        [
          "Istanbul Turkey",
          "London UK",
          "New Jersey USA",
          "New York USA"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Venue",
      "sort": null
    },
    "nl_queries": [
      "Return the number of venues of each workshop in a bar chart.",
      "Draw a bar chart that counts the number of venues of each workshop."
    ],
    "irrelevant_tables": [
      "submission",
      "Acceptance"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "3262": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Author",
      "y_name": "COUNT(Author)",
      "x_data": [
        [
          "Andy Bolton",
          "Don Bitterlich",
          "Jeff Lloyd",
          "Randy Johnson",
          "Rick Engles",
          "Sammy Green",
          "Sherman Smith",
          "Steve Myer",
          "Steve Niehaus",
          "Steve Raible"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Author",
      "sort": null
    },
    "nl_queries": [
      "Show the authors of their total submissions with a pie chart.",
      "Visualize a pie chart for how many authors submit to the workshop."
    ],
    "irrelevant_tables": [
      "Acceptance",
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3263": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Author",
      "y_name": "COUNT(Author)",
      "x_data": [
        [
          "Andy Bolton",
          "Don Bitterlich",
          "Jeff Lloyd",
          "Randy Johnson",
          "Rick Engles",
          "Sammy Green",
          "Sherman Smith",
          "Steve Myer",
          "Steve Niehaus",
          "Steve Raible"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Author",
      "sort": null
    },
    "nl_queries": [
      "Show the authors of their total submissions with a bar chart.",
      "Visualize a bar chart for how many authors submit to the workshop.",
      "Create a bar chart showing the number of author across author"
    ],
    "irrelevant_tables": [
      "Acceptance",
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "3264": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Result",
      "y_name": "COUNT(Result)",
      "x_data": [
        [
          "Accepted",
          "Rejected"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Result",
      "sort": null
    },
    "nl_queries": [
      "Compute the proportion of acceptance result, and return a pie chart.",
      "Draw a pie chart to show the proportion of acceptance result."
    ],
    "irrelevant_tables": [
      "submission",
      "workshop"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3268": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Continent",
      "y_name": "avg(LifeExpectancy)",
      "x_data": [
        [
          "Africa",
          "Asia",
          "Oceania",
          "South America"
        ]
      ],
      "y_data": [
        [
          52.57192982456139,
          67.44117647058825,
          69.715,
          70.94615384615386
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A pie chart shows the average life expectancy for each continent where the average life expectancy is shorter than 72.",
      "For continents that have an average life expectancy less than 72, shows their average life expectancy with a pie chart."
    ],
    "irrelevant_tables": [
      "countrylanguage",
      "city"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3270": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "sum(Population)",
      "y_name": "avg(LifeExpectancy)",
      "x_data": [
        [
          784475000,
          3705025700,
          30401150,
          345780000
        ]
      ],
      "y_data": [
        [
          52.57192982456139,
          67.44117647058825,
          69.715,
          70.94615384615386
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each continent where the average life expectancy is shorter than 72, shows the correlation between average life expectancy and total population with a scatter plot."
    ],
    "irrelevant_tables": [
      "sqlite_sequence",
      "countrylanguage"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "3271": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
    },
    "chart": "Pie",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Continent",
      "y_name": "sum(Population)",
      "x_data": [
        [
          "Africa",
          "Asia",
          "Oceania",
          "South America"
        ]
      ],
      "y_data": [
        [
          784475000,
          3705025700,
          30401150,
          345780000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For each continent where the average life expectancy is shorter than 72, shows the proportion of their total population with a pie chart.",
      "A pie chart shows the proportion of the total population of continents that have an average life expectancy of less than 72."
    ],
    "irrelevant_tables": [
      "city",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3272": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "sum(Population)",
      "y_name": "avg(LifeExpectancy)",
      "x_data": [
        [
          784475000
        ],
        [
          3705025700
        ],
        [
          730074600
        ],
        [
          482993000
        ],
        [
          30401150
        ],
        [
          345780000
        ]
      ],
      "y_data": [
        [
          52.57192982456139
        ],
        [
          67.44117647058825
        ],
        [
          75.14772727272728
        ],
        [
          72.99189189189188
        ],
        [
          69.715
        ],
        [
          70.94615384615386
        ]
      ],
      "classify": [
        "Africa",
        "Asia",
        "Europe",
        "North America",
        "Oceania",
        "South America"
      ],
      "describe": "GROUP BY Continent",
      "sort": null
    },
    "nl_queries": [
      "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent"
    ],
    "irrelevant_tables": [
      "countrylanguage",
      "city"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "3278": {
    "vis_query": {
      "vis_part": "Visualize PIE",
      "data_part": {
        "sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team",
        "binning": ""
      },
      "VQL": "Visualize PIE SELECT Team , COUNT(*) FROM elimination GROUP BY Team"
    },
    "chart": "Pie",
    "hardness": "Easy",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "pie",
      "x_name": "Team",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Team Batista",
          "Team Orton"
        ]
      ],
      "y_data": [
        [
          4,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show different teams in eliminations and the number of eliminations from each team by a pie chart.",
      "Pie chart about how many eliminations did each team have?",
      "How many eliminations did each team have. Plot them as pie chart.",
      "A pie chart about the proportion of the total number for each team."
    ],
    "irrelevant_tables": [
      "wrestler"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      },
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "3291": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year , count(year) FROM matches",
        "binning": "BIN year BY YEAR"
      },
      "VQL": "Visualize BAR SELECT year , count(year) FROM matches BIN year BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wta_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "count(year)",
      "x_data": [
        [
          "2013",
          "2014",
          "2015",
          "2016",
          "2017"
        ]
      ],
      "y_data": [
        [
          12,
          0,
          0,
          158,
          108
        ]
      ],
      "classify": [],
      "describe": "BIN year BY YEAR",
      "sort": null
    },
    "nl_queries": [
      "Bar graph to show the count year from different year, and bin the year into YEAR interval"
    ],
    "irrelevant_tables": [
      "rankings"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "372@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "browser_web",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Operating_system",
      "y_name": "count(*)",
      "x_data": [
        [
          "Windows, Mac",
          "Windows",
          "Unix (Linux, *BSD, Mac OS X, others), Windows",
          "Windows, except NT and 95",
          "Windows, Mac, Mobile devices",
          "Windows, Mac, Linux and Mobile devices",
          "Windows, Mac and Mobile devices",
          "Windows, Linux, Mac OS, Symbian, WindowsMobile",
          "Windows (2000 onwards)",
          "Unix (Linux, *BSD, Mac OS X, others)",
          "Appliance (Linux)",
          "Any system with Java 1.6 VM available",
          "Any",
          "Android, Linux, Mac and Windows devices"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of operating system versus the total number, and list by the Y in desc please."
    ],
    "irrelevant_tables": [
      "accelerator_compatible_browser",
      "browser"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2450@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "musical",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nominee",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Cleavant Derricks",
          "Bob Fosse"
        ]
      ],
      "y_data": [
        [
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many musicals has each nominee been nominated for Plot them as bar chart, I want to order by the X in desc.",
      "Show different nominees and the number of musicals they have been nominated in a bar chart, I want to order by the X in desc.",
      "Return a bar chart on how many musicals has each nominee been nominated for, and I want to show by the x-axis in descending.",
      "Bar chart x axis nominee y axis the total number, I want to show by the x-axis in descending.",
      "Give me a histogram for how many musicals has each nominee been nominated for, show in desc by the X."
    ],
    "irrelevant_tables": [
      "actor"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1384@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "farm",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Status",
      "y_name": "avg(Population)",
      "x_data": [
        [
          "Village",
          "Town"
        ]
      ],
      "y_data": [
        [
          1009.75,
          5706
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the statuses and average populations of each city Plot them as bar chart, and list by the y-axis in asc.",
      "A bar chart about what are the statuses and average populations of each city?, I want to sort by the the average of population in ascending."
    ],
    "irrelevant_tables": [
      "farm_competition",
      "farm"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3204@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "voter_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "COUNT(state)",
      "x_data": [
        [
          "NY",
          "NJ\n",
          "CA"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY state",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart x axis state y axis the number of state, and sort by the how many state in descending.",
      "What is the number of distinct states? Show me a bar chart, I want to list by the Y-axis in descending please.",
      "Group by distinct states and them count them in a bar chart, and I want to list by the Y-axis in descending please."
    ],
    "irrelevant_tables": [
      "AREA_CODE_STATE",
      "CONTESTANTS"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1484@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC"
    },
    "chart": "Grouping Line",
    "hardness": "Hard",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "line",
      "x_name": "Season",
      "y_name": "COUNT(Season)",
      "x_data": [
        [
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          2,
          1,
          1,
          2,
          1
        ],
        [
          1,
          2,
          1,
          1,
          1,
          3,
          1
        ],
        [
          2,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [
        "Bunyodkor",
        "Pakhtakor",
        "Quruvchi"
      ],
      "describe": "GROUP BY Away_team, GROUP BY Season",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the number of games in each season and group by away team in a group line chart, and order in asc by the X-axis please."
    ],
    "irrelevant_tables": [
      "injury_accident",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1487@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Away_team",
      "y_name": "COUNT(Away_team)",
      "x_data": [
        [
          "Quruvchi",
          "Bunyodkor",
          "Pakhtakor"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          9
        ],
        [
          3,
          7,
          0
        ],
        [
          0,
          0,
          1
        ]
      ],
      "classify": [
        "Bunyodkor",
        "Pakhtakor",
        "Quruvchi"
      ],
      "describe": "GROUP BY Home_team, GROUP BY Away_team",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Stacked bar chart of how many away team for with each Home_team in each away team, rank from low to high by the y-axis.",
      "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team, could you display from low to high by the Y?"
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "y"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      },
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "1488@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Home_team",
      "y_name": "COUNT(Home_team)",
      "x_data": [
        [
          "Quruvchi",
          "Pakhtakor",
          "Bunyodkor"
        ]
      ],
      "y_data": [
        [
          0,
          7,
          0
        ],
        [
          1,
          0,
          9
        ],
        [
          0,
          3,
          0
        ]
      ],
      "classify": [
        "Bunyodkor",
        "Pakhtakor",
        "Quruvchi"
      ],
      "describe": "GROUP BY Away_team, GROUP BY Home_team",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team, and I want to list x-axis in descending order."
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "1491@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Home_team",
      "y_name": "COUNT(Home_team)",
      "x_data": [
        [
          "Pakhtakor",
          "Bunyodkor",
          "Quruvchi"
        ]
      ],
      "y_data": [
        [
          10,
          9,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Home_team",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of games for each home team in a bar chart, sort by the y-axis in desc please.",
      "Show me how many home team by home team in a histogram, I want to sort by the y axis from high to low."
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1493@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Away_team",
      "y_name": "COUNT(Away_team)",
      "x_data": [
        [
          "Quruvchi",
          "Bunyodkor",
          "Pakhtakor"
        ]
      ],
      "y_data": [
        [
          3,
          7,
          10
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Away_team",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis away team y axis the number of away team, and list from low to high by the the number of away team please.",
      "Show the number of games for each away team in a bar chart, and I want to sort by the the number of away team from low to high."
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1494@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "line",
      "x_name": "Season",
      "y_name": "COUNT(Season)",
      "x_data": [
        [
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          3,
          2,
          2,
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Season",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the number of games in each season with a line chart, show by the X-axis in ascending."
    ],
    "irrelevant_tables": [
      "injury_accident",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1495@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC",
        "binning": "BIN Season BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "game_injury",
    "vis_obj": {
      "chart": "line",
      "x_name": "Season",
      "y_name": "COUNT(Season)",
      "x_data": [
        [
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          3,
          2,
          2,
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN Season BY YEAR",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Plot season by how many season as a line chart, and could you sort by the x-axis in ascending?",
      "List the number of games in each season with a line chart, and could you sort in ascending by the x-axis?",
      "List the number of games in each season with a line chart, and show x-axis in ascending order."
    ],
    "irrelevant_tables": [
      "stadium",
      "injury_accident"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2308@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufacturer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Num_of_Component",
      "x_data": [
        [
          "Billiard table",
          "Dining set"
        ]
      ],
      "y_data": [
        [
          14,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components, sort from high to low by the total number please."
    ],
    "irrelevant_tables": [
      "manufacturer",
      "furniture_manufacte"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2831@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "services",
      "y_name": "COUNT(services)",
      "x_data": [
        [
          "c2c",
          "Metropolitan line and Chiltern Railways",
          "Metropolitan line",
          "London Overground and London Midland",
          "London Overground",
          "Greater Anglia"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          2,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY services",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for the number of services of each services, and could you display x-axis in desc order?",
      "Compare the number of services by services with a bar graph, and could you display x-axis in desc order?",
      "A bar graph listing the services and how many services provided by all stations, list in desc by the x axis."
    ],
    "irrelevant_tables": [
      "route",
      "weekly_weather"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2834@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "services",
      "y_name": "COUNT(services)",
      "x_data": [
        [
          "c2c",
          "Metropolitan line and Chiltern Railways",
          "Metropolitan line",
          "London Overground and London Midland",
          "London Overground",
          "Greater Anglia"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          2,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY services",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of services versus the number of services, could you display by the names in desc?"
    ],
    "irrelevant_tables": [
      "route",
      "weekly_weather"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2838@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "COUNT(name)",
      "x_data": [
        [
          "Ananthapuri Express",
          "Guruvayur Express",
          "Island Express",
          "Jayanthi Janatha Express",
          "Madurai Fast Passenger",
          "Parasuram Express",
          "Quilon Fast Passenger"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          2,
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of train names in a bar chart, and sort in ascending by the x-axis.",
      "Plot how many name by grouped by name as a bar graph, order in ascending by the x-axis."
    ],
    "irrelevant_tables": [
      "route",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2841@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY avg(high_temperature) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY avg(high_temperature) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "day_of_week",
      "y_name": "avg(high_temperature)",
      "x_data": [
        [
          "Sunday",
          "Friday",
          "Saturday",
          "Monday",
          "Thursday",
          "Tuesday",
          "Wednesday"
        ]
      ],
      "y_data": [
        [
          54,
          55,
          55,
          56,
          57,
          58,
          58
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show the average of high temperature from different day of week, and could you show y axis in ascending order?",
      "What is the average high temperature for each day of week Plot them as bar chart, I want to sort in ascending by the Y-axis."
    ],
    "irrelevant_tables": [
      "train",
      "route"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2844@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT origin , count(*) FROM train GROUP BY origin ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT origin , count(*) FROM train GROUP BY origin ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "station_weather",
    "vis_obj": {
      "chart": "bar",
      "x_name": "origin",
      "y_name": "count(*)",
      "x_data": [
        [
          "Kanniyakumari",
          "Chennai",
          "Trivandrum",
          "Quilon",
          "Nagercoil",
          "Mumbai",
          "Madurai",
          "Guruvayur",
          "Bangalore"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of trains starting from each origin Plot them as bar chart, I want to rank in descending by the the total number .",
      "Show me the total number by origin in a histogram, and I want to list by the Y-axis in descending."
    ],
    "irrelevant_tables": [
      "station",
      "weekly_weather"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2544@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "perpetrator",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "India",
          "Japan",
          "South Korea",
          "China"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there, and list from low to high by the Y-axis.",
      "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there Plot them as bar chart, and could you sort total number in ascending order please?",
      "Return a bar chart on what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there, I want to order y-axis in ascending order."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2868@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "storm_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Number_Deaths",
      "x_data": [
        [
          "Six",
          "Five",
          "Four",
          "Two",
          "Three",
          "9 cyclones"
        ]
      ],
      "y_data": [
        [
          2,
          3,
          7,
          7,
          52,
          71
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For all storms with at least 1 death, compare the number of deaths by name with a bar graph, order from low to high by the Y-axis.",
      "For all storms with at least 1 death, show me the name and the total number of deaths with a bar chart, sort in asc by the y axis please."
    ],
    "irrelevant_tables": [
      "region",
      "affected_region"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2869@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "storm_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Dates_active",
      "y_name": "Number_Deaths",
      "x_data": [
        [
          "May19 -October26",
          "August5-August14",
          "August3-August10",
          "August26-September2",
          "September7-September17",
          "September18-September25"
        ]
      ],
      "y_data": [
        [
          71,
          52,
          7,
          7,
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For all storms with at least 1 death, compare the number of deaths by dates active with a bar graph, show y axis in descending order.",
      "For all storms with at least 1 death, show me the dates active and the total number of deaths with a bar chart, and rank by the total number in desc."
    ],
    "irrelevant_tables": [
      "affected_region",
      "region"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1407@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "destination",
      "y_name": "COUNT(destination)",
      "x_data": [
        [
          "Honolulu",
          "Washington D.C.",
          "Tokyo",
          "Sydney",
          "New York",
          "Los Angeles",
          "Dallas",
          "Chicago",
          "Boston"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY destination",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many flights in each destination city? Return a bar chart, and list in descending by the y axis please.",
      "Show the number of flights in each destination city with a bar chart, I want to order in desc by the Y.",
      "Can you give a histogram to compare the number of flights to each destination city?, order by the the number of destination in descending.",
      "Show me how many destination by destination in a histogram, and order y-axis in desc order."
    ],
    "irrelevant_tables": [
      "aircraft",
      "certificate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1413@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "destination",
      "y_name": "COUNT(destination)",
      "x_data": [
        [
          "Tokyo",
          "Honolulu"
        ]
      ],
      "y_data": [
        [
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY destination",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many flights with price higher than 300 for each destination city? Return a bar chart, and order in ascending by the total number.",
      "A bar chart showing the number of flights with price higher than 300 for each destination city, order in asc by the total number."
    ],
    "irrelevant_tables": [
      "certificate",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1414@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , distance FROM Aircraft ORDER BY distance DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "flight_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "distance",
      "x_data": [
        [
          "Boeing 747-400",
          "Airbus A340-300",
          "Lockheed L1011",
          "Boeing 767-400ER",
          "Boeing 777-300",
          "Tupolev 154",
          "Boeing 757-300",
          "Boeing 737-800",
          "Airbus A320",
          "SAAB 340",
          "Airbus A319",
          "Embraer ERJ-145",
          "Boeing 727",
          "British Aerospace Jetstream 41",
          "Piper Archer III",
          "Schwitzer 2-33"
        ]
      ],
      "y_data": [
        [
          8430,
          7120,
          6900,
          6475,
          6441,
          4103,
          4010,
          3383,
          2605,
          2128,
          1805,
          1530,
          1504,
          1502,
          520,
          30
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show name and distance for all aircrafts Visualize by bar chart, could you rank from high to low by the y-axis?",
      "What are the names and distances for all airplanes Visualize by bar chart, could you rank from high to low by the y-axis?"
    ],
    "irrelevant_tables": [
      "flight",
      "employee"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2175@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarter",
      "y_name": "max(revenue)",
      "x_data": [
        [
          "Paris",
          "Los Angeles",
          "Austin",
          "Tokyo",
          "Taiwan",
          "Beijing"
        ]
      ],
      "y_data": [
        [
          30,
          50,
          100,
          120,
          130,
          200
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Create a bar chart showing maximal revenue across headquarter, and rank Y-axis from low to high order."
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2177@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "CD drive",
          "DVD burner",
          "DVD drive",
          "Floppy disk",
          "Hard drive",
          "Memory",
          "Monitor",
          "Printer",
          "Toner cartridge",
          "ZIP drive"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Count the names of all the products in the store and return me a bar chart, could you order Name in asc order?",
      "Give me a bar chart for how many name of each product, and order by the names in ascending."
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2178@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "SUM(Price)",
      "x_data": [
        [
          "ZIP drive",
          "Toner cartridge",
          "Printer",
          "Monitor",
          "Memory",
          "Hard drive",
          "Floppy disk",
          "DVD drive",
          "DVD burner",
          "CD drive"
        ]
      ],
      "y_data": [
        [
          150,
          66,
          270,
          240,
          120,
          240,
          5,
          330,
          180,
          90
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for sum price of each product name, I want to display by the x-axis in desc."
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2179@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "AVG(Price)",
      "x_data": [
        [
          "Printer",
          "Monitor",
          "Hard drive",
          "DVD burner",
          "DVD drive",
          "ZIP drive",
          "Memory",
          "CD drive",
          "Toner cartridge",
          "Floppy disk"
        ]
      ],
      "y_data": [
        [
          270,
          240,
          240,
          180,
          165,
          150,
          120,
          90,
          66,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart of mean price from each product name, and order mean price in descending order.",
      "Return a bar chart on what are the names and prices of all products in the store?, could you rank by the mean price in descending please?"
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2191@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Price",
      "x_data": [
        [
          "Toner cartridge",
          "Memory",
          "CD drive"
        ]
      ],
      "y_data": [
        [
          66,
          120,
          90
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For those products with a price between 60 and 120, give me the comparison about price over the name by a bar chart, could you list by the Name in descending?",
      "For those products with a price between 60 and 120, find name and price , and visualize them by a bar chart, and could you rank in desc by the Name?",
      "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and price , show by the x-axis in descending."
    ],
    "irrelevant_tables": [
      "Manufacturers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2201@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "manufactory_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Founder",
      "y_name": "sum(revenue)",
      "x_data": [
        [
          "Robert",
          "Owen",
          "Mary",
          "John",
          "James",
          "Andy"
        ]
      ],
      "y_data": [
        [
          30,
          100,
          200,
          130,
          50,
          120
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the total revenue of companies of each founder Visualize by bar chart, and show x axis in desc order.",
      "What is the total revenue of companies started by founder Plot them as bar chart, order by the X-axis in desc."
    ],
    "irrelevant_tables": [
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "894@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) DESC",
        "binning": "BIN Visit_Date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) DESC BIN Visit_Date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Theme_park",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Visit_Date",
      "y_name": "COUNT(Visit_Date)",
      "x_data": [
        [
          "Mon",
          "Tue",
          "Thur",
          "Sun",
          "Wed",
          "Sat",
          "Fri"
        ]
      ],
      "y_data": [
        [
          6,
          5,
          3,
          3,
          2,
          1,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Visit_Date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find all the distinct visit dates, bin visit date by weekday interval and count them by a bar chart, and could you order y axis in desc order?",
      "What are the distinct visit dates, bin visit date by weekday, and count them by a bar chart, list in descending by the y-axis."
    ],
    "irrelevant_tables": [
      "Visitors",
      "Hotels"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2643@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "GT",
          "DP/GT"
        ]
      ],
      "y_data": [
        [
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show me how many in each class of all races using a bar chart, and I want to order in descending by the Class."
    ],
    "irrelevant_tables": [
      "track"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2648@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "race_track",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "count(*)",
      "x_data": [
        [
          "GT",
          "DP/GT"
        ]
      ],
      "y_data": [
        [
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for the total number of each class, display in asc by the Y-axis.",
      "Draw a bar chart for what are the different classes of races, and how many races correspond to each?, and show in asc by the total number.",
      "Visualize a bar chart for what are the different classes of races, and how many races correspond to each?, and could you order in ascending by the Y?",
      "What are the different classes of races, and how many races correspond to each Show bar chart, order from low to high by the total number.",
      "Show the race class and number of races in each class with a bar chart, could you show in ascending by the total number?"
    ],
    "irrelevant_tables": [
      "track"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2790@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "pName",
      "y_name": "HS",
      "x_data": [
        [
          "Eddie",
          "Charles",
          "Andrew"
        ]
      ],
      "y_data": [
        [
          600,
          300,
          1200
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the name and training hours of players whose hours are below 1500 Show bar chart, show names in desc order.",
      "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart, show names in desc order."
    ],
    "irrelevant_tables": [
      "College",
      "Tryout"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2800@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "soccer_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state",
      "y_name": "min(enr)",
      "x_data": [
        [
          "AZ",
          "LA",
          "FL",
          "OK"
        ]
      ],
      "y_data": [
        [
          12000,
          18000,
          19000,
          22000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the smallest enrollment of each state using a bar chart, show in ascending by the y axis.",
      "Bar chart, the-axis is the state, and the Y axis is each state's the smallest enrollment, rank by the Y in ascending."
    ],
    "irrelevant_tables": [
      "Player",
      "Tryout"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "298@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) DESC",
        "binning": "BIN date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "Mon",
          "Thur",
          "Wed",
          "Sun",
          "Sat",
          "Fri",
          "Tue"
        ]
      ],
      "y_data": [
        [
          25,
          32,
          28,
          24,
          25,
          25,
          20
        ]
      ],
      "classify": [],
      "describe": "BIN date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For those dates with a max temperature greater than or equal to 80, I want to know the number of days on the day of the week interval using a bar chart, could you show from high to low by the Y?"
    ],
    "irrelevant_tables": [
      "trip",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "303@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC"
    },
    "chart": "Line",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "2015-07-01",
          "2015-07-02",
          "2015-07-03",
          "2015-07-04",
          "2015-07-05",
          "2015-07-06",
          "2015-07-07",
          "2015-07-08",
          "2015-07-09",
          "2015-07-10",
          "2015-07-11",
          "2015-07-12",
          "2015-07-13",
          "2015-07-14",
          "2015-07-15",
          "2015-07-16",
          "2015-07-17",
          "2015-07-18",
          "2015-07-19",
          "2015-07-20",
          "2015-07-21",
          "2015-07-22",
          "2015-07-23",
          "2015-07-24",
          "2015-07-25",
          "2015-07-26",
          "2015-07-27",
          "2015-07-28",
          "2015-07-29",
          "2015-07-30",
          "2015-07-31"
        ]
      ],
      "y_data": [
        [
          91,
          79,
          81,
          80,
          81,
          78,
          78,
          74,
          74,
          73,
          78,
          78,
          80,
          75,
          83,
          85,
          81,
          79,
          89,
          87,
          76,
          77,
          75,
          78,
          75,
          79,
          102,
          94,
          89,
          81,
          78
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Use a line chart to show the change in maximum temperature among all regions in July 2015, with the x-axis in ascending order."
    ],
    "irrelevant_tables": [
      "status",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "317@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC",
        "binning": "BIN installation_date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC BIN installation_date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "installation_date",
      "y_name": "COUNT(installation_date)",
      "x_data": [
        [
          "2013",
          "2014"
        ]
      ],
      "y_data": [
        [
          67,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN installation_date BY YEAR",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Please give me a bar chart that bins the installation date of stations into Year interval as the X-axis, and count for showing how many stations are installed each year, list y axis in descending order.",
      "Bin the installation date into Year interval, and then you can draw a bar chart to tell me how many stations each year, and could you sort y-axis in descending order please?"
    ],
    "irrelevant_tables": [
      "status",
      "weather"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "330@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC",
        "binning": "BIN date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "2014",
          "2013"
        ]
      ],
      "y_data": [
        [
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN date BY YEAR",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Count those days for each year and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, and display the number of date in ascending order.",
      "For dates had a minimum dew point smaller than any day in zip code 94107, show the total number of such days for each year using a bar chart, list from low to high by the y axis."
    ],
    "irrelevant_tables": [
      "trip",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "339@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "San Jose",
          "San Francisco"
        ]
      ],
      "y_data": [
        [
          16,
          35
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart, and order by the x axis in desc."
    ],
    "irrelevant_tables": [
      "weather",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "349@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"  ORDER BY COUNT(date) DESC",
        "binning": "BIN date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"  ORDER BY COUNT(date) DESC BIN date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "bike_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "2014",
          "2015",
          "2013"
        ]
      ],
      "y_data": [
        [
          275,
          206,
          106
        ]
      ],
      "classify": [],
      "describe": "BIN date BY YEAR",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "On which day has it neither been foggy nor rained in the zip code of 94107, and bin by year, count them by a bar chart, sort by the y axis in desc.",
      "In zip code 94107, on which day neither Fog nor Rain was not observed, and bin by year, count them by a bar chart, sort by the y axis in desc."
    ],
    "irrelevant_tables": [
      "station",
      "trip"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2585@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "pilot_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Position",
      "y_name": "COUNT(Position)",
      "x_data": [
        [
          "Center Team",
          "Forward Team",
          "Forward-Center Team"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Position",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart of the number of position from each position, and list in ascending by the Position."
    ],
    "irrelevant_tables": [
      "pilot_record",
      "aircraft"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2587@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "pilot_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Nigeria",
          "United Kindom",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show the total number from different nationality, list in ascending by the the total number .",
      "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality Show bar chart, display in asc by the total number.",
      "Draw a bar chart for what are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality, and could you display total number from low to high order?"
    ],
    "irrelevant_tables": [
      "aircraft",
      "pilot_record"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "927@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(date_account_opened) ASC",
        "binning": "BIN date_account_opened BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(date_account_opened) ASC BIN date_account_opened BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_account_opened",
      "y_name": "COUNT(date_account_opened)",
      "x_data": [
        [
          "Thur",
          "Wed",
          "Sat",
          "Sun",
          "Tue",
          "Fri",
          "Mon"
        ]
      ],
      "y_data": [
        [
          0,
          1,
          2,
          0,
          0,
          3,
          2
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          3
        ]
      ],
      "classify": [
        "Regular",
        "VIP"
      ],
      "describe": "GROUP BY other_account_details, BIN date_account_opened BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many accounts are opened in each day? Bin the account open day by weekday and group by other account details in a stacked bar chart, and rank by the y axis in ascending."
    ],
    "irrelevant_tables": [
      "Invoices",
      "Invoice_Line_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "932@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY COUNT(date_account_opened) DESC",
        "binning": "BIN date_account_opened BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY COUNT(date_account_opened) DESC BIN date_account_opened BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_account_opened",
      "y_name": "COUNT(date_account_opened)",
      "x_data": [
        [
          "Mon",
          "Fri",
          "Tue",
          "Sun",
          "Sat",
          "Wed",
          "Thur"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          2,
          2,
          2,
          1,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_account_opened BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of accounts opened in each day Bin the account open day by weekday in a bar chart, and could you display Y-axis in descending order?",
      "How many accounts are opened in each day? Bin the account open day by weekday in a bar chart, I want to rank by the y axis in desc."
    ],
    "irrelevant_tables": [
      "Financial_Transactions",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "942@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC",
        "binning": "BIN date_account_opened BY YEAR"
      },
      "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR"
    },
    "chart": "Grouping Line",
    "hardness": "Extra Hard",
    "db_id": "customers_and_invoices",
    "vis_obj": {
      "chart": "line",
      "x_name": "date_account_opened",
      "y_name": "COUNT(date_account_opened)",
      "x_data": [
        [
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013",
          "2014",
          "2015",
          "2016",
          "2017"
        ]
      ],
      "y_data": [
        [
          0,
          1,
          2,
          0,
          1,
          0,
          2,
          1,
          1,
          0
        ],
        [
          1,
          0,
          0,
          1,
          1,
          0,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [
        "Regular",
        "VIP"
      ],
      "describe": "GROUP BY other_account_details, BIN date_account_opened BY YEAR",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many accounts are opened in each year? Show a group line chart that group by other account details, and could you order by the x axis in asc?"
    ],
    "irrelevant_tables": [
      "Order_Items",
      "Invoice_Line_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1099@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Budget_in_Billions FROM department ORDER BY Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Budget_in_Billions FROM department ORDER BY Name ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Budget_in_Billions",
      "x_data": [
        [
          "Agriculture",
          "Commerce",
          "Defense",
          "Education",
          "Energy",
          "Health and Human Services",
          "Homeland Security",
          "Housing and Urban Development",
          "Interior",
          "Justice",
          "Labor",
          "State",
          "Transportation",
          "Treasury",
          "Veterans Affairs"
        ]
      ],
      "y_data": [
        [
          77.6,
          6.2,
          439.3,
          62.8,
          21.5,
          543.2,
          44.6,
          46.2,
          10.7,
          23.4,
          59.7,
          9.96,
          58,
          11.1,
          73.2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for budget_in_billions of each name, show in ascending by the Name."
    ],
    "irrelevant_tables": [
      "head",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1100@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "line",
      "x_name": "Creation",
      "y_name": "SUM(Budget_in_Billions)",
      "x_data": [
        [
          "1789",
          "1849",
          "1870",
          "1889",
          "1903",
          "1913",
          "1947",
          "1953",
          "1965",
          "1966",
          "1977",
          "1979",
          "1989",
          "2002"
        ]
      ],
      "y_data": [
        [
          21.060000000000002,
          10.7,
          23.4,
          77.6,
          6.2,
          59.7,
          439.3,
          543.2,
          46.2,
          58.0,
          21.5,
          62.8,
          73.2,
          44.6
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Creation",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Can you draw the trend of sum budget in billions over the creation with a line chart, could you show by the x-axis in asc?"
    ],
    "irrelevant_tables": [
      "management",
      "head"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1101@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "line",
      "x_name": "Creation",
      "y_name": "AVG(Budget_in_Billions)",
      "x_data": [
        [
          "1789",
          "1849",
          "1870",
          "1889",
          "1903",
          "1913",
          "1947",
          "1953",
          "1965",
          "1966",
          "1977",
          "1979",
          "1989",
          "2002"
        ]
      ],
      "y_data": [
        [
          10.530000000000001,
          10.7,
          23.4,
          77.6,
          6.2,
          59.7,
          439.3,
          543.2,
          46.2,
          58.0,
          21.5,
          62.8,
          73.2,
          44.6
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Creation",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show average of budget in different year and group by department creation time with a line chart, show in ascending by the X.",
      "Plot the average of budget in billions over creation in a line chart, and show Creation in asc order."
    ],
    "irrelevant_tables": [
      "head",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1112@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "bar",
      "x_name": "born_state",
      "y_name": "AVG(age)",
      "x_data": [
        [
          "Florida",
          "Delaware",
          "Connecticut",
          "California",
          "Alabama"
        ]
      ],
      "y_data": [
        [
          50,
          53,
          55,
          61.25,
          68
        ]
      ],
      "classify": [],
      "describe": "GROUP BY born_state",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the average age of heads of departments born in each state with a bar chart, list by the X-axis in desc."
    ],
    "irrelevant_tables": [
      "department",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2486@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "Wales",
          "Northern Ireland",
          "England"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          9
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar graph to show the number of nationality from different nationality, list in descending by the Nationality.",
      "Visualize a bar chart, count and group by nationality from the journalist table, list X in descending order please.",
      "Compare the total number of journalist with different nationality using a bar chart, and list in descending by the Nationality."
    ],
    "irrelevant_tables": [
      "event",
      "news_report"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2488@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "news_report",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "AVG(Age)",
      "x_data": [
        [
          "England",
          "Northern Ireland",
          "Wales"
        ]
      ],
      "y_data": [
        [
          34.22222222222222,
          29,
          27
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about what are the nationalities and their average ages of journalists?, and order y-axis from high to low order.",
      "What are the nationalities and their average ages of journalists Show me a bar chart, order total number in desc order please."
    ],
    "irrelevant_tables": [
      "event",
      "news_report"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3058@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tvshow",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Language",
      "y_name": "count(*)",
      "x_data": [
        [
          "English",
          "Italian"
        ]
      ],
      "y_data": [
        [
          3,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List each language and the number of TV Channels using it Visualize by bar chart, rank y-axis in ascending order.",
      "Bar chart of the total number from each language, and list by the total number from low to high.",
      "List each language and the number of TV Channels using it in a bar chart, list by the total number from low to high.",
      "For each language, list the number of TV Channels that use it Plot them as bar chart, I want to order from low to high by the y axis."
    ],
    "irrelevant_tables": [
      "TV_series",
      "Cartoon"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2421@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "music_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "formats",
      "y_name": "count(*)",
      "x_data": [
        [
          "mp4",
          "mp3"
        ]
      ],
      "y_data": [
        [
          4,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about how many songs were released for each format?, could you list Y-axis in descending order?",
      "Bar graph to show the total number from different formats, order in descending by the y-axis please."
    ],
    "irrelevant_tables": [
      "genre",
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2423@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "music_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "languages",
      "y_name": "avg(rating)",
      "x_data": [
        [
          "bangla",
          "english"
        ]
      ],
      "y_data": [
        [
          7.5,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the average rating of songs for each language Plot them as bar chart, and could you list from high to low by the total number?",
      "Draw a bar chart for what is the average rating of songs for each language?, order by the mean rating in desc please.",
      "Show me a bar chart for what is the average song rating for each language?, could you sort total number in desc order?",
      "What is the average song rating for each language Plot them as bar chart, could you list from high to low by the total number?"
    ],
    "irrelevant_tables": [
      "files",
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2860@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY District_name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY District_name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "bar",
      "x_name": "District_name",
      "y_name": "City_Population",
      "x_data": [
        [
          "Kasur District",
          "Jhang District",
          "Gujrat District",
          "Gujranwala District",
          "Dera Ghazi Khan District",
          "Chiniot District",
          "Bahawalpur District"
        ]
      ],
      "y_data": [
        [
          314617,
          365198,
          328512,
          1526168,
          464742,
          219254,
          530438
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents? Show a bar graph, and rank in desc by the X."
    ],
    "irrelevant_tables": [
      "store_product",
      "store_district"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2862@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "store_product",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "count(*)",
      "x_data": [
        [
          "City Mall",
          "Village Store"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find all types of store and number of them Visualize by bar chart, could you order Type in ascending order?"
    ],
    "irrelevant_tables": [
      "product",
      "district"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2497@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Last_year",
      "y_name": "COUNT(Last_year)",
      "x_data": [
        [
          "2004",
          "2001",
          "2003",
          "2002"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Last_year BY TIME",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart, I want to rank y axis in desc order.",
      "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah, I want to rank in descending by the Y."
    ],
    "irrelevant_tables": [
      "party_host",
      "host"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2507@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "party_host",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam",
          "RAI Amsterdam",
          "Heineken Music Hall Amsterdam",
          "Hemkade 48 Zaandam",
          "Various locations"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart, that group by location and count them, and sort by the the number of location from low to high please.",
      "Create a bar chart showing how many location across location, and display by the total number from low to high."
    ],
    "irrelevant_tables": [
      "party_host",
      "host"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2737@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "count(*)",
      "x_data": [
        [
          "Midshipman",
          "Lieutenant",
          "Commander, junior captain"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for how many captains with younger than 50 are in each rank?, and show Y-axis in descending order.",
      "Show me a bar chart for how many captains with younger than 50 are in each rank?, and rank Y-axis in descending order.",
      "Count the number of captains younger than 50 of each rank by a bar chart, show in descending by the y-axis."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2739@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Flag",
      "y_name": "count(*)",
      "x_data": [
        [
          "Malta",
          "Panama"
        ]
      ],
      "y_data": [
        [
          1,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for what are the different ship flags, and how many ships have each?, show names in ascending order please."
    ],
    "irrelevant_tables": [
      "captain"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2740@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "avg(age)",
      "x_data": [
        [
          "Third-rate ship of the line",
          "Armed schooner",
          "Cutter",
          "Sloop-of-war",
          "Frigate"
        ]
      ],
      "y_data": [
        [
          51.33333333333334,
          45,
          43,
          38,
          38
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart showing the average age of captains in each class, order by the y axis in descending."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2747@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "count(*)",
      "x_data": [
        [
          "Midshipman",
          "Lieutenant",
          "Commander, junior captain"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Count the number of captains that have each rank Visualize by bar chart, and show in desc by the Rank please."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2751@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "COUNT(Rank)",
      "x_data": [
        [
          "Commander, junior captain",
          "Lieutenant",
          "Midshipman"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Rank",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart comparing the total number of captains in each rank, rank in ascending by the Rank."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2753@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Class",
      "y_name": "COUNT(Class)",
      "x_data": [
        [
          "Third-rate ship of the line",
          "Sloop-of-war",
          "Frigate",
          "Cutter",
          "Armed schooner"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Class",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show me a bar chart comparing the total number of captains of different classes, order from high to low by the the number of class.",
      "Compare the total number of captains with different classes using a bar graph, and order from high to low by the the number of class.",
      "Plot how many class by grouped by class as a bar graph, and rank total number from high to low order please."
    ],
    "irrelevant_tables": [
      "Ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2805@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Name",
      "y_name": "COUNT(Product_Name)",
      "x_data": [
        [
          "Business Policy",
          "Business Policy B",
          "Men suits",
          "Dinning"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Product_Name",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart for listing the number of the names of products that are not in any event, sort the number of product name in ascending order.",
      "List the names of products that are not in any event, and count them by a bar chart, I want to show total number from low to high order please."
    ],
    "irrelevant_tables": [
      "Agreements",
      "Finances"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2811@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "solvency_ii",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Name",
      "y_name": "COUNT(Product_Name)",
      "x_data": [
        [
          "Business Policy",
          "Business Policy B",
          "Conference Equipments",
          "Dinning",
          "Men suits",
          "Special Dinning",
          "TV Equipments",
          "Trading Policy",
          "Trading Policy B"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          3,
          2,
          2,
          3,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Product_Name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar graph showing the total number of different product names, I want to rank x axis in ascending order.",
      "Bar chart x axis product name y axis how many product name, I want to show in ascending by the Product_Name."
    ],
    "irrelevant_tables": [
      "Assets",
      "Parties_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1167@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "age",
      "x_data": [
        [
          "Evangeline",
          "Lyric",
          "Kacey"
        ]
      ],
      "y_data": [
        [
          1,
          4,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How old is each dog that was abandoned? Show in a bar chart, and order age from low to high order."
    ],
    "irrelevant_tables": [
      "Owners",
      "Charges"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1169@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY weight DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY weight DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "weight",
      "x_data": [
        [
          "Kacey",
          "Lyric",
          "Evangeline"
        ]
      ],
      "y_data": [
        [
          7.57,
          4.36,
          4.01
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the weight of each dog that was abandoned? Show in a bar chart, rank Y in desc order.",
      "List the dog name and weight of the dogs who have been abandoned in a bar chart, display in descending by the y axis."
    ],
    "irrelevant_tables": [
      "Breeds",
      "Treatments"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1181@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC",
        "binning": "BIN date_arrived BY YEAR"
      },
      "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC BIN date_arrived BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_arrived",
      "y_name": "COUNT(date_arrived)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          13,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN date_arrived BY YEAR",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many dogs arrived in each year? Visualize with a bar chart, list y axis in descending order.",
      "List the number of dogs arrived in each year with a bar chart, rank Y-axis in descending order please."
    ],
    "irrelevant_tables": [
      "Charges",
      "Treatments"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1184@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) ASC",
        "binning": "BIN date_arrived BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) ASC BIN date_arrived BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_arrived",
      "y_name": "COUNT(date_arrived)",
      "x_data": [
        [
          "Mon",
          "Thur",
          "Sat",
          "Sun",
          "Wed",
          "Tue",
          "Fri"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          2,
          2,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "BIN date_arrived BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many dogs arrived in each day? Visualize with a bar chart that bins arrived date by weekday, list by the Y-axis in ascending.",
      "List the number of dogs arrived in each day with a bar chart that bins arrived date by weekday, and list by the Y-axis in ascending."
    ],
    "irrelevant_tables": [
      "Breeds",
      "Treatment_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1185@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC",
        "binning": "BIN date_departed BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dog_kennels",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_departed",
      "y_name": "COUNT(date_departed)",
      "x_data": [
        [
          "Sun",
          "Sat",
          "Wed",
          "Tue",
          "Thur",
          "Mon",
          "Fri"
        ]
      ],
      "y_data": [
        [
          12,
          3,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_departed BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the number of dogs departed in each day with a bar chart that bins departed date by weekday, and sort in desc by the the number of date departed.",
      "How many dogs departed in each day? Visualize with a bar chart that bins departed date by weekday, and sort in descending by the total number."
    ],
    "irrelevant_tables": [
      "Professionals",
      "Sizes"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2079@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC",
        "binning": "BIN date_moved_in BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_moved_in",
      "y_name": "COUNT(date_moved_in)",
      "x_data": [
        [
          "Friday",
          "Saturday",
          "Tuesday"
        ]
      ],
      "y_data": [
        [
          9,
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "BIN date_moved_in BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart for what are the number of the distinct move in dates of the residents? Bin move in date by weekday, and sort by the total number in descending."
    ],
    "irrelevant_tables": [
      "Timed_Locations_of_Things",
      "Residents_Services"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2087@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type_of_Thing_Code",
      "y_name": "COUNT(Type_of_Thing_Code)",
      "x_data": [
        [
          "Commen",
          "Electronics",
          "Furniture"
        ]
      ],
      "y_data": [
        [
          8,
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Type_of_Thing_Code",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the number of items in the type of each thing using a bar chart, could you sort how many type of thing code in desc order please?"
    ],
    "irrelevant_tables": [
      "Customer_Event_Notes",
      "Timed_Locations_of_Things"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2109@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "local_govt_and_lot",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_moved_in",
      "y_name": "COUNT(date_moved_in)",
      "x_data": [
        [
          "2016-09-27",
          "2015-03-27"
        ]
      ],
      "y_data": [
        [
          4,
          9
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date_moved_in",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them, rank Y-axis in asc order.",
      "Draw a bar chart of date moved in versus how many date moved in, and sort in asc by the y axis.",
      "Group and count the move in date in a bar chart, show Y-axis in ascending order please."
    ],
    "irrelevant_tables": [
      "Timed_Status_of_Things",
      "Properties"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "907@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "culture_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Category",
      "y_name": "count(*)",
      "x_data": [
        [
          "Gay M/SF",
          "Gay SF/F",
          "Lesb. M/SF"
        ]
      ],
      "y_data": [
        [
          5,
          2,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all book categories and the number of books in each category with a bar chart, and I want to sort by the X in asc.",
      "Give me a histogram for how many books fall into each category?, and rank in ascending by the X-axis."
    ],
    "irrelevant_tables": [
      "movie",
      "culture_company"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3288@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wta_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "count(*)",
      "x_data": [
        [
          "2017",
          "2016",
          "2013"
        ]
      ],
      "y_data": [
        [
          108,
          158,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show me a bar chart for how many matches were played in each year?, rank by the x-axis in desc.",
      "Find the number of matches happened in each year Plot them as bar chart, show in desc by the X."
    ],
    "irrelevant_tables": [
      "rankings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3290@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT year , count(*) FROM matches ORDER BY count(*) ASC",
        "binning": "BIN year BY YEAR"
      },
      "VQL": "Visualize BAR SELECT year , count(*) FROM matches ORDER BY count(*) ASC BIN year BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wta_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "year",
      "y_name": "count(*)",
      "x_data": [
        [
          "2014",
          "2015",
          "2013",
          "2017",
          "2016"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          12,
          108,
          158
        ]
      ],
      "classify": [],
      "describe": "BIN year BY YEAR",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart for how many matches were played each year?, and order from low to high by the y axis.",
      "Sum the number of matches that happened each year Plot them as a bar chart, order from low to high by the y axis.",
      "Return a histogram on how many matches were played in each year, order from low to high by the y axis."
    ],
    "irrelevant_tables": [
      "rankings"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "443@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Directed_by",
      "y_name": "COUNT(Directed_by)",
      "x_data": [
        [
          "Bill Schreiner",
          "Jesus Salvador Trevi\u00f1o"
        ]
      ],
      "y_data": [
        [
          4,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Directed_by",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show the number of directed by from different directed by, show Directed_by in asc order.",
      "What is the number of films of each director? Return a bar chart, order in ascending by the names."
    ],
    "irrelevant_tables": [
      "schedule",
      "cinema"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "445@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Directed_by",
      "y_name": "count(*)",
      "x_data": [
        [
          "Bill Schreiner",
          "Jesus Salvador Trevi\u00f1o"
        ]
      ],
      "y_data": [
        [
          4,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List all directors along with the number of films directed by each director Plot them as bar chart, display in ascending by the x-axis."
    ],
    "irrelevant_tables": [
      "schedule",
      "cinema"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "465@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Openning_year",
      "y_name": "COUNT(Openning_year)",
      "x_data": [
        [
          "2009",
          "2012",
          "2013",
          "2015",
          "2010",
          "2011"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Openning_year",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Tell me how many cinemas open for each year in a bar chart, and sort Y in ascending order please.",
      "Bar chart of how many openning year from each openning year, list from low to high by the y axis please."
    ],
    "irrelevant_tables": [
      "schedule",
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "468@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Openning_year",
      "y_name": "SUM(Capacity)",
      "x_data": [
        [
          "2010",
          "2011",
          "2012",
          "2015",
          "2013",
          "2009"
        ]
      ],
      "y_data": [
        [
          1633,
          1336,
          368,
          364,
          330,
          305
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Openning_year",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart showing the sum of capacity of cinemas open for each year, and could you show y axis from high to low order?",
      "Give me a bar chart for total number of capacity of each openning year, order by the Y from high to low."
    ],
    "irrelevant_tables": [
      "schedule",
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "469@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Openning_year",
      "y_name": "AVG(Capacity)",
      "x_data": [
        [
          "2010",
          "2011",
          "2012",
          "2015",
          "2013",
          "2009"
        ]
      ],
      "y_data": [
        [
          544.3333333333334,
          445.3333333333333,
          368,
          364,
          330,
          305
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Openning_year",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart showing the average of capacity of cinemas open for each year, order by the y-axis in descending."
    ],
    "irrelevant_tables": [
      "schedule",
      "film"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "474@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "cinema",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Capacity",
      "x_data": [
        [
          "Oriel",
          "Mount Callan",
          "Moneypoint",
          "Grouse Lodge",
          "Gortahile",
          "Glenough",
          "Glenmore",
          "Dublin Array",
          "Codling",
          "Carrowleagh"
        ]
      ],
      "y_data": [
        [
          330,
          908,
          225,
          203,
          208,
          325,
          305,
          364,
          1100,
          368
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Create a bar chart showing capacity across name, order Name in desc order."
    ],
    "irrelevant_tables": [
      "film",
      "schedule"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3220@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Grape",
      "y_name": "COUNT(Grape)",
      "x_data": [
        [
          "Barbera",
          "Cabernet Franc",
          "Cabernet Sauvingnon",
          "Chardonnay",
          "Grenache",
          "Malbec",
          "Marsanne",
          "Merlot",
          "Petite Sirah",
          "Pinot Noir",
          "Roussanne",
          "Sangiovese",
          "Sauvignon Blanc",
          "Syrah",
          "Tempranillo",
          "Viognier",
          "Zinfandel"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          68,
          104,
          10,
          1,
          1,
          10,
          6,
          109,
          1,
          1,
          46,
          61,
          1,
          1,
          78
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Grape",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the number of different grapes of each wine? Show me a bar chart, and display X-axis in ascending order.",
      "Please give me a bar chart that counts the number of grape of wine, and I want to display in ascending by the X-axis."
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3224@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Area",
      "y_name": "COUNT(Area)",
      "x_data": [
        [
          "Sierra Foothills",
          "Santa Cruz Mountains",
          "North Coast",
          "Central Valley",
          "Central Coast",
          "California"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          31,
          2,
          14,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Area",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return a bar chart for what is the number of areas for all appellations?, and could you show X-axis in desc order?",
      "Give me a bar chart for the number of area of each area, display by the x-axis in descending."
    ],
    "irrelevant_tables": [
      "grapes",
      "wine"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3236@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Winery",
      "y_name": "COUNT(Winery)",
      "x_data": [
        [
          "Bucella",
          "Carter",
          "Casa Piena",
          "Caymus",
          "Chappellet",
          "Chimeney Rock",
          "Darioush",
          "David Arthur",
          "Dos Lagos",
          "Hourglass",
          "Janzen",
          "Lewis",
          "Morlet",
          "Paul Hobbs",
          "Sine Qua Non"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          3,
          1,
          1,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Winery",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank X in ascending order."
    ],
    "irrelevant_tables": [
      "grapes",
      "appellations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3238@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Grape",
      "y_name": "count(*)",
      "x_data": [
        [
          "Barbera",
          "Cabernet Franc",
          "Malbec",
          "Marsanne",
          "Roussanne",
          "Sangiovese",
          "Tempranillo",
          "Viognier",
          "Petite Sirah",
          "Grenache",
          "Merlot",
          "Sauvignon Blanc",
          "Syrah",
          "Cabernet Sauvingnon",
          "Zinfandel",
          "Chardonnay",
          "Pinot Noir"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          6,
          10,
          10,
          46,
          61,
          68,
          78,
          104,
          109
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart on how many wines are there for each grape?, order by the Y from low to high.",
      "Display a bar chart for what are the numbers of wines for different grapes?, and order by the total number in ascending.",
      "A bar chart about how many wines are there for each grape?, order by the total number in ascending.",
      "What are the numbers of wines for different grapes Plot them as bar chart, show by the the total number in ascending.",
      "Show me the total number by grape in a histogram, and show from low to high by the y axis."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3247@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "max(Score)",
      "x_data": [
        [
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2066"
        ]
      ],
      "y_data": [
        [
          92,
          95,
          98,
          98,
          95,
          95,
          88
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a line chart to show what are the maximum score of wines in each year, and show in asc by the X.",
      "Can you draw a line chart to show the trend of maximal score over the year, sort X in asc order."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3256@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "max(Price)",
      "x_data": [
        [
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2066"
        ]
      ],
      "y_data": [
        [
          75,
          100,
          200,
          225,
          130,
          78,
          32
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize the general trend of maximal price over the year in a line chart, I want to sort X-axis in asc order."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1498@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarters",
      "y_name": "count(*)",
      "x_data": [
        [
          "USA",
          "UK",
          "China",
          "Netherlands",
          "Brazil"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For each headquarter, what are the headquarter and how many companies are centered there Visualize by bar chart, and I want to list in desc by the total number.",
      "List all headquarters and the number of companies in each headquarter with a bar chart, could you display by the the total number from high to low?",
      "Bar chart of the total number from each headquarters, rank by the Y in descending."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1508@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Main_Industry",
      "y_name": "sum(market_value)",
      "x_data": [
        [
          "Banking",
          "Conglomerate",
          "Oil and gas"
        ]
      ],
      "y_data": [
        [
          580.4000000000002,
          415.9,
          1257.1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart about what are the main indstries and total market value for each industry?, rank in ascending by the names please.",
      "What are the main indstries and total market value for each industry Visualize by bar chart, rank in ascending by the X-axis.",
      "Show all main industry and total market value in each industry by a bar chart, show in asc by the x-axis."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1510@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Main_Industry",
      "y_name": "COUNT(Main_Industry)",
      "x_data": [
        [
          "Conglomerate",
          "Banking"
        ]
      ],
      "y_data": [
        [
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Main_Industry",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of companies without a gas station in each main industry with a bar chart, could you list from low to high by the Y?",
      "How many companies without a gas station in each main industry? Draw a bar chart, and display by the total number in asc."
    ],
    "irrelevant_tables": [
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1511@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Manager_Name",
      "y_name": "COUNT(Manager_Name)",
      "x_data": [
        [
          "BrianWingrave",
          "Bryan Taylor",
          "BryanDenman",
          "Colin Denman",
          "Jon Rowe",
          "Luke Rowe",
          "Simon Cope Derek Marloe",
          "SimonMarloe",
          "Tom Whit",
          "Tony Bristow"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Manager_Name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of gas stations for each manager in a bar chart, and show by the names in ascending.",
      "How many gas stations dors each manager have? Plot a bar chart, show by the names in ascending."
    ],
    "irrelevant_tables": [
      "company",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1518@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarters",
      "y_name": "COUNT(Headquarters)",
      "x_data": [
        [
          "Brazil",
          "China",
          "Netherlands",
          "UK",
          "USA"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Headquarters",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of companies in each headquarter with a bar chart, and show x-axis in ascending order.",
      "Bar chart of how many headquarters from each headquarters, list names in asc order."
    ],
    "irrelevant_tables": [
      "station_company",
      "gas_station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2459@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "job",
      "y_name": "avg(age)",
      "x_data": [
        [
          "doctor",
          "engineer",
          "student"
        ]
      ],
      "y_data": [
        [
          45,
          35,
          25.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart x axis job y axis the average of age, list by the y-axis in desc.",
      "What is average age for different job title Visualize by bar chart, rank total number from high to low order.",
      "Visualize a bar chart for what is average age for different job title?, and display by the Y-axis from high to low.",
      "How old is the average person for each job Show bar chart, and rank total number from high to low order.",
      "A bar chart about what is average age for different job title?, and rank by the the average of age in desc.",
      "Return a histogram on how old is the average person for each job?, and could you list by the y axis in desc please?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2461@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "job",
      "y_name": "avg(age)",
      "x_data": [
        [
          "doctor",
          "engineer"
        ]
      ],
      "y_data": [
        [
          45,
          35
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for what is average age of male for different job title?, and show Y in desc order.",
      "What is average age of male for different job title Visualize by bar chart, sort by the Y in desc please.",
      "What is the average age for a male in each job Visualize by bar chart, and rank by the y-axis in desc.",
      "Return a bar chart on what is the average age for a male in each job?, rank in descending by the Y.",
      "Return a histogram on what is average age of male for different job title?, and sort y axis in descending order."
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2465@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "network_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "count(*)",
      "x_data": [
        [
          "male",
          "female"
        ]
      ],
      "y_data": [
        [
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for how many people are under 40 for each gender?, and rank in desc by the x-axis.",
      "How many people are under 40 for each gender Plot them as bar chart, and could you show by the X in descending?"
    ],
    "irrelevant_tables": [
      "PersonFriend"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2317@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "match_season",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Draft_Class",
      "y_name": "Draft_Pick_Number",
      "x_data": [
        [
          "1996 MLS Inaugural Player Draft",
          "1999 MLS College Draft",
          "2000 MLS SuperDraft",
          "2005 MLS SuperDraft",
          "2006 MLS SuperDraft",
          "2008 MLS SuperDraft",
          "2009 MLS SuperDraft"
        ]
      ],
      "y_data": [
        [
          87,
          5,
          4,
          9,
          37,
          4,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart for what are the draft pick numbers and draft classes for players who play the Defender position?, could you list by the x axis in ascending?"
    ],
    "irrelevant_tables": [
      "team",
      "country"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2321@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "match_season",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Position",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Forward",
          "Midfielder",
          "Defender"
        ]
      ],
      "y_data": [
        [
          3,
          6,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for the total number of each position, show the total number in asc order.",
      "Show the position of players and the corresponding number of players with a bar chart, and show the total number in asc order.",
      "Draw a bar chart for how many players played each position?, display by the y-axis in ascending.",
      "How many players played each position Plot them as bar chart, and rank in asc by the y-axis.",
      "Show the position of players and the corresponding number of players Visualize by bar chart, and could you show in ascending by the Y please?",
      "Return a bar chart on how many players played each position?, show the total number in asc order."
    ],
    "irrelevant_tables": [
      "team",
      "country"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2551@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetID",
      "y_name": "weight",
      "x_data": [
        [
          "2001",
          "2002"
        ]
      ],
      "y_data": [
        [
          12,
          13.4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, and order from low to high by the y axis please.",
      "A bar chart about what is the id and weight of every pet who is older than 1?, and could you show in ascending by the y-axis please?",
      "Find the id and weight of all pets whose age is older than 1 Visualize by bar chart, and show weight from low to high order."
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2558@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "max(weight)",
      "x_data": [
        [
          "cat",
          "dog"
        ]
      ],
      "y_data": [
        [
          12,
          13.4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show maximal weight from different pettype, display in asc by the x-axis please.",
      "List the maximum weight and type for each type of pet with a bar chart, and show by the PetType in asc."
    ],
    "irrelevant_tables": [
      "Has_Pet",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2560@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "pets_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "PetType",
      "y_name": "avg(weight)",
      "x_data": [
        [
          "cat",
          "dog"
        ]
      ],
      "y_data": [
        [
          12,
          11.35
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the average weight for each type of pet Show bar chart, and I want to sort by the Y-axis from high to low please.",
      "Give me a bar chart for the average of weight of each pettype, could you list in desc by the Y?",
      "Visualize a bar chart for what is the average weight for each type of pet?, could you show y axis from high to low order?"
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Pet"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2517@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "party_people",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Minister",
      "y_name": "COUNT(Minister)",
      "x_data": [
        [
          "Dr. Kwame Nkrumah (MP)",
          "Imoru Egala (MP)",
          "Ebenezer Ako-Adjei (MP)"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Minister",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all ministers who do not belong to Progress Party, and count them by a bar chart, and order in asc by the Y.",
      "Which ministers are not a part of the Progress Party, and count them by a bar chart, order in asc by the Y."
    ],
    "irrelevant_tables": [
      "region",
      "party_events"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1551@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) ASC",
        "binning": "BIN HIRE_DATE BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "AVG(SALARY)",
      "x_data": [
        [
          "Thur",
          "Sat",
          "Fri",
          "Mon",
          "Tue",
          "Wed",
          "Sun"
        ]
      ],
      "y_data": [
        [
          3280,
          4933.333333333333,
          6357.142857142857,
          6525,
          6620,
          7590.909090909091,
          7733.333333333333
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, and display from low to high by the y axis.",
      "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the average of salary bin hire_date by weekday in a bar chart, display from low to high by the y axis.",
      "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the average of salary bin hire_date by weekday, and rank mean salary from low to high order please.",
      "For all employees who have the letters D or S in their first name, find hire_date and the average of salary bin hire_date by weekday, and visualize them by a bar chart, list in ascending by the total number please.",
      "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, display mean salary in ascending order please."
    ],
    "irrelevant_tables": [
      "countries",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1622@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) ASC",
        "binning": "BIN HIRE_DATE BY MONTH"
      },
      "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "HIRE_DATE",
      "y_name": "COUNT(HIRE_DATE)",
      "x_data": [
        [
          "Sept",
          "Aug"
        ]
      ],
      "y_data": [
        [
          3,
          30
        ]
      ],
      "classify": [],
      "describe": "BIN HIRE_DATE BY MONTH",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart, rank from low to high by the Y."
    ],
    "irrelevant_tables": [
      "regions",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1627@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' ) GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' ) GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_ID",
      "y_name": "COUNT(JOB_ID)",
      "x_data": [
        [
          "ST_MAN",
          "ST_CLERK",
          "SH_CLERK",
          "SA_REP",
          "SA_MAN",
          "PU_MAN",
          "PU_CLERK",
          "PR_REP",
          "MK_REP",
          "IT_PROG",
          "HR_REP",
          "FI_MGR",
          "FI_ACCOUNT",
          "AD_ASST",
          "AC_MGR",
          "AC_ACCOUNT"
        ]
      ],
      "y_data": [
        [
          5,
          20,
          20,
          30,
          3,
          1,
          5,
          1,
          1,
          5,
          1,
          1,
          5,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY JOB_ID",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Group and count the job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN for visualizing a bar chart, and rank by the names in desc."
    ],
    "irrelevant_tables": [
      "jobs",
      "countries"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1702@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY max_salary - min_salary ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY max_salary - min_salary ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_TITLE",
      "y_name": "max_salary - min_salary",
      "x_data": [
        [
          "Marketing Manager",
          "Sales Representative",
          "Purchasing Manager",
          "Accounting Manager",
          "Finance Manager"
        ]
      ],
      "y_data": [
        [
          6000,
          6000,
          7000,
          7800,
          7800
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000 Plot them as bar chart, rank y-axis in ascending order."
    ],
    "irrelevant_tables": [
      "job_history",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1703@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' ) GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' ) GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "JOB_ID",
      "y_name": "COUNT(JOB_ID)",
      "x_data": [
        [
          "SA_MAN",
          "AD_VP",
          "SA_REP",
          "MK_MAN",
          "FI_MGR",
          "AD_PRES",
          "AC_MGR"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY JOB_ID",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compute the number of each type of job ids for employees who make more than the highest-earning employee with title PU_MAN, with a bar chart, and show by the the number of job id in desc."
    ],
    "irrelevant_tables": [
      "locations",
      "jobs"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1746@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "SALARY",
      "x_data": [
        [
          "1987-06-17",
          "1987-06-20",
          "1987-06-21",
          "1987-06-22",
          "1987-06-23",
          "1987-06-24",
          "1987-06-25",
          "1987-06-26",
          "1987-06-27",
          "1987-06-28",
          "1987-06-29",
          "1987-06-30",
          "1987-07-02",
          "1987-07-03",
          "1987-07-04",
          "1987-07-05",
          "1987-07-06",
          "1987-07-07",
          "1987-07-08",
          "1987-07-10",
          "1987-07-11",
          "1987-07-12",
          "1987-07-13",
          "1987-07-14",
          "1987-07-15",
          "1987-07-16",
          "1987-07-17",
          "1987-07-18",
          "1987-07-19",
          "1987-07-20",
          "1987-07-21",
          "1987-07-22",
          "1987-07-23",
          "1987-07-24",
          "1987-07-25",
          "1987-07-26",
          "1987-07-27",
          "1987-07-28",
          "1987-07-29",
          "1987-07-30",
          "1987-07-31",
          "1987-08-01",
          "1987-08-02",
          "1987-08-03",
          "1987-08-04",
          "1987-08-05",
          "1987-08-06",
          "1987-08-07",
          "1987-08-08",
          "1987-08-09",
          "1987-08-10",
          "1987-08-11",
          "1987-08-12",
          "1987-08-13",
          "1987-08-14",
          "1987-08-15",
          "1987-08-16",
          "1987-08-17",
          "1987-08-18",
          "1987-08-19",
          "1987-08-20",
          "1987-08-21",
          "1987-08-22",
          "1987-08-23",
          "1987-08-24",
          "1987-08-25",
          "1987-08-26",
          "1987-08-27",
          "1987-08-28",
          "1987-08-29",
          "1987-08-30",
          "1987-08-31",
          "1987-09-02",
          "1987-09-03",
          "1987-09-04",
          "1987-09-05",
          "1987-09-06",
          "1987-09-07",
          "1987-09-08",
          "1987-09-09",
          "1987-09-10",
          "1987-09-11",
          "1987-09-12",
          "1987-09-13",
          "1987-09-14",
          "1987-09-15",
          "1987-09-16",
          "1987-09-17",
          "1987-09-18",
          "1987-09-19",
          "1987-09-20",
          "1987-09-21",
          "1987-09-22",
          "1987-09-23",
          "1987-09-24",
          "1987-09-27",
          "1987-09-28",
          "1987-09-29",
          "1987-09-30",
          "1987-10-01"
        ]
      ],
      "y_data": [
        [
          24000,
          9000,
          6000,
          4800,
          4800,
          4200,
          12000,
          9000,
          8200,
          7700,
          7800,
          6900,
          3100,
          2900,
          2800,
          2600,
          2500,
          8000,
          8200,
          6500,
          5800,
          3200,
          2700,
          2400,
          2200,
          3300,
          2800,
          2500,
          2100,
          3300,
          2900,
          2400,
          2200,
          3600,
          3200,
          2700,
          2500,
          3500,
          3100,
          2600,
          2500,
          14000,
          13500,
          12000,
          11000,
          10500,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10500,
          9500,
          7200,
          6800,
          6400,
          6200,
          11500,
          10000,
          9600,
          7400,
          7300,
          6100,
          11000,
          8800,
          8400,
          7000,
          6200,
          3200,
          3100,
          2500,
          2800,
          4200,
          4100,
          3400,
          3000,
          3800,
          3600,
          2900,
          2500,
          4000,
          3900,
          3200,
          2800,
          3100,
          3000,
          2600,
          2600,
          6000,
          6500,
          10000,
          12000,
          8300
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those employees who did not have any job in the past, draw a line chart about the change of salary over hire_date , rank by the X in asc.",
      "For those employees who did not have any job in the past, return a line chart about the change of salary over hire_date , and I want to sort by the X-axis in ascending.",
      "For those employees who did not have any job in the past, visualize a line chart about the change of salary over hire_date , and sort in ascending by the x axis please.",
      "For those employees who did not have any job in the past, show me about the change of salary over hire_date in a line chart, could you order X in ascending order?"
    ],
    "irrelevant_tables": [
      "locations",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1795@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "COMMISSION_PCT",
      "x_data": [
        [
          "1987-10-01",
          "1987-09-30",
          "1987-09-29",
          "1987-09-28",
          "1987-09-27",
          "1987-09-26",
          "1987-09-25",
          "1987-09-24",
          "1987-09-23",
          "1987-09-22",
          "1987-09-21",
          "1987-09-20",
          "1987-09-19",
          "1987-09-18",
          "1987-09-17",
          "1987-09-16",
          "1987-09-15",
          "1987-09-14",
          "1987-09-13",
          "1987-09-12",
          "1987-09-11",
          "1987-09-10",
          "1987-09-09",
          "1987-09-08",
          "1987-09-07",
          "1987-09-06",
          "1987-09-05",
          "1987-09-04",
          "1987-09-03",
          "1987-09-02",
          "1987-09-01",
          "1987-08-31",
          "1987-08-30",
          "1987-08-29",
          "1987-08-28",
          "1987-08-27",
          "1987-08-26",
          "1987-08-25",
          "1987-08-24",
          "1987-08-23",
          "1987-08-22",
          "1987-08-21",
          "1987-08-20",
          "1987-08-19",
          "1987-08-18",
          "1987-08-17",
          "1987-08-16",
          "1987-08-15",
          "1987-08-14",
          "1987-08-13",
          "1987-08-12",
          "1987-08-11",
          "1987-08-10",
          "1987-08-09",
          "1987-08-08",
          "1987-08-07",
          "1987-08-06",
          "1987-08-05",
          "1987-08-04",
          "1987-08-03",
          "1987-08-02",
          "1987-08-01",
          "1987-07-31",
          "1987-07-30",
          "1987-07-29",
          "1987-07-28",
          "1987-07-27",
          "1987-07-26",
          "1987-07-25",
          "1987-07-24",
          "1987-07-23",
          "1987-07-22",
          "1987-07-21",
          "1987-07-20",
          "1987-07-19",
          "1987-07-18",
          "1987-07-17",
          "1987-07-16",
          "1987-07-15",
          "1987-07-14",
          "1987-07-13",
          "1987-07-12",
          "1987-07-11",
          "1987-07-10",
          "1987-07-09",
          "1987-07-08",
          "1987-07-07",
          "1987-07-06",
          "1987-07-05",
          "1987-07-04",
          "1987-07-03",
          "1987-07-02",
          "1987-07-01",
          "1987-06-30",
          "1987-06-29",
          "1987-06-28",
          "1987-06-27",
          "1987-06-26",
          "1987-06-25",
          "1987-06-24",
          "1987-06-23",
          "1987-06-22",
          "1987-06-21",
          "1987-06-20",
          "1987-06-19",
          "1987-06-18",
          "1987-06-17"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0.1,
          0.15,
          0.2,
          0.2,
          0.25,
          0.3,
          0.1,
          0.15,
          0.15,
          0.2,
          0.2,
          0.25,
          0.1,
          0.1,
          0.1,
          0.1,
          0.15,
          0.25,
          0.25,
          0.3,
          0.3,
          0.35,
          0.35,
          0.35,
          0.15,
          0.2,
          0.2,
          0.25,
          0.25,
          0.3,
          0.2,
          0.3,
          0.3,
          0.3,
          0.4,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those employees who was hired before 2002-06-21, draw a line chart about the change of commission_pct over hire_date , could you list by the X in ascending?",
      "For those employees who was hired before 2002-06-21, show me about the change of commission_pct over hire_date in a line chart, and list in asc by the x-axis.",
      "For those employees who was hired before 2002-06-21, a line chart shows the change of commission_pct over hire_date, and I want to display in asc by the x-axis."
    ],
    "irrelevant_tables": [
      "departments",
      "countries"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1802@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "FIRST_NAME",
      "y_name": "COUNT(FIRST_NAME)",
      "x_data": [
        [
          "William",
          "Payam",
          "Adam"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY FIRST_NAME",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart, list by the y-axis in desc.",
      "For employees with first names that end with the letter m, groups and count the first name to visualize a bar graph, show from high to low by the total number."
    ],
    "irrelevant_tables": [
      "jobs",
      "job_history"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1835@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC"
    },
    "chart": "Line",
    "hardness": "Hard",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "SALARY",
      "x_data": [
        [
          "1987-06-17",
          "1987-06-18",
          "1987-06-19",
          "1987-06-20",
          "1987-06-21",
          "1987-06-22",
          "1987-06-23",
          "1987-06-24",
          "1987-06-25",
          "1987-06-26",
          "1987-06-27",
          "1987-06-30",
          "1987-07-01",
          "1987-07-02",
          "1987-07-03",
          "1987-07-04",
          "1987-07-05",
          "1987-07-06",
          "1987-07-10",
          "1987-07-11",
          "1987-07-12",
          "1987-07-13",
          "1987-07-15",
          "1987-07-16",
          "1987-07-19",
          "1987-07-20",
          "1987-07-22",
          "1987-07-23",
          "1987-07-24",
          "1987-07-25",
          "1987-07-26",
          "1987-07-27",
          "1987-07-28",
          "1987-07-29",
          "1987-07-30",
          "1987-07-31",
          "1987-08-01",
          "1987-08-02",
          "1987-08-03",
          "1987-08-04",
          "1987-08-05",
          "1987-08-06",
          "1987-08-07",
          "1987-08-08",
          "1987-08-09",
          "1987-08-10",
          "1987-08-11",
          "1987-08-12",
          "1987-08-13",
          "1987-08-14",
          "1987-08-15",
          "1987-08-16",
          "1987-08-17",
          "1987-08-18",
          "1987-08-19",
          "1987-08-21",
          "1987-08-22",
          "1987-08-24",
          "1987-08-25",
          "1987-08-26",
          "1987-08-28",
          "1987-08-29",
          "1987-08-30",
          "1987-08-31",
          "1987-09-01",
          "1987-09-02",
          "1987-09-04",
          "1987-09-05",
          "1987-09-06",
          "1987-09-08",
          "1987-09-09",
          "1987-09-10",
          "1987-09-11",
          "1987-09-12",
          "1987-09-13",
          "1987-09-14",
          "1987-09-16",
          "1987-09-17",
          "1987-09-18",
          "1987-09-20",
          "1987-09-21",
          "1987-09-22",
          "1987-09-23",
          "1987-09-24",
          "1987-09-25",
          "1987-09-27",
          "1987-09-28",
          "1987-09-30"
        ]
      ],
      "y_data": [
        [
          24000,
          17000,
          17000,
          9000,
          6000,
          4800,
          4800,
          4200,
          12000,
          9000,
          8200,
          6900,
          11000,
          3100,
          2900,
          2800,
          2600,
          2500,
          6500,
          5800,
          3200,
          2700,
          2200,
          3300,
          2100,
          3300,
          2400,
          2200,
          3600,
          3200,
          2700,
          2500,
          3500,
          3100,
          2600,
          2500,
          14000,
          13500,
          12000,
          11000,
          10500,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10500,
          9500,
          6800,
          6400,
          11500,
          10000,
          9600,
          7300,
          6100,
          11000,
          8800,
          8600,
          8400,
          6200,
          3200,
          3100,
          2800,
          4200,
          4100,
          3400,
          3000,
          3800,
          3600,
          2500,
          4000,
          3900,
          2800,
          3100,
          3000,
          2600,
          2600,
          4400,
          6000,
          6500,
          12000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those employees whose first name does not contain the letter M, give me a line chart to show the hire date and the corresponding salaries, show in asc by the x-axis please.",
      "For employees without the letter M in their first name, give me a line chart to show the salary change over their hire date using a line chart, and sort by the HIRE_DATE in asc.",
      "For those employees whose first name does not contain the letter M, give me a line chart to show the hire date and the corresponding salaries, and sort x-axis in asc order."
    ],
    "irrelevant_tables": [
      "departments",
      "regions"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1869@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT HIRE_DATE , SALARY FROM employees ORDER BY HIRE_DATE ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees ORDER BY HIRE_DATE ASC"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "hr_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "HIRE_DATE",
      "y_name": "SALARY",
      "x_data": [
        [
          "1987-06-17",
          "1987-06-18",
          "1987-06-19",
          "1987-06-20",
          "1987-06-21",
          "1987-06-22",
          "1987-06-23",
          "1987-06-24",
          "1987-06-25",
          "1987-06-26",
          "1987-06-27",
          "1987-06-28",
          "1987-06-29",
          "1987-06-30",
          "1987-07-01",
          "1987-07-02",
          "1987-07-03",
          "1987-07-04",
          "1987-07-05",
          "1987-07-06",
          "1987-07-07",
          "1987-07-08",
          "1987-07-09",
          "1987-07-10",
          "1987-07-11",
          "1987-07-12",
          "1987-07-13",
          "1987-07-14",
          "1987-07-15",
          "1987-07-16",
          "1987-07-17",
          "1987-07-18",
          "1987-07-19",
          "1987-07-20",
          "1987-07-21",
          "1987-07-22",
          "1987-07-23",
          "1987-07-24",
          "1987-07-25",
          "1987-07-26",
          "1987-07-27",
          "1987-07-28",
          "1987-07-29",
          "1987-07-30",
          "1987-07-31",
          "1987-08-01",
          "1987-08-02",
          "1987-08-03",
          "1987-08-04",
          "1987-08-05",
          "1987-08-06",
          "1987-08-07",
          "1987-08-08",
          "1987-08-09",
          "1987-08-10",
          "1987-08-11",
          "1987-08-12",
          "1987-08-13",
          "1987-08-14",
          "1987-08-15",
          "1987-08-16",
          "1987-08-17",
          "1987-08-18",
          "1987-08-19",
          "1987-08-20",
          "1987-08-21",
          "1987-08-22",
          "1987-08-23",
          "1987-08-24",
          "1987-08-25",
          "1987-08-26",
          "1987-08-27",
          "1987-08-28",
          "1987-08-29",
          "1987-08-30",
          "1987-08-31",
          "1987-09-01",
          "1987-09-02",
          "1987-09-03",
          "1987-09-04",
          "1987-09-05",
          "1987-09-06",
          "1987-09-07",
          "1987-09-08",
          "1987-09-09",
          "1987-09-10",
          "1987-09-11",
          "1987-09-12",
          "1987-09-13",
          "1987-09-14",
          "1987-09-15",
          "1987-09-16",
          "1987-09-17",
          "1987-09-18",
          "1987-09-19",
          "1987-09-20",
          "1987-09-21",
          "1987-09-22",
          "1987-09-23",
          "1987-09-24",
          "1987-09-25",
          "1987-09-26",
          "1987-09-27",
          "1987-09-28",
          "1987-09-29",
          "1987-09-30",
          "1987-10-01"
        ]
      ],
      "y_data": [
        [
          24000,
          17000,
          17000,
          9000,
          6000,
          4800,
          4800,
          4200,
          12000,
          9000,
          8200,
          7700,
          7800,
          6900,
          11000,
          3100,
          2900,
          2800,
          2600,
          2500,
          8000,
          8200,
          7900,
          6500,
          5800,
          3200,
          2700,
          2400,
          2200,
          3300,
          2800,
          2500,
          2100,
          3300,
          2900,
          2400,
          2200,
          3600,
          3200,
          2700,
          2500,
          3500,
          3100,
          2600,
          2500,
          14000,
          13500,
          12000,
          11000,
          10500,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10000,
          9500,
          9000,
          8000,
          7500,
          7000,
          10500,
          9500,
          7200,
          6800,
          6400,
          6200,
          11500,
          10000,
          9600,
          7400,
          7300,
          6100,
          11000,
          8800,
          8600,
          8400,
          7000,
          6200,
          3200,
          3100,
          2500,
          2800,
          4200,
          4100,
          3400,
          3000,
          3800,
          3600,
          2900,
          2500,
          4000,
          3900,
          3200,
          2800,
          3100,
          3000,
          2600,
          2600,
          4400,
          13000,
          6000,
          6500,
          10000,
          12000,
          8300
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Please tell the salary of each hire date using a line chart, I want to list x-axis in ascending order.",
      "Line chart, the X is the hire date of employees and the Y-axis is the corresponding salary, and order x axis in asc order please.",
      "Show the trend about salary change over hire date using a line chart, and I want to order x axis in ascending order."
    ],
    "irrelevant_tables": [
      "regions",
      "departments"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "733@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Template_Type_Code",
      "y_name": "COUNT(Template_Type_Code)",
      "x_data": [
        [
          "PP",
          "BK",
          "PPT",
          "AD",
          "CV"
        ]
      ],
      "y_data": [
        [
          6,
          6,
          3,
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Template_Type_Code",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return a bar chart showing the number of templates for each template type code, and could you display in descending by the total number?",
      "How many templates for each template type code? Show a bar chart, rank by the the number of template type code in desc."
    ],
    "irrelevant_tables": [
      "Paragraphs",
      "Ref_Template_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "753@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Template_Type_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "PPT",
          "PP",
          "CV",
          "BK",
          "AD"
        ]
      ],
      "y_data": [
        [
          3,
          6,
          2,
          6,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for what are the different template type codes, and how many templates correspond to each?, and could you show in desc by the x axis?",
      "Show all template type codes and number of templates for each Visualize by bar chart, order X-axis in descending order.",
      "Return a bar chart on what are the different template type codes, and how many templates correspond to each?, and list by the Template_Type_Code in descending."
    ],
    "irrelevant_tables": [
      "Ref_Template_Types",
      "Paragraphs"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "754@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Template_Type_Code",
      "y_name": "COUNT(Template_Type_Code)",
      "x_data": [
        [
          "CV",
          "PPT",
          "BK",
          "PP",
          "AD"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Template_Type_Code",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code, and order y-axis in ascending order.",
      "How many templates with version number later than 5 for each template type code? Show me a bar chart, I want to rank in ascending by the Y."
    ],
    "irrelevant_tables": [
      "Documents",
      "Paragraphs"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "763@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Template_Mgt",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Description",
      "y_name": "COUNT(Document_Description)",
      "x_data": [
        [
          "b",
          "f",
          "k",
          "n",
          "r",
          "u",
          "z",
          "h",
          "w",
          "y"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Document_Description",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis document description y axis how many document description, and display in ascending by the total number.",
      "List the number of documents for each document description in a bar chart, display the number of document description in asc order.",
      "How many documents for each document description? Show me a bar chart, list total number in ascending order."
    ],
    "irrelevant_tables": [
      "Paragraphs",
      "Templates"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2625@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "program_share",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Owner",
      "y_name": "sum(Rating_in_percent)",
      "x_data": [
        [
          "Anhui Television",
          "CCTV",
          "HBS",
          "Shandong Television"
        ]
      ],
      "y_data": [
        [
          0.2,
          2.43,
          0.53,
          0.19
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the total rating of channel for each channel owner Plot them as bar chart, rank x axis in ascending order.",
      "Draw a bar chart of owner versus total number of rating in percent, and display in ascending by the X.",
      "Show me a bar chart for what is the total rating of channel for each channel owner?, and display in ascending by the X.",
      "Find the total rating ratio for each channel owner Visualize by bar chart, could you show X-axis in ascending order please?"
    ],
    "irrelevant_tables": [
      "broadcast",
      "program"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "619@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "min(salary)",
      "x_data": [
        [
          "Accounting",
          "Astronomy",
          "Athletics",
          "Biology",
          "Comp. Sci.",
          "Cybernetics",
          "Elec. Eng.",
          "English",
          "Finance",
          "Geology",
          "Languages",
          "Marketing",
          "Mech. Eng.",
          "Physics",
          "Pol. Sci.",
          "Psychology",
          "Statistics"
        ]
      ],
      "y_data": [
        [
          32241.56,
          79070.08,
          50482.03,
          45538.32,
          80797.83,
          79866.95,
          34272.67,
          35023.18,
          105311.38,
          99382.59,
          32570.5,
          43770.36,
          51647.57,
          108011.81,
          87549.8,
          59706.49,
          45310.53
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart of minimal salary from each dept name, order dept_name in ascending order please."
    ],
    "irrelevant_tables": [
      "teaches",
      "department"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "620@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "count(*)",
      "x_data": [
        [
          "Garfield",
          "Gates",
          "Lambeau",
          "Nassau",
          "Painter",
          "Rathbone",
          "Saucon",
          "Stabler",
          "Taylor",
          "Whitman"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many rooms in each building have a capacity of over 50 Visualize by bar chart, list by the X in ascending."
    ],
    "irrelevant_tables": [
      "teaches",
      "section"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "621@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "sum(credits)",
      "x_data": [
        [
          "Marketing",
          "Statistics",
          "Biology",
          "Pol. Sci.",
          "Elec. Eng.",
          "English",
          "History",
          "Athletics",
          "Geology",
          "Civil Eng.",
          "Math",
          "Astronomy",
          "Comp. Sci.",
          "Languages",
          "Physics",
          "Accounting",
          "Mech. Eng.",
          "Psychology",
          "Finance",
          "Cybernetics"
        ]
      ],
      "y_data": [
        [
          20,
          21,
          23,
          23,
          28,
          28,
          29,
          30,
          33,
          34,
          34,
          37,
          37,
          37,
          38,
          40,
          40,
          44,
          49,
          67
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart for how many total credits are offered by each department?, sort by the total number of credits from low to high.",
      "Draw a bar chart for how many total credits are offered by each department?, sort by the total number of credits from low to high.",
      "Bar chart of total number of credits from each dept name, and sort in asc by the total number of credits.",
      "How many total credits are offered by each department Show bar chart, I want to display Y in ascending order.",
      "Find the total credits of courses provided by different department Plot them as bar chart, and display Y in asc order."
    ],
    "irrelevant_tables": [
      "instructor",
      "section"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "624@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "avg(capacity)",
      "x_data": [
        [
          "Lamberton",
          "Chandler",
          "Power",
          "Bronfman",
          "Drown",
          "Main",
          "Fairchild",
          "Polya",
          "Grace",
          "Alumni",
          "Gates",
          "Saucon",
          "Lambeau",
          "Garfield",
          "Rathbone",
          "Whitman",
          "Nassau",
          "Taylor",
          "Painter",
          "Stabler"
        ]
      ],
      "y_data": [
        [
          10,
          10.5,
          11,
          12,
          18,
          26,
          27,
          28,
          34,
          36.5,
          37.5,
          49.33333333333334,
          51,
          59,
          60,
          76,
          92,
          93,
          97,
          113
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the average capacity for rooms in each building? Draw a bar chart, and sort in asc by the Y.",
      "Find the average capacity among rooms in each building with a bar chart, and order in ascending by the y axis please.",
      "Bar chart x axis building y axis the average of capacity, and order in ascending by the y axis please."
    ],
    "irrelevant_tables": [
      "course",
      "teaches"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "627@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "AVG(salary)",
      "x_data": [
        [
          "Physics",
          "Finance",
          "Pol. Sci.",
          "Geology",
          "Comp. Sci.",
          "Cybernetics",
          "Marketing",
          "Mech. Eng.",
          "Astronomy",
          "Athletics",
          "Elec. Eng.",
          "English",
          "Statistics",
          "Biology",
          "Psychology",
          "Languages",
          "Accounting"
        ]
      ],
      "y_data": [
        [
          114576.9,
          105311.38,
          100053.07333333332,
          99382.59,
          98133.47,
          96346.5675,
          84097.4375,
          79813.02,
          79070.08,
          77098.198,
          74162.73999999999,
          72089.04999999999,
          67795.44166666667,
          61287.25,
          61143.05,
          57421.85666666667,
          48716.5925
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart of mean salary from each dept name, and could you order by the Y-axis from high to low?"
    ],
    "irrelevant_tables": [
      "classroom",
      "course"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "640@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year , count(Distinct course_id) FROM SECTION GROUP BY year ORDER BY year ASC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year , count(Distinct course_id) FROM SECTION GROUP BY year ORDER BY year ASC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "count(Distinct course_id)",
      "x_data": [
        [
          "2001",
          "2002",
          "2003",
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2010"
        ]
      ],
      "y_data": [
        [
          5,
          13,
          12,
          7,
          8,
          13,
          12,
          9,
          9,
          11
        ]
      ],
      "classify": [],
      "describe": "GROUP BY year",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of different courses provided in each year with a line chart, and sort in asc by the year.",
      "How many different courses are provided in each year? Visualize a line chart, and I want to list x-axis in ascending order please."
    ],
    "irrelevant_tables": [
      "takes",
      "student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "642@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year , count(*) FROM SECTION ORDER BY year DESC",
        "binning": "BIN year BY YEAR"
      },
      "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION ORDER BY year DESC BIN year BY YEAR"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "count(*)",
      "x_data": [
        [
          "2010",
          "2009",
          "2008",
          "2007",
          "2006",
          "2005",
          "2004",
          "2003",
          "2002",
          "2001"
        ]
      ],
      "y_data": [
        [
          11,
          9,
          10,
          12,
          13,
          8,
          7,
          12,
          13,
          5
        ]
      ],
      "classify": [],
      "describe": "BIN year BY YEAR",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Plot year by count the total number as a trend line, note that binning year and display x axis in desc order please.",
      "Find the number of courses provided in each year with a line chart, and show by the year in desc.",
      "How many courses are provided in each year? Visualize with a line chart, sort in descending by the x axis."
    ],
    "irrelevant_tables": [
      "instructor",
      "department"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "647@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC"
    },
    "chart": "Grouping Line",
    "hardness": "Hard",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "count(*)",
      "x_data": [
        [
          "2010",
          "2009",
          "2008",
          "2007",
          "2006",
          "2005",
          "2004",
          "2003",
          "2002",
          "2001"
        ]
      ],
      "y_data": [
        [
          5,
          7,
          1,
          6,
          8,
          4,
          3,
          6,
          9,
          2
        ],
        [
          6,
          2,
          9,
          6,
          5,
          4,
          4,
          6,
          4,
          3
        ]
      ],
      "classify": [
        "Fall",
        "Spring"
      ],
      "describe": "GROUP BY semester, GROUP BY year",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many courses are provided in each year? Visualize with a group line chart grouping by semester, could you list x axis in asc order?"
    ],
    "irrelevant_tables": [
      "course",
      "prereq"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "648@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year , count(*) FROM SECTION GROUP BY semester ORDER BY year ASC",
        "binning": "BIN year BY YEAR"
      },
      "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ORDER BY year ASC BIN year BY YEAR"
    },
    "chart": "Grouping Line",
    "hardness": "Extra Hard",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "count(*)",
      "x_data": [
        [
          "2001",
          "2002",
          "2003",
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2010"
        ]
      ],
      "y_data": [
        [
          2,
          9,
          6,
          3,
          4,
          8,
          6,
          1,
          7,
          5
        ],
        [
          3,
          4,
          6,
          4,
          4,
          5,
          6,
          9,
          2,
          6
        ]
      ],
      "classify": [
        "Fall",
        "Spring"
      ],
      "describe": "GROUP BY semester, BIN year BY YEAR",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of courses provided in each year with a group line chart that groups by semester, list the binning year in asc order.",
      "How many courses are provided in each year? binning by year and create a line chart grouping by semester, and sort in ascending by the X-axis."
    ],
    "irrelevant_tables": [
      "instructor",
      "prereq"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "654@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "count(*)",
      "x_data": [
        [
          "Statistics",
          "Psychology",
          "Pol. Sci.",
          "Physics",
          "Mech. Eng.",
          "Math",
          "Marketing",
          "Languages",
          "History",
          "Geology",
          "Finance",
          "English",
          "Elec. Eng.",
          "Cybernetics",
          "Comp. Sci.",
          "Civil Eng.",
          "Biology",
          "Athletics",
          "Astronomy",
          "Accounting"
        ]
      ],
      "y_data": [
        [
          85,
          100,
          109,
          96,
          105,
          91,
          85,
          119,
          117,
          92,
          97,
          95,
          98,
          86,
          108,
          120,
          100,
          92,
          106,
          99
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the total number of students in each department Show bar chart, and rank x-axis in desc order.",
      "How many students are in each department Plot them as bar chart, rank x-axis in desc order.",
      "Visualize a bar chart for how many students are in each department?, and show in descending by the names.",
      "Give me a bar chart for the total number of each dept name, and rank x-axis in desc order."
    ],
    "irrelevant_tables": [
      "takes",
      "time_slot"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "655@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department) ORDER BY dept_name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department) ORDER BY dept_name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "dept_name",
      "y_name": "budget",
      "x_data": [
        [
          "Psychology",
          "Pol. Sci.",
          "Physics",
          "Math",
          "Languages",
          "History",
          "Finance",
          "English",
          "Cybernetics",
          "Biology",
          "Athletics",
          "Astronomy"
        ]
      ],
      "y_data": [
        [
          848175.04,
          573745.09,
          942162.76,
          777605.11,
          601283.6,
          699140.86,
          866831.75,
          611042.66,
          794541.46,
          647610.55,
          734550.7,
          617253.94
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the name and budget of departments whose budgets are more than the average budget Visualize by bar chart, and display names in descending order."
    ],
    "irrelevant_tables": [
      "instructor",
      "teaches"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "657@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "building",
      "y_name": "COUNT(building)",
      "x_data": [
        [
          "Brodhead",
          "Bronfman",
          "Linderman",
          "Mercer",
          "Palmer",
          "Thompson",
          "Whitman",
          "Wrigley",
          "Candlestick",
          "Taylor"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY building",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many departments whose budget is more than the average budget in each building? Show me a bar chart, list by the total number in asc.",
      "Give the number of departments with greater than average budget in each building with a bar chart, and order the number of building from low to high order."
    ],
    "irrelevant_tables": [
      "teaches",
      "advisor"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "380@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "AVG(Height)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          197.5,
          195.14285714285714
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Sex",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, display in asc by the X-axis.",
      "Visualize a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, list in asc by the X.",
      "Draw a bar chart of sex versus mean height, and display in asc by the X-axis.",
      "Return a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, show in asc by the Sex please.",
      "Show me about the distribution of Sex and the average of Height , and group by attribute Sex in a bar chart, and show in asc by the Sex please."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "383@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "AVG(Weight)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          92,
          86.71428571428571
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Sex",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me the comparison about the average of Weight over the Sex , and group by attribute Sex by a bar chart, I want to sort X in ascending order.",
      "Return a bar chart about the distribution of Sex and the average of Weight , and group by attribute Sex, show names in ascending order.",
      "A bar chart shows the distribution of Sex and the average of Weight , and group by attribute Sex, and could you show in ascending by the X-axis?"
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "394@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Height FROM people ORDER BY Height DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Height",
      "x_data": [
        [
          "Laurent Capet",
          "St\u00e9phane Antiga",
          "Dominique Daquin",
          "Vincent Montm\u00e9at",
          "Guillaume Samica",
          "Frantz Granvorka",
          "Philippe Bar\u00e7a-Cysique",
          "Lo\u00efc De Kergret",
          "Hubert Henno"
        ]
      ],
      "y_data": [
        [
          202,
          200,
          197,
          196,
          196,
          195,
          194,
          193,
          188
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Give me the comparison about Height over the Name by a bar chart, and could you rank y-axis in desc order please?",
      "Find Name and Height , and visualize them by a bar chart, and order by the y axis in desc.",
      "A bar chart shows the distribution of Name and Height , and I want to show by the y axis in descending.",
      "Draw a bar chart of name versus height, order by the y axis in desc.",
      "Draw a bar chart about the distribution of Name and Height , and rank y-axis in descending order.",
      "Return a bar chart about the distribution of Name and Height , and show Y-axis in descending order."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "395@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Weight FROM people ORDER BY Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Weight",
      "x_data": [
        [
          "Dominique Daquin",
          "Frantz Granvorka",
          "Guillaume Samica",
          "Hubert Henno",
          "Laurent Capet",
          "Lo\u00efc De Kergret",
          "Philippe Bar\u00e7a-Cysique",
          "St\u00e9phane Antiga",
          "Vincent Montm\u00e9at"
        ]
      ],
      "y_data": [
        [
          85,
          90,
          82,
          83,
          92,
          89,
          88,
          94,
          88
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me about the distribution of Name and Weight in a bar chart, and list in ascending by the x axis."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "406@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY Sex ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "candidate_poll",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "min(weight)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          90,
          82
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me the minimal weight by sex in a bar, sort the x in asc order."
    ],
    "irrelevant_tables": [
      "candidate"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "726@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY COUNT(receipt_date) DESC",
        "binning": "BIN receipt_date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY COUNT(receipt_date) DESC BIN receipt_date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Control_Systems",
    "vis_obj": {
      "chart": "bar",
      "x_name": "receipt_date",
      "y_name": "COUNT(receipt_date)",
      "x_data": [
        [
          "Mon",
          "Fri",
          "Wed",
          "Sun",
          "Sat",
          "Tue",
          "Thur"
        ]
      ],
      "y_data": [
        [
          4,
          3,
          2,
          2,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN receipt_date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the number of documents for each receipt date and bin by weekday in a bar chart, sort y axis from high to low order.",
      "Bar chart of the frequency from each receipt date, bin date by weekday, order y in desc order."
    ],
    "irrelevant_tables": [
      "Documents_Mailed",
      "Ref_Document_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3208@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding) ORDER BY Name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding) ORDER BY Name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Age",
      "x_data": [
        [
          "Graeme McDowell",
          "Adam Scott"
        ]
      ],
      "y_data": [
        [
          34,
          26
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the name and age for all male people who don't have a wedding with a bar chart, and list by the x axis in descending please."
    ],
    "irrelevant_tables": [
      "church"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3210@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date ORDER BY Open_Date DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date ORDER BY Open_Date DESC"
    },
    "chart": "Line",
    "hardness": "Easy",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "line",
      "x_name": "Open_Date",
      "y_name": "COUNT(Open_Date)",
      "x_data": [
        [
          "1844",
          "1843",
          "1842",
          "1841",
          "1840",
          "1839",
          "1838",
          "1837",
          "1836",
          "1835",
          "1834",
          "1833",
          "1832",
          "1831",
          "1830"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN Open_Date BY TIME",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a line chart of how the number of open date change over the open date, list by the Open_Date in asc please."
    ],
    "irrelevant_tables": [
      "wedding",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "3214@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "United States",
          "Australia"
        ]
      ],
      "y_data": [
        [
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about the number of countries for all people whose age is smaller than the average, and could you display in desc by the X-axis?"
    ],
    "irrelevant_tables": [
      "church",
      "wedding"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3216@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "count(*)",
      "x_data": [
        [
          "Australia",
          "Canada",
          "Northern Ireland",
          "Sweden",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for the total number of each country, could you order from low to high by the the total number ?",
      "Show all countries and the number of people from each country with a bar chart, order y axis from low to high order."
    ],
    "irrelevant_tables": [
      "wedding",
      "church"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3218@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY Open_Date DESC",
        "binning": "BIN Open_Date BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY Open_Date DESC BIN Open_Date BY YEAR"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "wedding",
    "vis_obj": {
      "chart": "line",
      "x_name": "Open_Date",
      "y_name": "COUNT(Open_Date)",
      "x_data": [
        [
          "1844",
          "1843",
          "1842",
          "1841",
          "1840",
          "1839",
          "1838",
          "1837",
          "1836",
          "1835",
          "1834",
          "1833",
          "1832",
          "1831",
          "1830"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN Open_Date BY YEAR",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a line chart that bins the open date into the Year interval and counts them, and could you sort X-axis in descending order?",
      "Please show the trend of the number of the church by open date (bin into the year) using a line chart, and display by the x-axis in descending please."
    ],
    "irrelevant_tables": [
      "wedding",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2066@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "loan_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "cust_name",
      "y_name": "acc_bal",
      "x_data": [
        [
          "Mary",
          "Jack"
        ]
      ],
      "y_data": [
        [
          2000,
          1000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the name and account balance of the customer whose name includes the letter 'a' Visualize them using a bar chart, show y-axis in descending order.",
      "Can you compare the account balances of customers with the letter 'a' in their names using a bar graph, and list in desc by the y axis.",
      "Visualize a bar chart for what are the names and account balances of customers with the letter 'a' in their names?, could you sort from high to low by the y axis?"
    ],
    "irrelevant_tables": [
      "loan",
      "bank"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2655@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Builder",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Avonside",
          "GER Hartford",
          "GER Stratford",
          "GNR Doncaster",
          "GWR Swindon",
          "MR Derby",
          "SECR Ashford",
          "Stephenson",
          "Swindon Works"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different builders of railways, along with the corresponding number of railways using each builder by a bar chart, and order x-axis in ascending order.",
      "Show different builders of railways, along with the corresponding number of railways using each builder Show bar chart, and display x-axis in asc order."
    ],
    "irrelevant_tables": [
      "train",
      "manager"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2658@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "Ballarshah-Mumbai Pass",
          "Kazipet-Nagpur Pass",
          "Lucknow-Chennai Exp",
          "Nagpur-Kazipet Pass",
          "Nandigram Exp",
          "Sewagram Exp",
          "Wardha-Ballarshah Pass",
          "Andaman Exp"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many trains in each name category, give me the result with a bar chart, and could you show from low to high by the the number of name?",
      "Compare the total number of trains in each name by a bar graph, sort by the total number in ascending.",
      "Give me a bar chart for how many name of each name, and could you sort by the y-axis in ascending?"
    ],
    "irrelevant_tables": [
      "railway",
      "railway_manage"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2659@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "railway",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Arrival",
      "y_name": "COUNT(Arrival)",
      "x_data": [
        [
          "05:09",
          "08:54",
          "09:08",
          "09:48",
          "13:04",
          "13:28",
          "23:39",
          "23:44"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Arrival",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart, the x-axis is the arrival time, and the y-axis is the total number of trains in each arrival time, and sort x-axis in asc order.",
      "Create a bar chart showing how many arrival across arrival, sort x-axis in asc order."
    ],
    "irrelevant_tables": [
      "railway_manage",
      "manager"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "679@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarters",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Brazil",
          "China",
          "France",
          "Germany",
          "Netherlands",
          "Russia",
          "UK",
          "USA"
        ]
      ],
      "y_data": [
        [
          1,
          4,
          1,
          1,
          1,
          1,
          2,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the different headquarters and number of companies at each headquarterin a bar chart, and could you list in ascending by the X please?"
    ],
    "irrelevant_tables": [
      "people",
      "employment"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "680@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Industry ,  Headquarters ORDER BY COUNT(Headquarters) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Industry ,  Headquarters ORDER BY COUNT(Headquarters) DESC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Headquarters",
      "y_name": "COUNT(Headquarters)",
      "x_data": [
        [
          "USA",
          "China",
          "UK",
          "Russia",
          "Netherlands",
          "Germany",
          "France",
          "Brazil"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          3,
          3,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          1,
          1,
          1,
          1,
          0,
          1,
          1
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [
        "Automotive",
        "Banking",
        "Conglomerate",
        "Oil and gas",
        "Retailing"
      ],
      "describe": "GROUP BY Industry, GROUP BY Headquarters",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Stack bar chart of the number of headquarters vs Industry based on headquarters, display Y-axis in desc order please.",
      "How many companies are there in each headquarters? Return a stacked bar chart to group by industry and headquearters, and count by headquarters, and could you show in desc by the how many headquarters?"
    ],
    "irrelevant_tables": [
      "employment",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": true
      },
      {
        "channel_specified": [],
        "sort_by": "field",
        "stacked_bar": true
      }
    ]
  },
  "682@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "company_employee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Industry",
      "y_name": "COUNT(Industry)",
      "x_data": [
        [
          "Automotive",
          "Banking",
          "Conglomerate",
          "Oil and gas",
          "Retailing"
        ]
      ],
      "y_data": [
        [
          1,
          7,
          2,
          8,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Industry",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis industry y axis the number of industry, could you list in ascending by the X-axis?"
    ],
    "irrelevant_tables": [
      "employment",
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2494@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "orchestra",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Record_Company",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "RCA",
          "Philips Classics Records",
          "Philips",
          "Mercury Records",
          "Kultur",
          "Koch Records / Naxos Records",
          "EMI",
          "Deutsche Grammophon",
          "Delos Records",
          "Decca Records",
          "Columbia Masterworks"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for how many orchestras does each record company manage?, could you list by the x-axis in desc please?"
    ],
    "irrelevant_tables": [
      "conductor",
      "show"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "415@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "avg(Weight)",
      "x_data": [
        [
          "1982",
          "1981",
          "1980",
          "1979",
          "1978",
          "1977",
          "1976",
          "1975",
          "1974",
          "1973",
          "1972",
          "1971",
          "1970"
        ]
      ],
      "y_data": [
        [
          2453.548387096774,
          2532.1666666666665,
          2436.655172413793,
          3055.3448275862074,
          2861.805555555556,
          2997.357142857143,
          3078.7352941176473,
          3176.8,
          2877.925925925926,
          3419.025,
          3237.714285714286,
          2960.3448275862074,
          3441.3142857142852
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a line chart for what is the average weight and year for each year?, and rank x-axis in asc order.",
      "Show me a line chart of how mean weight change over the year, and I want to display in asc by the Year.",
      "Visualize a line chart for what is the average weight of cars each year?, rank in asc by the X.",
      "What is the average weight and year for each year Plot them as line chart, I want to display in asc by the Year."
    ],
    "irrelevant_tables": [
      "car_makers",
      "model_list"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1032@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "transaction_type",
      "y_name": "count(*)",
      "x_data": [
        [
          "Refund",
          "Payment"
        ]
      ],
      "y_data": [
        [
          9,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the transaction type and the number of transactions by a bar chart, and display in desc by the y axis.",
      "Show the transaction type and the number of transactions Plot them as bar chart, and could you sort by the y-axis from high to low?",
      "Show me a bar chart for what are the different transaction types, and how many transactions of each have taken place?, and show from high to low by the total number please.",
      "What are the different transaction types, and how many transactions of each have taken place Show bar chart, show from high to low by the Y please.",
      "Draw a bar chart of transaction type versus the total number, and show from high to low by the total number please.",
      "Return a histogram on what are the different transaction types, and how many transactions of each have taken place?, and rank total number from high to low order please."
    ],
    "irrelevant_tables": [
      "Accounts",
      "Customers_Cards"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1043@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_card_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "card_type_code",
      "y_name": "COUNT(card_type_code)",
      "x_data": [
        [
          "Debit",
          "Credit"
        ]
      ],
      "y_data": [
        [
          8,
          7
        ]
      ],
      "classify": [],
      "describe": "GROUP BY card_type_code",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many cards in different card type code? Plot a bar chart, and rank how many card type code in descending order.",
      "Show the number of cards in different card type code in a bar chart, show y axis in descending order.",
      "Show me the number of card type code by card type code in a histogram, and could you order by the total number in descending?"
    ],
    "irrelevant_tables": [
      "Accounts",
      "Financial_Transactions"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2165@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "Eddie Collins",
          "Tony Sewell",
          "Mickey Cochrane",
          "Mark Sewell",
          "Lou Boudreau",
          "Joe Cochrane",
          "Charlie Hollocher"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the name of the technician whose team is not 'NYY', and count them by a bar chart, show by the total number from high to low.",
      "A bar chart for listing the number of the name of technicians whose team is not \"NYY\", order by the y axis in desc please.",
      "List the name of technicians whose team is not \"NYY\", and count them by a bar chart, could you list Y from high to low order?"
    ],
    "irrelevant_tables": [
      "repair",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2169@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "machine_repair",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "CHC",
          "PHA",
          "CWS",
          "NYY",
          "CLE"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different teams of technicians and the number of technicians in each team with a bar chart, and order Y in ascending order.",
      "Create a bar chart showing the total number across team, show the total number in ascending order."
    ],
    "irrelevant_tables": [
      "repair_assignment",
      "machine"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3279@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Team Orton",
          "Team Batista"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different teams in eliminations and the number of eliminations from each team by a bar chart, order by the total number from low to high.",
      "How many eliminations did each team have Visualize by bar chart, and rank by the y-axis in ascending.",
      "Bar graph to show the total number from different team, and could you show in ascending by the y-axis please?",
      "A bar chart about how many eliminations did each team have?, and could you show in ascending by the y-axis please?",
      "Return a bar chart on how many eliminations did each team have?, and rank by the y-axis in ascending.",
      "Show different teams in eliminations and the number of eliminations from each team Visualize by bar chart, and rank from low to high by the the total number ."
    ],
    "irrelevant_tables": [
      "wrestler"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3283@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "wrestler",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team",
      "y_name": "COUNT(Team)",
      "x_data": [
        [
          "Team Orton",
          "Team Batista"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Team",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for what is the number of their teams in elimination?, order in ascending by the y axis please.",
      "What is the number of their teams in elimination? Draw a bar chart, and order in ascending by the y axis please.",
      "Create a bar chart showing how many team across team, display by the y axis in ascending please.",
      "Show the number of teams in elimination in a bar chart, could you display y axis in ascending order?"
    ],
    "irrelevant_tables": [
      "wrestler"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2539@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY COUNT(Location) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY COUNT(Location) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "performance_attendance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Bell Centre",
          "Madison Square Garden",
          "Scotiabank Place",
          "TD Garden",
          "Verizon Center"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Compare the total number of locations in each location using a bar graph, and order by the Y-axis from low to high.",
      "Bar chart x axis location y axis how many location, and order by the Y-axis from low to high."
    ],
    "irrelevant_tables": [
      "member_attendance",
      "member"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1069@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Republican",
          "Independent Democrat",
          "Democratic",
          "Anti-Lecompton Democrat"
        ]
      ],
      "y_data": [
        [
          4,
          1,
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show different parties of people along with the number of people in each party Plot them as bar chart, display by the names in descending.",
      "Bar graph to show the total number from different party, rank by the x-axis in descending."
    ],
    "irrelevant_tables": [
      "debate",
      "debate_people"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1077@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY COUNT(Venue) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY COUNT(Venue) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "debate",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Venue",
      "y_name": "COUNT(Venue)",
      "x_data": [
        [
          "Abu Dhabi , UAE",
          "Doha , Qatar",
          "Dubai , UAE",
          "Manama , Bahrain"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Venue",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart showing how many debates are held for each venue, and I want to show y-axis in asc order.",
      "Bar chart x axis venue y axis how many venue, display y-axis from low to high order."
    ],
    "irrelevant_tables": [
      "people",
      "debate_people"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1298@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC",
        "binning": "BIN date_of_enrolment BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_enrolment",
      "y_name": "COUNT(date_of_enrolment)",
      "x_data": [
        [
          "July",
          "Aug",
          "Nov",
          "Sept",
          "Dec",
          "Oct"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          3,
          3,
          4,
          6
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_enrolment BY MONTH",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the number of enrolment students in each month and bin date of enrolment by month interval with a bar chart, and sort by the y axis from low to high.",
      "How many enrolment students in each month? Return a bar chart binning date of enrolment by month interval, and I want to order in asc by the y-axis."
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1299@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC",
        "binning": "BIN date_of_enrolment BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_enrolment",
      "y_name": "COUNT(date_of_enrolment)",
      "x_data": [
        [
          "Thur",
          "Mon",
          "Wed",
          "Sun",
          "Sat",
          "Tue",
          "Fri"
        ]
      ],
      "y_data": [
        [
          5,
          4,
          3,
          3,
          3,
          2,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_enrolment BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many enrolment students in each day? Return a bar chart binning date of enrolment by weekday, rank the number of date of enrolment from high to low order.",
      "List the number of enrolment students in each day and bin date of enrolment by weekday with a bar chart, and could you show Y-axis in descending order?"
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Students"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1300@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment GROUP BY date_of_completion ORDER BY date_of_completion DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment GROUP BY date_of_completion ORDER BY date_of_completion DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "e_learning",
    "vis_obj": {
      "chart": "line",
      "x_name": "date_of_completion",
      "y_name": "COUNT(date_of_completion)",
      "x_data": [
        [
          "2018-03-22",
          "2018-03-19",
          "2018-03-18",
          "2018-03-16",
          "2018-03-14",
          "2018-03-10",
          "2018-03-09",
          "2018-03-07",
          "2018-03-06",
          "2018-03-04",
          "2018-03-02",
          "2018-03-01",
          "2018-02-28",
          "2018-02-27",
          "2018-02-26"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          2,
          1,
          2,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date_of_completion",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many completion students in each day? Return a line chart grouping by date of completion, and order by the X-axis in ascending please."
    ],
    "irrelevant_tables": [
      "Student_Tests_Taken",
      "Course_Authors_and_Tutors"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "769@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location_Code",
      "y_name": "COUNT(Location_Code)",
      "x_data": [
        [
          "x",
          "n",
          "e",
          "c",
          "b"
        ]
      ],
      "y_data": [
        [
          5,
          1,
          4,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location_Code",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many documents for different location code? Plot a bar chart to show the proportion, and sort in desc by the Location_Code please."
    ],
    "irrelevant_tables": [
      "Ref_Locations",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "772@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC",
        "binning": "BIN Date_in_Location_From BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_in_Location_From",
      "y_name": "COUNT(Date_in_Location_From)",
      "x_data": [
        [
          "Fri",
          "Tue",
          "Mon",
          "Sun",
          "Wed",
          "Thur",
          "Sat"
        ]
      ],
      "y_data": [
        [
          9,
          3,
          2,
          1,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Date_in_Location_From BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of documents in different starting date and bin starting date by weekday interval with a bar chart, and rank y axis in desc order please.",
      "How many documents in different starting date? Return a bar chart binning starting date by weekday interval, I want to sort y-axis in descending order."
    ],
    "irrelevant_tables": [
      "Ref_Locations",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "773@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "line",
      "x_name": "Date_in_Locaton_To",
      "y_name": "COUNT(Date_in_Locaton_To)",
      "x_data": [
        [
          "2017-01-06",
          "2012-07-03",
          "2010-11-26",
          "2009-08-18",
          "2008-06-08",
          "1997-03-10",
          "1995-01-01",
          "1987-11-05",
          "1986-10-14",
          "1976-06-15"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          3,
          1,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Date_in_Locaton_To",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of documents in different ending date and group by ending date with a line chart, and display in asc by the X.",
      "How many documents in different ending date? Return a line chart grouping by ending date, and display in asc by the X."
    ],
    "irrelevant_tables": [
      "Employees",
      "Roles"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "780@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC",
        "binning": "BIN Date_in_Locaton_To BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"
    },
    "chart": "Stacked Bar",
    "hardness": "Extra Hard",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_in_Locaton_To",
      "y_name": "COUNT(Date_in_Locaton_To)",
      "x_data": [
        [
          "Tue",
          "Fri",
          "Thur",
          "Sun",
          "Mon",
          "Wed",
          "Sat"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          4,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [
        "b",
        "c",
        "e",
        "n",
        "x"
      ],
      "describe": "GROUP BY Location_Code, BIN Date_in_Locaton_To BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, could you display in descending by the y axis please?"
    ],
    "irrelevant_tables": [
      "Ref_Locations",
      "Roles"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "782@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Role_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "HR",
          "MG",
          "PT",
          "PR",
          "ED"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          5,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all role codes and the number of employees in each role by a bar chart, show in ascending by the Y-axis please.",
      "Show all role codes and the number of employees in each role Show bar chart, and show from low to high by the y axis.",
      "Bar chart x axis role code y axis the total number, and show in ascending by the Y-axis please.",
      "What is the code of each role and the number of employees in each role Show bar chart, could you sort y axis in ascending order?",
      "Return a histogram on what is the code of each role and the number of employees in each role?, and show in ascending by the Y-axis please.",
      "Give me a histogram for what is the code of each role and the number of employees in each role?, and could you sort y axis in ascending order?"
    ],
    "irrelevant_tables": [
      "Ref_Calendar",
      "Document_Locations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "783@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC",
        "binning": "BIN Calendar_Date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC BIN Calendar_Date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Calendar_Date",
      "y_name": "COUNT(Calendar_Date)",
      "x_data": [
        [
          "Tue",
          "Mon",
          "Fri",
          "Sun",
          "Thur",
          "Wed",
          "Sat"
        ]
      ],
      "y_data": [
        [
          5,
          4,
          3,
          2,
          1,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Calendar_Date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show all calendar dates and bin by weekday in a bar chart, I want to rank y axis in desc order.",
      "What are all the calendar dates? Show a bar chart binning calendar date by weekday, could you display total number in desc order?"
    ],
    "irrelevant_tables": [
      "All_Documents",
      "Documents_to_be_Destroyed"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "791@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Doc_Tracking_DB",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "x",
          "n",
          "e",
          "c",
          "b"
        ]
      ],
      "y_data": [
        [
          5,
          1,
          4,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the location codes and the number of documents in each location Visualize by bar chart, display by the X in descending."
    ],
    "irrelevant_tables": [
      "All_Documents",
      "Ref_Calendar"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1122@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "department_store",
    "vis_obj": {
      "chart": "bar",
      "x_name": "payment_method_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Direct Debit",
          "Credit Card"
        ]
      ],
      "y_data": [
        [
          5,
          10
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart about how many customers use each payment method?, order Y in asc order.",
      "Return a bar chart on how many customers use each payment method?, and could you sort in asc by the Y-axis?",
      "Bar graph to show the total number from different payment method code, and order from low to high by the the total number please."
    ],
    "irrelevant_tables": [
      "Products",
      "Product_Suppliers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1000@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "COUNT(product_name)",
      "x_data": [
        [
          "Apple",
          "jcrew",
          "gucci",
          "Sony"
        ]
      ],
      "y_data": [
        [
          5,
          4,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_name",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the frequency of product names using a bar chart, rank by the Y-axis in desc.",
      "Bar chart x axis product name y axis how many product name, rank by the Y-axis in desc.",
      "Show me a bar chart with the product name and their frequency, and show by the y axis in desc please."
    ],
    "irrelevant_tables": [
      "Order_Items",
      "Customer_Address_History"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1006@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_type_code",
      "y_name": "COUNT(product_type_code)",
      "x_data": [
        [
          "Clothes",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          5,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_type_code",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a bar chart, I want to order by the total number in asc please."
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Contacts"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1009@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_name , COUNT(product_name) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_name ORDER BY COUNT(product_name) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_name ORDER BY COUNT(product_name) DESC"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_name",
      "y_name": "COUNT(product_name)",
      "x_data": [
        [
          "Apple",
          "jcrew",
          "Sony",
          "gucci"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          3,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY product_name",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of products with price higher than 1000 or lower than 500 for each product name in a bar chart, and could you rank y-axis in descending order?"
    ],
    "irrelevant_tables": [
      "Addresses",
      "Customer_Address_History"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1010@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_and_products_contacts",
    "vis_obj": {
      "chart": "bar",
      "x_name": "state_province_county",
      "y_name": "count(*)",
      "x_data": [
        [
          "Virginia",
          "Vermont",
          "SouthDakota",
          "Oregon",
          "Oklahoma",
          "Nevada",
          "Maryland",
          "Maine",
          "Louisiana",
          "Kentucky",
          "Illinois",
          "Idaho",
          "District of Columbia",
          "Colorado"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show each state and the number of addresses in each state Show bar chart, rank X in desc order."
    ],
    "irrelevant_tables": [
      "Customer_Address_History",
      "Products"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1242@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC",
        "binning": "BIN date_of_birth BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_birth",
      "y_name": "COUNT(date_of_birth)",
      "x_data": [
        [
          "Fri",
          "Wed",
          "Sat",
          "Sun",
          "Thur",
          "Tue",
          "Mon"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_birth BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "When are the birthdays of customer who are classified as 'Good Customer' status, bin birthday by weekday and count them by a bar chart, could you order y-axis in ascending order?"
    ],
    "irrelevant_tables": [
      "Customer_Payments",
      "Vehicles"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1245@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "customer_status_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Bad Customer",
          "Good Customer"
        ]
      ],
      "y_data": [
        [
          9,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For each customer status code, how many customers are classified that way Visualize by bar chart, and display in ascending by the customer status code."
    ],
    "irrelevant_tables": [
      "Lessons",
      "Vehicles"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1247@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "driving_school",
    "vis_obj": {
      "chart": "bar",
      "x_name": "payment_method_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Credit Card",
          "Direct Debit"
        ]
      ],
      "y_data": [
        [
          5,
          10
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List all payment methods and number of payments using each payment methods Plot them as bar chart, display names in ascending order please.",
      "For each payment method, how many payments were made Show bar chart, and rank in asc by the x-axis please."
    ],
    "irrelevant_tables": [
      "Vehicles",
      "Staff"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2704@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County",
      "y_name": "count(*)",
      "x_data": [
        [
          "50 Marshall",
          "71 St. Joseph",
          "75 Starke",
          "46 LaPorte 71 St. Joseph",
          "20 Elkhart"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of county versus the total number, show by the y axis in desc.",
      "Return a bar chart showing the number of schools in each county, and rank y axis from high to low order please."
    ],
    "irrelevant_tables": [
      "budget",
      "endowment"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2706@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY sum(enrollment) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY sum(enrollment) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "school_finance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "50 Marshall",
          "71 St. Joseph",
          "46 LaPorte 71 St. Joseph",
          "75 Starke",
          "20 Elkhart"
        ]
      ],
      "y_data": [
        [
          1098,
          984,
          852,
          620,
          601
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the total enrollment in each county with a bar chart, show y axis in descending order.",
      "Please give me a bar chart for the total enrollment in each county, and order by the sum enrollment in desc."
    ],
    "irrelevant_tables": [
      "endowment",
      "budget"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2053@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Age FROM editor ORDER BY Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "journal_committee",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Age",
      "x_data": [
        [
          "Anna Powierza",
          "Gra\u017cyna Wolszczak",
          "Kamila Porczyk",
          "Marek Siudym",
          "Maria G\u00f3ralczyk",
          "Mariusz Zalejski",
          "Piotr Pr\u0119gowski",
          "Szymon Wydra",
          "W\u0142adys\u0142aw Grzywna"
        ]
      ],
      "y_data": [
        [
          35,
          54,
          34,
          21,
          38,
          25,
          43,
          20,
          24
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Compare each editors' ages using a bar chart, sort by the x axis in ascending.",
      "Draw a bar chart of name versus age, and I want to rank by the x axis in asc.",
      "What are the names and ages of editors? Show me a bar chart, and I want to order by the x axis in ascending please."
    ],
    "irrelevant_tables": [
      "journal",
      "journal_committee"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1416@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "flight_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "elevation",
      "x_data": [
        [
          "John F Kennedy International Airport",
          "La Guardia Airport",
          "Indianola Municipal Airport",
          "One Police Plaza Heliport"
        ]
      ],
      "y_data": [
        [
          13,
          21,
          126,
          244
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the altitude (or elevation) of the airports in the city of New York with a bar chart, order in ascending by the elevation.",
      "What is the altitude (or elevation) of the airports in the city of New York? Show me a bar chart, order in ascending by the elevation."
    ],
    "irrelevant_tables": [
      "airlines",
      "routes"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1419@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) ASC"
    },
    "chart": "Bar",
    "hardness": "Extra Hard",
    "db_id": "flight_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "country",
      "y_name": "COUNT(country)",
      "x_data": [
        [
          "Azerbaijan",
          "Turkey",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY country",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the countries of all airlines whose names start with Orbit, and count them by a bar chart, order total number from low to high order.",
      "Find the country of the airlines whose name starts with 'Orbit', and count them by a bar chart, rank from low to high by the y axis.",
      "A bar chart for what are the number of the countries of all airlines whose names start with Orbit?, and could you display y axis in asc order?",
      "A bar chart for finding the number of the country of the airlines whose name starts with 'Orbit', display y-axis in asc order please."
    ],
    "irrelevant_tables": [
      "airports",
      "routes"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1085@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "United States",
          "Canada"
        ]
      ],
      "y_data": [
        [
          6,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart showing the number of members in each country, and sort y-axis in desc order.",
      "Plot how many country by grouped by country as a bar graph, could you display by the y axis from high to low please?"
    ],
    "irrelevant_tables": [
      "round",
      "college"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1091@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "decoration_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Canada",
          "United States"
        ]
      ],
      "y_data": [
        [
          4,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the different countries and the number of members from each Visualize by bar chart, order by the y axis from low to high please.",
      "Plot the total number by grouped by country as a bar graph, and order by the y axis from low to high please.",
      "Show the different countries and the number of members from each with a bar chart, and could you order in asc by the Y-axis?"
    ],
    "irrelevant_tables": [
      "college",
      "round"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3038@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "COUNT(Name)",
      "x_data": [
        [
          "Quilon Fast Passenger",
          "Parasuram Express",
          "Madurai Fast Passenger",
          "Jayanthi Janatha Express",
          "Island Express",
          "Guruvayur Express",
          "Ananthapuri Express"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          2,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Name",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart, group by name and compute each group's total number, could you display Name in descending order please?"
    ],
    "irrelevant_tables": [
      "train_station",
      "station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3043@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          10
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show how many location from different location, and list total number from low to high order.",
      "How many locations? Draw a bar chart, sort total number from low to high order.",
      "A bar chart shows how many locations, list Y-axis in asc order."
    ],
    "irrelevant_tables": [
      "train_station",
      "train"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3045@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY SUM(Number_of_Platforms) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY SUM(Number_of_Platforms) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "SUM(Number_of_Platforms)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          13,
          17,
          140
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart about the number of platforms in different locations, show total number in asc order.",
      "Create a bar chart showing total number of number of platforms across location, and show total number in asc order.",
      "What is the number of platforms for each location? Show the comparison with a bar chart, I want to order by the Y in asc."
    ],
    "irrelevant_tables": [
      "train",
      "train_station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3050@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Total_Passengers",
      "x_data": [
        [
          "Birmingham New Street",
          "Glasgow Central"
        ]
      ],
      "y_data": [
        [
          36.330999999999996,
          29.658
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the names and total passengers for all train stations not in London Visualize by bar chart, and I want to sort in ascending by names please."
    ],
    "irrelevant_tables": [
      "train",
      "train_station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3052@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION ORDER BY Location ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION ORDER BY Location ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "sum(number_of_platforms)",
      "x_data": [
        [
          "Birmingham",
          "Glasgow",
          "London"
        ]
      ],
      "y_data": [
        [
          13,
          17,
          140
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all locations and the total number of platforms for all train stations in each location in a bar chart, sort by the Location in ascending.",
      "Bar chart of total number of number of platforms from each location, and display by the X-axis in asc please."
    ],
    "irrelevant_tables": [
      "train",
      "train_station"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3053@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "train_station",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "sum(total_passengers)",
      "x_data": [
        [
          "London",
          "Glasgow",
          "Birmingham"
        ]
      ],
      "y_data": [
        [
          498.50700000000006,
          29.658,
          36.330999999999996
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart x axis location y axis sum total passengers, I want to sort in descending by the Location please."
    ],
    "irrelevant_tables": [
      "train",
      "train_station"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "41@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Fname",
      "y_name": "AVG(Age)",
      "x_data": [
        [
          "Susan",
          "Linda",
          "Stacy",
          "Tracy",
          "Lisa",
          "Jandy",
          "Shiela",
          "Sarah"
        ]
      ],
      "y_data": [
        [
          16,
          18,
          18,
          19,
          19.5,
          20,
          21,
          23
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Fname",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the average age for all female students and group them by first name in a bar chart, and could you rank the average of age in asc order?"
    ],
    "irrelevant_tables": [
      "Allergy_Type",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "42@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "LName",
      "y_name": "COUNT(LName)",
      "x_data": [
        [
          "Apap",
          "Cheng",
          "Jones",
          "Kim",
          "Lee",
          "Nelson",
          "Prater",
          "Schmidt",
          "Smith"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY LName",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart about the number of last name for all female students whose sex is F, and rank in asc by the y-axis.",
      "A bar chart showing the number of last name for all female students Their sex is F, and sort in asc by the y-axis please."
    ],
    "irrelevant_tables": [
      "Has_Allergy",
      "Allergy_Type"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "44@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "LName",
      "y_name": "AVG(Age)",
      "x_data": [
        [
          "Schmidt",
          "Jones",
          "Cheng",
          "Nelson",
          "Smith",
          "Kim",
          "Prater",
          "Apap",
          "Lee"
        ]
      ],
      "y_data": [
        [
          26,
          21,
          21,
          20,
          19,
          19,
          18,
          18,
          16
        ]
      ],
      "classify": [],
      "describe": "GROUP BY LName",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the average age for all female students and group them by last name with a bar chart, and could you order the average of age in desc order?"
    ],
    "irrelevant_tables": [
      "Allergy_Type",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "47@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "AllergyType",
      "y_name": "COUNT(AllergyType)",
      "x_data": [
        [
          "food",
          "animal",
          "environmental"
        ]
      ],
      "y_data": [
        [
          7,
          4,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY AllergyType",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of each allergie type in a bar chart, list in descending by the how many allergytype.",
      "Create a bar chart showing how many allergytype across allergytype, and list in descending by the how many allergytype.",
      "What is the number of each allergie type? Return a bar chart, and list in descending by the how many allergytype."
    ],
    "irrelevant_tables": [
      "Has_Allergy",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "58@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "avg(age)",
      "x_data": [
        [
          "M",
          "F"
        ]
      ],
      "y_data": [
        [
          19.5,
          19.7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the average ages for male and female students Plot them as bar chart, and list Y in asc order.",
      "Show the average age for male and female students Visualize by bar chart, I want to rank by the mean age in asc please.",
      "Show the average age for male and female students with a bar chart, list Y in asc order.",
      "A bar chart about what are the average ages for male and female students?, and rank by the y-axis in asc.",
      "Visualize a bar chart for what are the average ages for male and female students?, and list Y in asc order.",
      "Show me mean age by sex in a histogram, and rank Y-axis in asc order."
    ],
    "irrelevant_tables": [
      "Allergy_Type",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "59@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "ATL",
          "BOS",
          "CHI",
          "DAL",
          "DET",
          "HOU",
          "LON",
          "LOS",
          "NAR",
          "PEK",
          "ROC",
          "SFO",
          "YYZ",
          "HKG",
          "NYC",
          "PHL",
          "WAS",
          "BAL",
          "PIT"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          3,
          3,
          3,
          3,
          4,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all cities and corresponding number of students by a bar chart, and could you sort in ascending by the the total number ?",
      "Show all cities and corresponding number of students Plot them as bar chart, I want to display in ascending by the total number.",
      "A bar chart about how many students live in each city?, could you sort in ascending by the the total number ?",
      "Plot the total number by grouped by city code as a bar graph, and could you list in ascending by the y axis?",
      "Return a histogram on how many students live in each city?, and list the total number in ascending order."
    ],
    "irrelevant_tables": [
      "Has_Allergy",
      "Allergy_Type"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "61@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "allergy_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "AllergyType",
      "y_name": "count(*)",
      "x_data": [
        [
          "environmental",
          "animal",
          "food"
        ]
      ],
      "y_data": [
        [
          3,
          4,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart on what are the allergy types and how many allergies correspond to each one?, display by the Y from low to high.",
      "Show all allergy types and the number of allergies in each type Plot them as bar chart, display by the Y from low to high.",
      "Bar graph to show the total number from different allergytype, and display by the Y in asc.",
      "Show all allergy types and the number of allergies in each type in a bar chart, rank total number in ascending order."
    ],
    "irrelevant_tables": [
      "Student",
      "Has_Allergy"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1324@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "election_representative",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Democratic",
          "Republican"
        ]
      ],
      "y_data": [
        [
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart of the total number from each party, show total number in asc order please.",
      "Give me a histogram for what are the different parties of representative? Show the party name and the number of representatives in each party, and show total number in asc order please."
    ],
    "irrelevant_tables": [
      "election"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1328@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "election_representative",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "COUNT(Party)",
      "x_data": [
        [
          "Democratic",
          "Republican"
        ]
      ],
      "y_data": [
        [
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Party",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart showing how many representatives in each party, order X in asc order."
    ],
    "irrelevant_tables": [
      "election"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "483@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY Competition ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY Competition ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "city_record",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Competition",
      "y_name": "count(*)",
      "x_data": [
        [
          "1994 FIFA World Cup qualification",
          "2002 FIFA World Cup qualification",
          "Friendly match"
        ]
      ],
      "y_data": [
        [
          4,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of matches in different competitions Visualize by bar chart, I want to display in asc by the X-axis.",
      "Bar chart x axis competition y axis the total number, and display by the X-axis in ascending."
    ],
    "irrelevant_tables": [
      "city",
      "temperature"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1015@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_category",
      "y_name": "count(*)",
      "x_data": [
        [
          "food",
          "clothes"
        ]
      ],
      "y_data": [
        [
          11,
          9
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show all distinct product categories along with the number of mailshots in each category in a bar chart, and show from high to low by the total number please.",
      "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart, and show from high to low by the total number please."
    ],
    "irrelevant_tables": [
      "Products",
      "Mailshot_Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1022@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customers_campaigns_ecommerce",
    "vis_obj": {
      "chart": "bar",
      "x_name": "outcome_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "No Response",
          "Order"
        ]
      ],
      "y_data": [
        [
          5,
          10
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the outcome code of mailshots along with the number of mailshots in each outcome code Plot them as bar chart, and show by the total number in asc.",
      "Show the outcome code of mailshots along with the number of mailshots in each outcome code in a bar chart, and show y-axis in asc order."
    ],
    "irrelevant_tables": [
      "Premises",
      "Order_Items"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2594@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "poker_player",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Russia",
          "Bulgaria"
        ]
      ],
      "y_data": [
        [
          6,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for how many people are there of each nationality?, order from high to low by the y-axis.",
      "What are different nationalities of people and the corresponding number of people from each nation Visualize by bar chart, and order from high to low by the Y-axis.",
      "Visualize a bar chart for how many people are there of each nationality?, list in descending by the Y please.",
      "How many people are there of each nationality Visualize by bar chart, order Y from high to low order please.",
      "Return a bar chart on what are different nationalities of people and the corresponding number of people from each nation?, and order Y from high to low order please.",
      "Draw a bar chart of nationality versus the total number, and sort from high to low by the total number."
    ],
    "irrelevant_tables": [
      "poker_player"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "909@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "customer_complaints",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_category_code",
      "y_name": "avg(product_price)",
      "x_data": [
        [
          "Food",
          "Book",
          "Hardware"
        ]
      ],
      "y_data": [
        [
          2.88,
          35,
          66.67
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart for what is the average price of the products for each category?, order by the Y from low to high.",
      "Bar graph to show the average of product price from different product category code, and I want to display by the Y-axis in ascending.",
      "Return the average price of products that have each category code in a bar chart, and list y axis from low to high order.",
      "A bar chart about what is the average price of the products for each category?, and rank from low to high by the y axis."
    ],
    "irrelevant_tables": [
      "Customers",
      "Complaints"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "690@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "concert_singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "count(*)",
      "x_data": [
        [
          "France",
          "United States",
          "Netherlands"
        ]
      ],
      "y_data": [
        [
          4,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of country versus the total number, and sort the total number in desc order.",
      "Return a bar chart on how many singers are from each country?, sort the total number in desc order.",
      "Show all countries and the number of singers in each country in a bar chart, show Y-axis from high to low order.",
      "Show all countries and the number of singers in each country Show bar chart, and could you sort from high to low by the Y-axis?",
      "Give me a histogram for how many singers are from each country?, and sort the total number in desc order."
    ],
    "irrelevant_tables": [
      "singer_in_concert",
      "concert"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "827@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "FM",
          "CV",
          "PP",
          "BK"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          5,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List document type codes and the number of documents in each code Visualize by bar chart, sort from low to high by the Y.",
      "How many documents are there of each type Show bar chart, could you display from low to high by the total number?",
      "List document type codes and the number of documents in each code with a bar chart, and I want to sort in asc by the y axis.",
      "Return a bar chart on how many documents are there of each type?, and list in asc by the total number.",
      "Give me a histogram for how many documents are there of each type?, and sort from low to high by the Y."
    ],
    "irrelevant_tables": [
      "Ref_Budget_Codes",
      "Projects"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "829@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Docs_and_Epenses",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Document_Type_Description",
      "y_name": "COUNT(Document_Type_Description)",
      "x_data": [
        [
          "excellent",
          "fun",
          "good",
          "very good"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Document_Type_Description",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show the number of document type description from different document type description, and show in ascending by the x-axis.",
      "How many document type for different document type description? Visualize with a bar chart, sort in asc by the x-axis.",
      "Show the number of document type for different document type description in a bar chart, and show in ascending by the x-axis."
    ],
    "irrelevant_tables": [
      "Documents_with_Expenses",
      "Statements"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1987@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY Policy_Type_Code ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY Policy_Type_Code ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_and_eClaims",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Policy_Type_Code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Deputy",
          "Jurisdiction",
          "Normal",
          "Uniformed"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          1,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis policy type code y axis the total number, and order in ascending by the X-axis."
    ],
    "irrelevant_tables": [
      "Customers",
      "Claim_Headers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1991@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC",
        "binning": "BIN Date_Claim_Made BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Claim_Made",
      "y_name": "COUNT(Date_Claim_Made)",
      "x_data": [
        [
          "Fri",
          "Thur",
          "Wed",
          "Tue",
          "Sun",
          "Sat",
          "Mon"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Claim_Made BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For all the claims whose claimed amount is larger than the average, bin the claim date into day of week interval and count them for visualizing a bar chart, order from high to low by the y axis.",
      "Among all the claims, which claims have a claimed amount larger than the average? Please Bin date the claim was made into week day interval and count them to show a bar chart, and could you show in desc by the y axis?"
    ],
    "irrelevant_tables": [
      "Customer_Policies",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2010@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Payment_Method_Code",
      "y_name": "COUNT(Payment_Method_Code)",
      "x_data": [
        [
          "Visa",
          "MasterCard",
          "Discover Card",
          "American Express"
        ]
      ],
      "y_data": [
        [
          4,
          7,
          3,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Payment_Method_Code",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the frequency of each payment method code using a bar chart, and could you display x-axis in descending order please?",
      "Plot the number of payment method code by grouped by payment method code as a bar graph, order in descending by the Payment_Method_Code."
    ],
    "irrelevant_tables": [
      "Claims",
      "Customers"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2024@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC",
        "binning": "BIN Date_Payment_Made BY YEAR"
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "COUNT(Date_Payment_Made)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          3,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Payment_Made BY YEAR",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "For those payments processed with Visa, bin the payment day into Year interval and count them for a bar chart, order from high to low by the y axis.",
      "For those payments processed with Visa, show me the number of payments of each year using a bar chart, show in descending by the how many date payment made please."
    ],
    "irrelevant_tables": [
      "Customers",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2028@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC",
        "binning": "BIN Date_Payment_Made BY YEAR"
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "AVG(Amount_Payment)",
      "x_data": [
        [
          "2017",
          "2018"
        ]
      ],
      "y_data": [
        [
          262456.6666666667,
          7343
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Payment_Made BY YEAR",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart, and could you order y axis in desc order?"
    ],
    "irrelevant_tables": [
      "Settlements",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2030@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "Amount_Payment",
      "x_data": [
        [
          "2018-02-24",
          "2017-05-28",
          "2017-05-03",
          "2017-12-16"
        ]
      ],
      "y_data": [
        [
          7343,
          155654,
          172309,
          459407
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart, I want to order in ascending by the Amount_Payment please.",
      "Which Payments were processed with Visa? List the date and the amount using a bar chart, and rank by the Y from low to high please.",
      "Give me a histogram to show the date and the amount for all the payments processed with Visa, and show in asc by the Y-axis please."
    ],
    "irrelevant_tables": [
      "Claims",
      "Settlements"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2031@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC",
        "binning": "BIN Date_Payment_Made BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "insurance_policies",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Date_Payment_Made",
      "y_name": "COUNT(Date_Payment_Made)",
      "x_data": [
        [
          "Fri",
          "Mon",
          "Thur",
          "Tue",
          "Sun",
          "Wed",
          "Sat"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "BIN Date_Payment_Made BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For those payments processed with Visa, show me the number of payments of each day of the week using a bar chart, and sort total number in ascending order.",
      "For those payments processed with Visa, bin the payment day into the Day of week interval and count them for a bar chart, and sort total number in ascending order."
    ],
    "irrelevant_tables": [
      "Settlements",
      "Claims"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "709@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "county_public_safety",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Police_force",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "RCMP",
          "Central Saanich Police",
          "Abbotsford Police Department"
        ]
      ],
      "y_data": [
        [
          4,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return a bar chart on how many counties correspond to each police force?, and could you list by the y axis in descending?",
      "Display a bar chart for how many counties correspond to each police force?, list Y-axis in desc order."
    ],
    "irrelevant_tables": [
      "city"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "171@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year , avg(games) FROM home_game where team_id = 'BS1' GROUP BY YEAR ORDER BY year DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year , avg(games) FROM home_game where team_id = 'BS1' GROUP BY YEAR ORDER BY year DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "avg(attendance)",
      "x_data": [
        [
          1875,
          1874,
          1873,
          1872,
          1871
        ]
      ],
      "y_data": [
        [
          12.333333333333334,
          17.5,
          10.0,
          21.0,
          8.5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the average number of games played by team BS1 at home games for each year. Plot them as line chart, and could you display year in ASC order?",
      "Return a line chart on what is the average number of games played by team BS1 at home games for each year? Show in asc by the x-axis."
    ],
    "irrelevant_tables": [
      "salary",
      "manager_award_vote"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2451@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "COUNT(name)",
      "x_data": [
        [
          "Alexis",
          "Andrew",
          "Austin",
          "Brittany",
          "Cassandra",
          "Haley",
          "Jessica",
          "John",
          "Kris",
          "Kyle",
          "Logan",
          "Tiffany",
          "Gabriel",
          "Jordan"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY name",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Can you show me a bar chart to answer how many people with different names for each high schooler?, show from low to high by the how many name.",
      "Count the names of each high schooler using a bar chart, show from low to high by the how many name."
    ],
    "irrelevant_tables": [
      "Friend",
      "Likes"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2453@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "network_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "AVG(grade)",
      "x_data": [
        [
          "Logan",
          "Kyle",
          "John",
          "Jessica",
          "Austin",
          "Alexis",
          "Jordan",
          "Kris",
          "Haley",
          "Gabriel",
          "Brittany",
          "Andrew",
          "Tiffany",
          "Cassandra"
        ]
      ],
      "y_data": [
        [
          12,
          12,
          12,
          11,
          11,
          11,
          10.5,
          10,
          10,
          10,
          10,
          10,
          9,
          9
        ]
      ],
      "classify": [],
      "describe": "GROUP BY name",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart for what are the names and the average grades for each high schooler?, sort Y from high to low order.",
      "Show the names and their average grades of each high schooler with a bar chart, could you rank in descending by the Y-axis?",
      "What are the names and the average grades for each high schooler Plot them as a bar chart, and could you list in desc by the y axis?",
      "Bar graph to show mean grade from different name, could you show y-axis in desc order?",
      "Display a bar chart for what are the names and the average grades for each high schooler?, and could you show y-axis in desc order?"
    ],
    "irrelevant_tables": [
      "Friend",
      "Likes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "490@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "climbing",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "DR Congo Uganda",
          "Kenya",
          "Tanzania"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the countries of mountains with height bigger than 5000, and count them by a bar chart, and I want to list y-axis in asc order.",
      "A bar chart for what are the number of the countries of mountains with height bigger than 5000?, order by the Y-axis in asc.",
      "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000, and I want to list y-axis in asc order.",
      "Return the countries of the mountains that have a height larger than 5000, and count them by a bar chart, could you sort y-axis in ascending order?"
    ],
    "irrelevant_tables": [
      "climber"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2904@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "count(*)",
      "x_data": [
        [
          "Russia",
          "Spain",
          "Hungary",
          "France",
          "England",
          "Azerbaijan"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many stadiums does each country have Show bar chart, and rank by the Y-axis in descending.",
      "Draw a bar chart for how many stadiums does each country have?, and list in descending by the the total number .",
      "Show me a bar chart for how many stadiums does each country have?, list in descending by the the total number .",
      "Show me the total number by country in a histogram, I want to show Y-axis from high to low order."
    ],
    "irrelevant_tables": [
      "swimmer",
      "record"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2909@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "AVG(meter_100)",
      "x_data": [
        [
          "Australia",
          "Canada",
          "Italy",
          "Ukraine",
          "Tunisia",
          "Poland",
          "France"
        ]
      ],
      "y_data": [
        [
          57.345,
          57.84,
          57.66,
          57.34,
          57.31,
          57.31,
          55.67
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of Nationality and the average of meter_100 , and group by attribute Nationality, and display in asc by the Nationality.",
      "Find Nationality and the average of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, display in asc by the x-axis.",
      "Give me the comparison about the average of meter_100 over the Nationality , and group by attribute Nationality by a bar chart, display in asc by the Nationality."
    ],
    "irrelevant_tables": [
      "event",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2915@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "swimming",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "meter_100",
      "x_data": [
        [
          "S\u00e9bastien Rouault",
          "Oussama Mellouli",
          "Przemys\u0142aw Sta\u0144czyk",
          "Grant Hackett",
          "Sergiy Fesenko",
          "Craig Stevens",
          "Federico Colbertaldo",
          "Ryan Cochrane"
        ]
      ],
      "y_data": [
        [
          55.67,
          57.31,
          57.31,
          57.34,
          57.34,
          57.35,
          57.66,
          57.84
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me the comparison about meter_100 over the name by a bar chart, display in asc by the y-axis.",
      "Draw a bar chart of name versus meter_100, and rank by the total number in ascending."
    ],
    "irrelevant_tables": [
      "record",
      "stadium"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2993@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "lot_details",
      "y_name": "COUNT(lot_details)",
      "x_data": [
        [
          "q",
          "r",
          "x",
          "h",
          "m",
          "s",
          "d",
          "z"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          2,
          2,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY lot_details",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart groups the lot details, and computes the number of each lot details, and list y axis in asc order please.",
      "Bar chart x axis lot details y axis the number of lot details, rank in ascending by the total number."
    ],
    "irrelevant_tables": [
      "Transactions",
      "Investors"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3002@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Investor_details",
      "y_name": "COUNT(Investor_details)",
      "x_data": [
        [
          "b",
          "c",
          "i",
          "j",
          "o",
          "q",
          "r",
          "t",
          "d",
          "k",
          "l",
          "w",
          "y",
          "z"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          2,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Investor_details",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all investor details, and count them by a bar chart, and order by the Y-axis in ascending.",
      "Plot the number of investor details by grouped by investor details as a bar graph, list in ascending by the total number."
    ],
    "irrelevant_tables": [
      "Transactions_Lots",
      "Lots"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3005@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "transaction_type_code",
      "y_name": "avg(amount_of_transaction)",
      "x_data": [
        [
          "PUR",
          "SALE"
        ]
      ],
      "y_data": [
        [
          25945880.3716125,
          11198167.237771427
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Create a bar chart showing mean amount of transaction across transaction type code, display by the transaction_type_code in asc.",
      "Show the average transaction amount for different transaction types with a bar chart, and I want to sort by the x-axis in ascending please."
    ],
    "irrelevant_tables": [
      "Sales",
      "Investors"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3007@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC",
        "binning": "BIN date_of_transaction BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_share_transactions",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_transaction",
      "y_name": "COUNT(date_of_transaction)",
      "x_data": [
        [
          "Thur",
          "Mon",
          "Sat",
          "Fri",
          "Tue",
          "Wed",
          "Sun"
        ]
      ],
      "y_data": [
        [
          0,
          1,
          1,
          3,
          3,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_transaction BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me a bar chart that bin all date of transactions into the weekday interval and the y-axis is their total number, and show y-axis in ascending order."
    ],
    "irrelevant_tables": [
      "Ref_Transaction_Types",
      "Purchases"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1462@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "game_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "SportName",
      "y_name": "count(*)",
      "x_data": [
        [
          "Athletics",
          "Baseball",
          "Basketball",
          "Cricket",
          "Curling",
          "Football",
          "Lacrosse",
          "Soccer",
          "Swimming",
          "Tennis"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          2,
          3,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a histogram for how many students play each sport?, and show X-axis in ascending order."
    ],
    "irrelevant_tables": [
      "Video_Games",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "859@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Product_Name",
      "y_name": "avg(Product_Price)",
      "x_data": [
        [
          "dinning",
          "film",
          "photo"
        ]
      ],
      "y_data": [
        [
          238704.33333333328,
          11385515.333333336,
          5102691.666666667
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for mean product price of each product name, I want to list in asc by the x-axis."
    ],
    "irrelevant_tables": [
      "Services",
      "Ref_Service_Types"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "862@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC",
        "binning": "BIN Planned_Delivery_Date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Planned_Delivery_Date",
      "y_name": "COUNT(Planned_Delivery_Date)",
      "x_data": [
        [
          "Thur",
          "Tue",
          "Mon",
          "Sun",
          "Sat",
          "Fri",
          "Wed"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          3,
          2,
          1,
          1,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN Planned_Delivery_Date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show all the planned delivery dates and bin by weekday in a bar chart, and rank Y in desc order."
    ],
    "irrelevant_tables": [
      "Bookings_Services",
      "Customer_Orders"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "863@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC",
        "binning": "BIN Actual_Delivery_Date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Actual_Delivery_Date",
      "y_name": "COUNT(Actual_Delivery_Date)",
      "x_data": [
        [
          "Tue",
          "Wed",
          "Mon",
          "Sat",
          "Sun",
          "Thur",
          "Fri"
        ]
      ],
      "y_data": [
        [
          0,
          1,
          2,
          2,
          3,
          3,
          4
        ]
      ],
      "classify": [],
      "describe": "BIN Actual_Delivery_Date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all the actual delivery dates and bin by weekday in a bar chart, could you display how many actual delivery date in ascending order?"
    ],
    "irrelevant_tables": [
      "Order_Items",
      "Invoices"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "872@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "cre_Drama_Workshop_Groups",
    "vis_obj": {
      "chart": "bar",
      "x_name": "payment_method_code",
      "y_name": "count(*)",
      "x_data": [
        [
          "Visa",
          "MasterCard",
          "American E"
        ]
      ],
      "y_data": [
        [
          5,
          6,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "List the distinct payment method codes with the number of orders mad in a bar chart, and could you list by the X-axis in descending?",
      "List the distinct payment method codes with the number of orders mad Show bar chart, and I want to show by the x axis in desc.",
      "Give me a bar chart for the total number of each payment method code, and could you display by the names in descending?",
      "Show all payment method codes and the number of orders for each code in a bar chart, show by the payment_method_code in descending please."
    ],
    "irrelevant_tables": [
      "Performers_in_Bookings",
      "Clients"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1304@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT County_name , Population FROM county ORDER BY Population ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT County_name , Population FROM county ORDER BY Population ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "County_name",
      "y_name": "Population",
      "x_data": [
        [
          "Manning",
          "Howard",
          "Colony",
          "Mansfield",
          "Baltimore County"
        ]
      ],
      "y_data": [
        [
          13300,
          21000,
          79000,
          87200,
          90000
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the county name and population of all counties with a bar chart, could you display by the y axis in asc?",
      "Draw a bar chart for what are the name and population of each county?, and I want to sort in asc by the Y.",
      "What are the name and population of each county Plot them as bar chart, and display by the Population from low to high.",
      "Show the county name and population of all counties Show bar chart, rank in asc by the y-axis."
    ],
    "irrelevant_tables": [
      "party",
      "election"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1320@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "election",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Committee",
      "y_name": "COUNT(Committee)",
      "x_data": [
        [
          "Economic Matters",
          "Environmental Matters",
          "Environmental Matters (Vice-Chair)",
          "Health and Government Operations",
          "Ways and Means",
          "Appropriations"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Committee",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many delegates in each committee? Return a bar chart, display in asc by the how many committee please.",
      "Show the number of delegates in each committee with a bar chart, and could you order y axis in ascending order please?"
    ],
    "irrelevant_tables": [
      "party",
      "county"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "364@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "book_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Publisher",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Bertelsmann",
          "Springer Nature",
          "Thomson Reuters",
          "Pearson",
          "Wiley"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different publishers together with the number of publications they have Plot them as bar chart, show by the y axis from low to high.",
      "Show different publishers together with the number of publications they have in a bar chart, show total number from low to high order.",
      "Draw a bar chart of publisher versus the total number, and could you sort by the y-axis from low to high please?"
    ],
    "irrelevant_tables": [
      "book"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "365@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "book_2",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Publication_Date",
      "y_name": "COUNT(Publication_Date)",
      "x_data": [
        [
          "April 2007",
          "August 2008",
          "June 2006",
          "March 2007",
          "March 2008",
          "October 2005"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Publication_Date",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis publication date y axis how many publication date, could you order by the x-axis in ascending?",
      "A bar chart showing the number of publication dates of books, display in ascending by the x-axis."
    ],
    "irrelevant_tables": [
      "book"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2436@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "music_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Category",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Best Song",
          "Best Lyrics",
          "Best Sound Song"
        ]
      ],
      "y_data": [
        [
          5,
          3,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return the number of music festivals of each category in a bar chart, and sort by the y-axis from high to low.",
      "Show me the total number by category in a histogram, could you order Y in descending order?"
    ],
    "irrelevant_tables": [
      "artist",
      "volume"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2439@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "music_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Category",
      "y_name": "COUNT(Category)",
      "x_data": [
        [
          "Best Song",
          "Best Sound Song"
        ]
      ],
      "y_data": [
        [
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Category",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What are the category of music festivals with result \"Awarded\", and count them by a bar chart, I want to list x axis in asc order.",
      "A bar chart for what are the number of the category of music festivals with result \"Awarded\"?, I want to list x axis in asc order."
    ],
    "irrelevant_tables": [
      "volume",
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2441@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "music_4",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Result",
      "y_name": "COUNT(Result)",
      "x_data": [
        [
          "Nominated",
          "Awarded"
        ]
      ],
      "y_data": [
        [
          6,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Result",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return the results of all music festivals using a bar chart, list in descending by the X."
    ],
    "irrelevant_tables": [
      "artist",
      "volume"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2127@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "local_govt_in_alabama",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Participant_Type_Code",
      "y_name": "COUNT(Participant_Type_Code)",
      "x_data": [
        [
          "Organizer",
          "Participant"
        ]
      ],
      "y_data": [
        [
          7,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Participant_Type_Code",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis participant type code y axis the number of participant type code, and sort in ascending by the x axis."
    ],
    "irrelevant_tables": [
      "Services",
      "Participants_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2135@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY Event_Details DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY Event_Details DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "local_govt_in_alabama",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Event_Details",
      "y_name": "COUNT(Event_Details)",
      "x_data": [
        [
          "Success",
          "Fail"
        ]
      ],
      "y_data": [
        [
          6,
          9
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Event_Details",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart x axis event details y axis how many event details, and I want to sort by the X-axis in descending.",
      "Group and count details for the events using a bar chart, and I want to list by the names in desc."
    ],
    "irrelevant_tables": [
      "Services",
      "Participants_in_Events"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1149@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY Software_Platform DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY Software_Platform DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "device",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Software_Platform",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "iOS",
          "Android"
        ]
      ],
      "y_data": [
        [
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about what are the different software platforms for devices, and how many devices have each?, and could you display by the x-axis in desc?",
      "Bar chart x axis software platform y axis the total number, sort by the Software_Platform in desc."
    ],
    "irrelevant_tables": [
      "stock",
      "shop"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1150@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY COUNT(Location) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY COUNT(Location) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "device",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Location",
      "y_name": "COUNT(Location)",
      "x_data": [
        [
          "Cymmer",
          "Gelli",
          "Maerdy",
          "Pentre",
          "Porth",
          "Wattstown",
          "Blaenllechau",
          "Dinas",
          "Penygraig"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Location",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart showing how many shops in each location, could you rank how many location in ascending order please?",
      "Create a bar chart showing how many location across location, and I want to order by the y-axis in ascending."
    ],
    "irrelevant_tables": [
      "stock",
      "device"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2814@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY COUNT(Competition_type) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY COUNT(Competition_type) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Competition_type",
      "y_name": "COUNT(Competition_type)",
      "x_data": [
        [
          "Tournament",
          "Friendly"
        ]
      ],
      "y_data": [
        [
          3,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Competition_type",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of different competition types with a bar graph, list in asc by the Y please.",
      "A bar chart showing the number of different competition types, I want to rank Y-axis in ascending order.",
      "Give me a bar chart for how many competition type of each competition type, and rank the number of competition type in ascending order."
    ],
    "irrelevant_tables": [
      "club",
      "club_rank"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2815@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Spain",
          "Slovenia",
          "Russia",
          "Italy",
          "Ireland",
          "Australia"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          2,
          2,
          1,
          2
        ],
        [
          0,
          2,
          1,
          0,
          0,
          0
        ]
      ],
      "classify": [
        "Friendly",
        "Tournament"
      ],
      "describe": "GROUP BY Competition_type, GROUP BY Country",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compute the total number in each competition type, and then split by country. Plot a bar chart and show in desc by the x-axis."
    ],
    "irrelevant_tables": [
      "competition_result",
      "club_rank"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": false
      }
    ]
  },
  "2816@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "COUNT(Country)",
      "x_data": [
        [
          "Ireland",
          "Spain",
          "Australia",
          "Italy",
          "Slovenia",
          "Russia"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2,
          2,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart for how many competitions for each country, and I want to list y-axis in ascending order.",
      "Show me the number of country by country in a histogram, and rank by the y axis in ascending."
    ],
    "irrelevant_tables": [
      "club_rank",
      "competition_result"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2827@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "sports_competition",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Position",
      "y_name": "avg(Points)",
      "x_data": [
        [
          "Prop",
          "Left Wing",
          "Full Back",
          "Loose Forward",
          "Second Row",
          "Hooker",
          "Right Centre",
          "Right Wing",
          "Stand Off",
          "Scrum Half"
        ]
      ],
      "y_data": [
        [
          9.333333333333334,
          12,
          20,
          20,
          20,
          36,
          36,
          36,
          110,
          188
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the position of players and the average number of points of players of each position Visualize by bar chart, and could you sort by the total number in ascending?",
      "For each position, what is the average number of points for players in that position Plot them as bar chart, could you show y axis from low to high order?",
      "List the position of players and the average number of points of players of each position by a bar chart, could you order in asc by the the average of points?",
      "Give me a bar chart for mean points of each position, and rank by the Y-axis in asc."
    ],
    "irrelevant_tables": [
      "club",
      "club_rank"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3261@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "workshop_paper",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Result",
      "y_name": "COUNT(Result)",
      "x_data": [
        [
          "Accepted",
          "Rejected"
        ]
      ],
      "y_data": [
        [
          2,
          4
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Result",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Group by the result and count them by a bar chart, rank from low to high by the Y.",
      "For each submission, group its acceptance result and count them Visualize them in a bar chart, and I want to sort in ascending by the y axis.",
      "Bar graph to show how many result from different result, and rank in ascending by the Y-axis."
    ],
    "irrelevant_tables": [
      "workshop",
      "submission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2698@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "school_bus",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Home_city",
      "y_name": "AVG(Age)",
      "x_data": [
        [
          "Manchester",
          "Hartford",
          "East Hartford",
          "Coventry",
          "Bethel"
        ]
      ],
      "y_data": [
        [
          52,
          43.5,
          37,
          35,
          30
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Home_city",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the average age of drivers from the same home city with a bar chart, could you rank in descending by the Y-axis please?",
      "Plot the average of age by grouped by home city as a bar graph, show from high to low by the total number."
    ],
    "irrelevant_tables": [
      "school",
      "school_bus"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2702@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "school_bus",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Party",
      "y_name": "count(*)",
      "x_data": [
        [
          "Dem",
          "Rep"
        ]
      ],
      "y_data": [
        [
          10,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Create a bar chart showing the total number across party, and sort in desc by the y-axis.",
      "Show the party and the number of drivers in each party Plot them as bar chart, and I want to rank y-axis from high to low order please.",
      "Show the party and the number of drivers in each party with a bar chart, and I want to order in desc by the the total number please."
    ],
    "irrelevant_tables": [
      "school",
      "school_bus"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2629@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "protein_institute",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "count(*)",
      "x_data": [
        [
          "Private",
          "Public",
          "Tribal"
        ]
      ],
      "y_data": [
        [
          7,
          3,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of type versus the total number, and I want to rank in ascending by the x-axis.",
      "Please give me a bar chart showing institution types, along with the number of institutions for each type, and could you rank x-axis in asc order?"
    ],
    "irrelevant_tables": [
      "protein",
      "building"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "7@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Building",
      "y_name": "count(*)",
      "x_data": [
        [
          "NEB",
          "Barton",
          "Krieger"
        ]
      ],
      "y_data": [
        [
          18,
          20,
          20
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show all the buildings along with the number of faculty members the buildings have Plot them as bar chart, rank total number in ascending order.",
      "Return a bar chart on how many faculty members does each building have? List the result with the name of the building, and show total number in asc order.",
      "How many faculty members does each building have? List the result with the name of the building with a bar chart, and display Y in ascending order.",
      "How many faculty members does each building have? List the result with the name of the building Visualize by bar chart, order total number from low to high order.",
      "Show me a bar chart for how many faculty members does each building have? List the result with the name of the building, and order total number from low to high order.",
      "Show all the buildings along with the number of faculty members the buildings have with a bar chart, and could you display from low to high by the y-axis please?",
      "Bar graph to show the total number from different building, rank y axis from low to high order."
    ],
    "irrelevant_tables": [
      "Student",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "11@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "count(*)",
      "x_data": [
        [
          "AssocProf",
          "AsstProf",
          "Instructor",
          "Professor"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          3,
          0
        ],
        [
          7,
          12,
          5,
          27
        ]
      ],
      "classify": [
        "F",
        "M"
      ],
      "describe": "GROUP BY Sex, GROUP BY Rank",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many faculty members do we have for each rank and gender? Plot them as bar chart, I want to sort y axis in asc order.",
      "Stacked bar chart of the total number for faculties with each Sex in each rank, could you rank in asc by the Y-axis?",
      "Show all the ranks and the number of male and female faculty for each rank in a bar chart, rank by the Y in ascending."
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": true
      },
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": true
      },
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "12@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          7,
          51
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Sex",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many faculty members do we have for each gender? Draw a bar chart, and I want to order by the names in asc please.",
      "Create a bar chart showing the total number across sex, and rank in asc by the x-axis.",
      "A bar chart showing the number of male and female faculty, and could you show by the x-axis in asc?"
    ],
    "irrelevant_tables": [
      "Faculty_Participates_in",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "17@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "count(Rank)",
      "x_data": [
        [
          "Professor",
          "AsstProf",
          "Instructor",
          "AssocProf"
        ]
      ],
      "y_data": [
        [
          27,
          15,
          8,
          8
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Rank",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart of total number by each rank, sort from high to low by the Y.",
      "Show the number of faculty for each rank in a bar chart, and sort from high to low by the total number.",
      "How many faculty members do we have for each rank? render a bar chart, and sort from high to low by the Y."
    ],
    "irrelevant_tables": [
      "Participates_in",
      "Student"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "22@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          3,
          12
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of male and female assistant professors with a bar chart, list y axis in ascending order.",
      "Display a bar chart for how many male and female assistant professors do we have?, display in asc by the Y-axis.",
      "Visualize a bar chart for how many male and female assistant professors do we have?, I want to order in ascending by the Y-axis.",
      "Show the number of male and female assistant professors Plot them as bar chart, order Y-axis in ascending order."
    ],
    "irrelevant_tables": [
      "Activity",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "24@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Rank",
      "y_name": "count(*)",
      "x_data": [
        [
          "AssocProf",
          "AsstProf",
          "Instructor",
          "Professor"
        ]
      ],
      "y_data": [
        [
          8,
          15,
          8,
          27
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart about how many faculty members do we have for each faculty rank?, and rank in ascending by the x axis please."
    ],
    "irrelevant_tables": [
      "Activity",
      "Faculty_Participates_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1371@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "entrepreneur",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Investor",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Doug Richard",
          "Peter Jones",
          "Rachel Elnaugh",
          "Simon Woodroffe",
          "Duncan Bannatyne"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?, and I want to display in asc by the y axis.",
      "Draw a bar chart of investor versus the total number, show total number in ascending order please.",
      "Return a histogram on how many entrepreneurs correspond to each investor?, and I want to sort from low to high by the Y-axis."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1373@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "entrepreneur",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Investor",
      "y_name": "COUNT(Investor)",
      "x_data": [
        [
          "Duncan Bannatyne",
          "Simon Woodroffe",
          "Rachel Elnaugh",
          "Peter Jones",
          "Doug Richard"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Investor",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar graph to show the number of investor from different investor, and display Y-axis in descending order please.",
      "How many companies each investor has invested? Show me a bar chart, and display Y-axis in descending order please.",
      "Show the number of companies each investor has invested with a bar chart, rank y axis from high to low order."
    ],
    "irrelevant_tables": [
      "people"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "83@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC",
        "binning": "BIN booking_end_date BY YEAR"
      },
      "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "booking_end_date",
      "y_name": "COUNT(booking_end_date)",
      "x_data": [
        [
          "2018",
          "2017"
        ]
      ],
      "y_data": [
        [
          4,
          11
        ]
      ],
      "classify": [],
      "describe": "BIN booking_end_date BY YEAR",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "How many apartment bookings in each year? Show me a bar chart binning booking end date by year, rank in ascending by the Y.",
      "Show the number of apartment bookings in each year and bin booking end date by year with a bar chart, could you list Y in ascending order please?"
    ],
    "irrelevant_tables": [
      "View_Unit_Status",
      "Apartment_Buildings"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "84@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC",
        "binning": "BIN booking_end_date BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "bar",
      "x_name": "booking_end_date",
      "y_name": "COUNT(booking_end_date)",
      "x_data": [
        [
          "Thur",
          "Fri",
          "Mon",
          "Sun",
          "Wed",
          "Sat",
          "Tue"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          2,
          2,
          2,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "BIN booking_end_date BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of apartment bookings in each weekday and bin booking end date by weekday with a bar chart, sort from low to high by the total number.",
      "How many apartment bookings in each weekday? Show me a bar chart binning booking end date by weekday, could you display Y-axis in asc order?"
    ],
    "irrelevant_tables": [
      "Apartments",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "87@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date ORDER BY booking_end_date DESC",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date ORDER BY booking_end_date DESC"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "apartment_rentals",
    "vis_obj": {
      "chart": "line",
      "x_name": "booking_end_date",
      "y_name": "COUNT(booking_end_date)",
      "x_data": [
        [
          "2018-03-20",
          "2018-02-25",
          "2018-02-19",
          "2018-02-06",
          "2017-11-29",
          "2017-11-13",
          "2017-11-12",
          "2017-10-25",
          "2017-10-07",
          "2017-10-06",
          "2017-10-03",
          "2017-09-30",
          "2017-09-29",
          "2017-09-28"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY booking_end_date",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show the number of apartment bookings in each day and group by booking end date with a line chart, sort by the booking_end_date in descending."
    ],
    "irrelevant_tables": [
      "Apartment_Facilities",
      "Guests"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "2855@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "store_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "name",
      "y_name": "COUNT(name)",
      "x_data": [
        [
          "90's Music",
          "Audiobooks",
          "Brazilian Music",
          "Classical",
          "Classical 101 - Deep Cuts",
          "Classical 101 - Next Steps",
          "Classical 101 - The Basics",
          "Grunge",
          "Heavy Metal Classic",
          "Movies",
          "Music",
          "Music Videos",
          "On-The-Go 1",
          "TV Shows"
        ]
      ],
      "y_data": [
        [
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY name",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the name of all playlist, and count them by a bar chart, show by the X-axis in ascending.",
      "A bar chart for what are the number of the names of all the playlists?, could you order x axis in asc order please?",
      "Bar chart x axis name y axis how many name, display in asc by the names."
    ],
    "irrelevant_tables": [
      "sqlite_sequence",
      "invoices"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1335@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Is_full_time",
      "y_name": "COUNT(Is_full_time)",
      "x_data": [
        [
          "T",
          "F"
        ]
      ],
      "y_data": [
        [
          5,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Is_full_time",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and display Y in desc order.",
      "A bar chart shows the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, sort by the total number in descending please.",
      "Return a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and display in desc by the the number of is full time.",
      "Give me the comparison about the amount of Is_full_time over the Is_full_time , and group by attribute Is_full_time by a bar chart, and sort by the Y from high to low.",
      "Draw a bar chart of is full time versus how many is full time, sort by the Y from high to low.",
      "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart, and display in desc by the the number of is full time."
    ],
    "irrelevant_tables": [
      "evaluation",
      "shop"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1349@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC",
        "binning": "BIN Start_from BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    "chart": "Grouping Line",
    "hardness": "Extra Hard",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "line",
      "x_name": "Start_from",
      "y_name": "COUNT(Start_from)",
      "x_data": [
        [
          "2003",
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          1,
          1
        ]
      ],
      "classify": [
        "F",
        "T"
      ],
      "describe": "GROUP BY Is_full_time, BIN Start_from BY YEAR",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by year, rank x axis in asc order.",
      "Visualize a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by year, and show by the X-axis in asc.",
      "A line chart shows the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by year, display by the Start_from in asc."
    ],
    "irrelevant_tables": [
      "shop",
      "evaluation"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "field"
      }
    ]
  },
  "1356@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC",
        "binning": "BIN Start_from BY YEAR"
      },
      "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    "chart": "Line",
    "hardness": "Medium",
    "db_id": "employee_hire_evaluation",
    "vis_obj": {
      "chart": "line",
      "x_name": "Start_from",
      "y_name": "COUNT(Start_from)",
      "x_data": [
        [
          "2003",
          "2004",
          "2005",
          "2006",
          "2007",
          "2008",
          "2009",
          "2010",
          "2011",
          "2012",
          "2013"
        ]
      ],
      "y_data": [
        [
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN Start_from BY YEAR",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a line chart about the change of the amount of Start_from over Start_from bin start_from by year, and display in asc by the X.",
      "Draw a line chart about the change of the amount of Start_from over Start_from bin start_from by year, could you show by the X-axis in ascending?",
      "A line chart shows the trend of the amount of Start_from over Start_from bin start_from by year, and display by the x axis in ascending.",
      "Show me about the change of the amount of Start_from over Start_from bin start_from by year in a line chart, and could you show by the X-axis in ascending?"
    ],
    "irrelevant_tables": [
      "employee",
      "evaluation"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "515@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "SCHOOL_CODE",
      "y_name": "count(DISTINCT dept_name)",
      "x_data": [
        [
          "BUS",
          "A&SCI"
        ]
      ],
      "y_data": [
        [
          4,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of departments in each school Plot them as bar chart, show y-axis in ascending order.",
      "How many departments are in each school Show bar chart, and show y-axis in ascending order.",
      "A bar chart about how many departments are in each school?, show y-axis in ascending order.",
      "Return a bar chart on how many departments are in each school?, and list by the count(DISTINCTdept_name) in ascending."
    ],
    "irrelevant_tables": [
      "ENROLL",
      "EMPLOYEE"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "529@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "count(*)",
      "x_data": [
        [
          "SOC",
          "PSYCH",
          "MKT/MGT",
          "MATH",
          "HIST",
          "ENG",
          "ECON/FIN",
          "CIS",
          "BIOL",
          "ART",
          "ACCT"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          2,
          1,
          2,
          1,
          3,
          2,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of professors with a PhD degree in each department Show bar chart, and I want to sort x-axis in desc order."
    ],
    "irrelevant_tables": [
      "DEPARTMENT",
      "CLASS"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "533@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "min(stu_gpa)",
      "x_data": [
        [
          "EDU",
          "CIS",
          "BIOL",
          "ACCT",
          "ENGL"
        ]
      ],
      "y_data": [
        [
          3.87,
          3.09,
          2.84,
          2.26,
          2.11
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the lowest student GPA for every department? Return a bar chart, display in desc by the Y.",
      "Bar chart x axis dept code y axis minimal stu gpa, and display Y-axis in descending order.",
      "Find the minimum gpa of all students in each department with a bar chart, and display in desc by the Y."
    ],
    "irrelevant_tables": [
      "CLASS",
      "EMPLOYEE"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "543@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "SCHOOL_CODE",
      "y_name": "count(DISTINCT dept_address)",
      "x_data": [
        [
          "BUS",
          "A&SCI"
        ]
      ],
      "y_data": [
        [
          4,
          7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about how many different locations does each school have?, and list by the x axis in descending.",
      "Count different addresses of each school with a bar chart, and order by the x-axis in desc please."
    ],
    "irrelevant_tables": [
      "PROFESSOR",
      "ENROLL"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "553@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "CRS_CODE",
      "y_name": "count(*)",
      "x_data": [
        [
          "CIS-220",
          "ACCT-211",
          "QM-362",
          "QM-261",
          "ACCT-212",
          "CIS-420"
        ]
      ],
      "y_data": [
        [
          3,
          3,
          2,
          2,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "How many sections does each course has Visualize by bar chart, and rank y axis in descending order.",
      "How many sections does each course have Visualize by bar chart, and list the total number from high to low order please.",
      "Visualize a bar chart for how many sections does each course has?, list by the total number in descending.",
      "Bar chart x axis crs code y axis the total number, and sort Y-axis from high to low order please.",
      "Draw a bar chart for how many sections does each course have?, display in descending by the y-axis."
    ],
    "irrelevant_tables": [
      "PROFESSOR",
      "STUDENT"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "564@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "count(*)",
      "x_data": [
        [
          "ACCT",
          "BIOL",
          "CIS",
          "EDU",
          "ENGL"
        ]
      ],
      "y_data": [
        [
          3,
          1,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of students for each department Plot them as bar chart, I want to list by the names in asc.",
      "How many students are in each department Visualize by bar chart, and I want to order by the names in ascending.",
      "Return a histogram on how many students are in each department?, and display by the X-axis in asc please."
    ],
    "irrelevant_tables": [
      "PROFESSOR",
      "ENROLL"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "580@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY CLASS_ROOM DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY CLASS_ROOM DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "CLASS_ROOM",
      "y_name": "count(*)",
      "x_data": [
        [
          "KLR211",
          "KLR209",
          "KLR200",
          "BUS311",
          "BUS252",
          "BUS200"
        ]
      ],
      "y_data": [
        [
          1,
          3,
          4,
          2,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar chart of the total number from each class room, and list by the names in desc."
    ],
    "irrelevant_tables": [
      "PROFESSOR",
      "DEPARTMENT"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "586@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "college_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "DEPT_CODE",
      "y_name": "sum(crs_credit)",
      "x_data": [
        [
          "CIS",
          "ACCT"
        ]
      ],
      "y_data": [
        [
          14,
          6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Display a bar chart for how many credits does the department offer?, and I want to show by the x-axis in descending.",
      "Show me a bar chart for what is the total credit does each department offer?, I want to list X in desc order.",
      "Return a histogram on what is the total credit does each department offer?, and I want to list X in desc order."
    ],
    "irrelevant_tables": [
      "DEPARTMENT",
      "STUDENT"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "172@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date , COUNT(date) FROM battle GROUP BY date ORDER BY COUNT(date) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT date , COUNT(date) FROM battle GROUP BY date ORDER BY COUNT(date) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "battle_death",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date",
      "y_name": "COUNT(date)",
      "x_data": [
        [
          "1235",
          "14 April 1205",
          "31 January 1206",
          "31 June 1208",
          "4 September 1207",
          "February 1206",
          "June 1205"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY date",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart listing the number of battle date, and sort total number from low to high order.",
      "Bar chart of the number of date from each date, and rank by the Y-axis from low to high."
    ],
    "irrelevant_tables": [
      "death",
      "ship"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1210@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "gender",
      "y_name": "count(*)",
      "x_data": [
        [
          "F",
          "M",
          "X"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the number of dorms for each gender in a bar chart, order in asc by the Y please.",
      "How many dorms are there for each gender? Show me a bar chart, display y axis in ascending order."
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Lives_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1215@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Fname",
      "y_name": "COUNT(Fname)",
      "x_data": [
        [
          "Eric",
          "Sarah",
          "William",
          "Stacy",
          "Paul",
          "Michael",
          "Mark",
          "Lisa",
          "Jun",
          "Ian",
          "George",
          "David"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Fname",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of students who are not in the largest major and group by students' first name in a bar chart, and rank from high to low by the y axis."
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1220@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY city_code DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY city_code DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "avg(age)",
      "x_data": [
        [
          "YYZ",
          "WAS",
          "ROC",
          "PIT",
          "PHL",
          "PEK",
          "NYC",
          "NAR",
          "LOS",
          "LON",
          "HOU",
          "HKG",
          "DET",
          "DAL",
          "CHI",
          "BOS",
          "BAL",
          "ATL"
        ]
      ],
      "y_data": [
        [
          22.5,
          18,
          20,
          19.33333333333333,
          19.5,
          17,
          20.33333333333333,
          18,
          18,
          27,
          17,
          19,
          17,
          18,
          20,
          18,
          18,
          20
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "What is the average age of male students in each city? Draw a bar chart, show by the names in descending."
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Lives_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1225@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Fname , COUNT(Fname) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Fname",
      "y_name": "COUNT(Fname)",
      "x_data": [
        [
          "Eric",
          "Mark",
          "William",
          "Tracy",
          "Susan",
          "Stacy",
          "Paul",
          "Michael",
          "Lisa",
          "Linda",
          "Jun",
          "George",
          "Derek",
          "Charles",
          "Arthur",
          "Andy"
        ]
      ],
      "y_data": [
        [
          3,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Fname",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of students whose age is younger than the average age and group by students' first name in a bar chart, could you show in descending by the y axis?"
    ],
    "irrelevant_tables": [
      "Dorm",
      "Lives_in"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1226@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT LName , COUNT(LName) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY LName ORDER BY COUNT(LName) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY LName ORDER BY COUNT(LName) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "LName",
      "y_name": "COUNT(LName)",
      "x_data": [
        [
          "Pang",
          "Lee",
          "Woods",
          "Tai",
          "Smith",
          "Simms",
          "Schwartz",
          "Schultz",
          "Prater",
          "Norris",
          "Kim",
          "Han",
          "Goldman",
          "Epp",
          "Brody",
          "Apap",
          "Andreou"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY LName",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of students whose age is younger than the average age and group by students' last name in a bar chart, and sort by the Y-axis in descending."
    ],
    "irrelevant_tables": [
      "Lives_in",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1235@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "count(*)",
      "x_data": [
        [
          "M",
          "F"
        ]
      ],
      "y_data": [
        [
          10,
          5
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for how many students are older than average for each gender?, sort by the Sex in descending."
    ],
    "irrelevant_tables": [
      "Dorm_amenity",
      "Dorm"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1237@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "avg(age)",
      "x_data": [
        [
          "M",
          "F"
        ]
      ],
      "y_data": [
        [
          19.5,
          19.7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find the average age for students with different sex in a bar chart, could you list by the Y from low to high?",
      "What is the average age for each gender of student? Return a bar chart, and display from low to high by the the average of age.",
      "Plot mean age by grouped by sex as a bar graph, could you order by the y-axis from low to high?"
    ],
    "irrelevant_tables": [
      "Dorm",
      "Has_amenity"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "1238@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY Sex ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY Sex ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "dorm_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Sex",
      "y_name": "max(age)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          26,
          27
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the oldest age for each gender of student? Return a bar chart, and order by the x axis in asc please.",
      "Find the oldest age for students with different sex in a bar chart, and sort X in asc order."
    ],
    "irrelevant_tables": [
      "Has_amenity",
      "Dorm"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2610@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT first_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY gender_mf ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT first_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY gender_mf ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "products_for_hire",
    "vis_obj": {
      "chart": "bar",
      "x_name": "first_name",
      "y_name": "gender_mf",
      "x_data": [
        [
          "Geovany",
          "Jailyn",
          "Rosalee",
          "Ericka",
          "Elinore",
          "Maximilian",
          "Vergie",
          "Marilou",
          "German",
          "Laury",
          "Tyler"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, list by the Y in asc."
    ],
    "irrelevant_tables": [
      "Bookings",
      "Products_for_Hire"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2774@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "singer",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Citizenship",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Australia",
          "Chile",
          "France",
          "Germany",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          4
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart, could you sort by the x-axis in asc please?",
      "Show different citizenship of singers and the number of singers of each citizenship in a bar chart, and rank in asc by the X."
    ],
    "irrelevant_tables": [
      "song"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "435@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "chinook_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Phone",
      "y_name": "COUNT(Phone)",
      "x_data": [
        [
          "1 (780) 836-9987",
          "+1 (780) 428-9482",
          "+1 (403) 467-3351",
          "+1 (403) 456-9986",
          "+1 (403) 263-4423",
          "+1 (403) 262-3443",
          "+1 (403) 246-9887"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          2,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Phone",
      "sort": null
    },
    "nl_queries": [
      "List the phone numbers of all employees, and count them by a bar chart",
      "A bar chart for what are the number of the phone numbers for each employee?"
    ],
    "irrelevant_tables": [
      "Track",
      "Customer"
    ],
    "query_meta": [
      {
        "channel_specified": []
      },
      {
        "channel_specified": []
      }
    ]
  },
  "279@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC",
        "binning": "BIN date_incident_end BY MONTH"
      },
      "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY MONTH"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "behavior_monitoring",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_incident_end",
      "y_name": "COUNT(date_incident_end)",
      "x_data": [
        [
          "Mar",
          "Feb"
        ]
      ],
      "y_data": [
        [
          5,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN date_incident_end BY MONTH",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month, could you show by the y-axis from high to low please?"
    ],
    "irrelevant_tables": [
      "Teachers",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3267@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "sum(Population)",
      "x_data": [
        [
          "Oceania",
          "South America",
          "Africa",
          "Asia"
        ]
      ],
      "y_data": [
        [
          30401150,
          345780000,
          784475000,
          3705025700
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, display in asc by the sum population.",
      "What is the total population corresponding to continents that have an average life expectancy of less than 72? Visualize them in a bar chart, and show in ascending by the Y-axis please."
    ],
    "irrelevant_tables": [
      "countrylanguage",
      "sqlite_sequence"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3269@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "world_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Continent",
      "y_name": "avg(LifeExpectancy)",
      "x_data": [
        [
          "Africa",
          "Asia",
          "Oceania",
          "South America",
          "North America",
          "Europe"
        ]
      ],
      "y_data": [
        [
          52.57192982456139,
          67.44117647058825,
          69.715,
          70.94615384615386,
          72.99189189189188,
          75.14772727272728
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Draw a bar chart of continent versus mean lifeexpectancy, and could you show from low to high by the total number?"
    ],
    "irrelevant_tables": [
      "sqlite_sequence",
      "countrylanguage"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3071@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Affiliation",
      "y_name": "sum(enrollment)",
      "x_data": [
        [
          "Private/Methodist",
          "Public"
        ]
      ],
      "y_data": [
        [
          2100,
          119027
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Visualize a bar chart for what are the total enrollments of universities of each affiliation type?, sort y axis in ascending order.",
      "Find the total student enrollment for different affiliation type schools Plot them as bar chart, display by the sum enrollment from low to high.",
      "What are the total enrollments of universities of each affiliation type Plot them as bar chart, rank in asc by the total number.",
      "Draw a bar chart of affiliation versus sum enrollment, and I want to display y axis from low to high order please.",
      "Show me a bar chart for what are the total enrollments of universities of each affiliation type?, display by the y axis from low to high please."
    ],
    "irrelevant_tables": [
      "basketball_match"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3123@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "ACC_Road",
      "y_name": "COUNT(ACC_Road)",
      "x_data": [
        [
          "8-0",
          "6-2",
          "3-5"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY ACC_Road",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Draw a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road, and order by the ACC_Road in desc.",
      "Visualize a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road, and could you display by the X in descending?",
      "Show me about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road in a bar chart, and display x-axis in desc order."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3124@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Home",
      "y_name": "COUNT(All_Home)",
      "x_data": [
        [
          "14-2",
          "14-3",
          "15-1"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY All_Home",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart shows the distribution of All_Home and the amount of All_Home , and group by attribute All_Home, and order x-axis in asc order.",
      "Return a bar chart about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home, and order x-axis in asc order.",
      "Show me about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home in a bar chart, and show in asc by the x-axis please."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3134@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Team_Name",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          "Virginia Tech",
          "Clemson",
          "Duke",
          "North Carolina"
        ]
      ],
      "y_data": [
        [
          0.6,
          0.706,
          0.8240000000000001,
          0.946
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for all_games_percent of each team name, could you list in asc by the y axis please?",
      "Find Team_Name and All_Games_Percent , and visualize them by a bar chart, could you list in asc by the y axis please?",
      "Draw a bar chart about the distribution of Team_Name and All_Games_Percent , order by the All_Games_Percent in ascending.",
      "Return a bar chart about the distribution of Team_Name and All_Games_Percent , and order y-axis from low to high order.",
      "Visualize a bar chart about the distribution of Team_Name and All_Games_Percent , and I want to display in asc by the Y-axis."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3135@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "ACC_Regular_Season",
      "y_name": "ACC_Percent",
      "x_data": [
        [
          "9-7",
          "10-6",
          "13-3",
          "14-2"
        ]
      ],
      "y_data": [
        [
          0.563,
          0.625,
          0.813,
          0.875
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me the comparison about ACC_Percent over the ACC_Regular_Season by a bar chart, and order Y-axis in asc order.",
      "Bar chart x axis acc regular season y axis acc_percent, display ACC_Percent in ascending order.",
      "Visualize a bar chart about the distribution of ACC_Regular_Season and ACC_Percent , and display ACC_Percent in ascending order."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "3137@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "ACC_Regular_Season",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          "14-2",
          "13-3",
          "10-6",
          "9-7"
        ]
      ],
      "y_data": [
        [
          0.946,
          0.8240000000000001,
          0.706,
          0.6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart, and I want to order All_Games_Percent in descending order.",
      "Create a bar chart showing all_games_percent across acc regular season, sort in descending by the Y.",
      "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and rank by the Y-axis in descending.",
      "Find ACC_Regular_Season and All_Games_Percent , and visualize them by a bar chart, rank by the Y-axis in descending.",
      "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart, and list Y-axis from high to low order."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3138@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Games",
      "y_name": "ACC_Percent",
      "x_data": [
        [
          "21-14",
          "24-10",
          "28-6",
          "35-2"
        ]
      ],
      "y_data": [
        [
          0.563,
          0.625,
          0.813,
          0.875
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart shows the distribution of All_Games and ACC_Percent , could you display by the x-axis in asc?",
      "Bar chart x axis all games y axis acc_percent, and could you display by the x-axis in asc?",
      "Visualize a bar chart about the distribution of All_Games and ACC_Percent , I want to display by the X-axis in ascending.",
      "Show me about the distribution of All_Games and ACC_Percent in a bar chart, and could you display by the x-axis in asc?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3140@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Games",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          "21-14",
          "24-10",
          "28-6",
          "35-2"
        ]
      ],
      "y_data": [
        [
          0.6,
          0.706,
          0.8240000000000001,
          0.946
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "A bar chart shows the distribution of All_Games and All_Games_Percent , and order in asc by the X-axis.",
      "Visualize a bar chart about the distribution of All_Games and All_Games_Percent , show by the x axis in ascending.",
      "Return a bar chart about the distribution of All_Games and All_Games_Percent , and order in asc by the X-axis.",
      "Give me the comparison about All_Games_Percent over the All_Games by a bar chart, order in asc by the X-axis."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3141@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Road",
      "y_name": "ACC_Percent",
      "x_data": [
        [
          "4-8",
          "6-5",
          "8-2",
          "13-0"
        ]
      ],
      "y_data": [
        [
          0.563,
          0.625,
          0.813,
          0.875
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Return a bar chart about the distribution of All_Road and ACC_Percent , and display y-axis in ascending order please.",
      "A bar chart shows the distribution of All_Road and ACC_Percent , display in ascending by the y-axis.",
      "Give me the comparison about ACC_Percent over the All_Road by a bar chart, display y-axis in ascending order please."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3144@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Neutral",
      "y_name": "ACC_Percent",
      "x_data": [
        [
          "9-1",
          "5-3",
          "4-3",
          "3-3"
        ]
      ],
      "y_data": [
        [
          0.875,
          0.813,
          0.625,
          0.563
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Return a bar chart about the distribution of All_Neutral and ACC_Percent , sort in descending by the X-axis."
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "3146@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "university_basketball",
    "vis_obj": {
      "chart": "bar",
      "x_name": "All_Neutral",
      "y_name": "All_Games_Percent",
      "x_data": [
        [
          "9-1",
          "5-3",
          "4-3",
          "3-3"
        ]
      ],
      "y_data": [
        [
          0.946,
          0.8240000000000001,
          0.706,
          0.6
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Create a bar chart showing all_games_percent across all neutral, and could you order in desc by the X-axis?",
      "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart, I want to order by the x axis in desc.",
      "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , and could you sort by the x axis in descending?"
    ],
    "irrelevant_tables": [
      "university"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2349@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "mountain_photos",
    "vis_obj": {
      "chart": "bar",
      "x_name": "brand",
      "y_name": "COUNT(brand)",
      "x_data": [
        [
          "Schneider Kreuznach",
          "Olympus",
          "Panasonic",
          "Sigma"
        ]
      ],
      "y_data": [
        [
          2,
          3,
          3,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY brand",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Group and count brand for each camera lens using a bar chart, and rank in asc by the total number."
    ],
    "irrelevant_tables": [
      "photos",
      "mountain"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2602@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC",
        "binning": "BIN date_of_latest_revision BY WEEKDAY"
      },
      "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "bar",
      "x_name": "date_of_latest_revision",
      "y_name": "COUNT(date_of_latest_revision)",
      "x_data": [
        [
          "Thur",
          "Tue",
          "Mon",
          "Wed",
          "Sun",
          "Sat",
          "Fri"
        ]
      ],
      "y_data": [
        [
          2,
          1,
          1,
          0,
          0,
          0,
          0
        ]
      ],
      "classify": [],
      "describe": "BIN date_of_latest_revision BY WEEKDAY",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the dates on which more than one revisions were made, and the bin the date of latest revision into weekday interval and count them as a bar chart, and I want to list in desc by the Y-axis."
    ],
    "irrelevant_tables": [
      "Attribute_Definitions",
      "Catalog_Structure"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2607@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "product_catalog",
    "vis_obj": {
      "chart": "bar",
      "x_name": "catalog_entry_name",
      "y_name": "capacity",
      "x_data": [
        [
          "Vimto",
          "Sprite Lemo",
          "Dr Pepper",
          "Diet Pepsi",
          "Diet Mountain Dew"
        ]
      ],
      "y_data": [
        [
          6,
          8,
          1,
          9,
          8
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart, could you list x axis in desc order?"
    ],
    "irrelevant_tables": [
      "Catalog_Structure",
      "Attribute_Definitions"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2902@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "student_transcripts_tracking",
    "vis_obj": {
      "chart": "bar",
      "x_name": "section_description",
      "y_name": "COUNT(section_description)",
      "x_data": [
        [
          "voluptatem",
          "voluptas",
          "reprehenderit",
          "quis",
          "qui",
          "provident",
          "non",
          "nesciunt",
          "facilis",
          "ex",
          "et",
          "doloremque",
          "ad"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY section_description",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Count the section_description, and group by section_description with a bar chart, I want to order names in descending order."
    ],
    "irrelevant_tables": [
      "Addresses",
      "Degree_Programs"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1399@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "film_rank",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Studio",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "20th Century Fox",
          "Columbia",
          "Columbia / Rastar",
          "MGM",
          "Orion / Carolco",
          "Paramount",
          "Paramount / Lorimar",
          "United Artists",
          "Universal",
          "Universal / RKO"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          1,
          1,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "List the studios of each film and the number of films produced by that studio by a bar chart, I want to rank by the x axis in ascending."
    ],
    "irrelevant_tables": [
      "film_market_estimation",
      "market"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2943@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "AVG(Age)",
      "x_data": [
        [
          "Fiji",
          "Zimbabwe",
          "United States"
        ]
      ],
      "y_data": [
        [
          45,
          48,
          49.6
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Country",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis country y axis the average of age, and I want to show by the y-axis in asc please."
    ],
    "irrelevant_tables": [
      "exhibition_record",
      "exhibition"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2944@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Name , Age FROM artist ORDER BY Age ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Age ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Name",
      "y_name": "Age",
      "x_data": [
        [
          "Vijay Singh",
          "John Daly",
          "Paul Azinger",
          "Mark Brooks",
          "Nick Price",
          "Larry Nelson",
          "Jeff Sluman"
        ]
      ],
      "y_data": [
        [
          45,
          46,
          47,
          48,
          48,
          50,
          57
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis name y axis age, and rank Y in asc order."
    ],
    "irrelevant_tables": [
      "exhibition",
      "exhibition_record"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2950@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "theme_gallery",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "COUNT(Year)",
      "x_data": [
        [
          "2007",
          "2008",
          "2006",
          "2009"
        ]
      ],
      "y_data": [
        [
          0,
          0,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "BIN Year BY TIME",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Find those years for all exhibitions with ticket prices lower than 15, return a bar chart that groups by year and counts the total number of years, and I want to display in ascending by the total number."
    ],
    "irrelevant_tables": [
      "exhibition_record",
      "artist"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1967@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "bedType",
      "y_name": "count(*)",
      "x_data": [
        [
          "Queen",
          "King",
          "Double"
        ]
      ],
      "y_data": [
        [
          4,
          4,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "A bar chart about what are the number of rooms for each bed type?, could you sort in descending by the x-axis?",
      "Find the number of rooms for each bed type Visualize by bar chart, and could you list by the bedType in desc?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1970@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC"
    },
    "chart": "Bar",
    "hardness": "Easy",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "decor",
      "y_name": "min(basePrice)",
      "x_data": [
        [
          "modern",
          "rustic",
          "traditional"
        ]
      ],
      "y_data": [
        [
          75,
          150,
          150
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the minimum price of the rooms for each different decor? Show me a bar chart!, rank by the X in ascending.",
      "Draw a bar chart of decor versus minimal baseprice, could you show in ascending by the names?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1977@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "bedType",
      "y_name": "avg(basePrice)",
      "x_data": [
        [
          "Double",
          "King",
          "Queen"
        ]
      ],
      "y_data": [
        [
          100,
          181.25,
          150
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "What is the average base price of rooms, for each bed type Plot them as bar chart, and display in asc by the bedType please.",
      "What is the average base price of different bed type? List bed type and average base price Plot them as bar chart, display in asc by the bedType please.",
      "Draw a bar chart for what is the average base price of rooms, for each bed type?, display x axis in asc order."
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "1979@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY count(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY count(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Hard",
    "db_id": "inn_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "decor",
      "y_name": "count(*)",
      "x_data": [
        [
          "traditional",
          "rustic",
          "modern"
        ]
      ],
      "y_data": [
        [
          4,
          2,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Find the number of rooms with price higher than 120 for different decor Show bar chart, and list by the Y in descending.",
      "Visualize a bar chart for how many rooms cost more than 120, for each different decor?, and list by the Y in descending.",
      "How many rooms cost more than 120, for each different decor Plot them as bar chart, I want to rank by the Y-axis from high to low.",
      "Give me a histogram for how many rooms cost more than 120, for each different decor?, could you order from high to low by the Y-axis?"
    ],
    "irrelevant_tables": [
      "Reservations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "3033@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "tracking_software_problems",
    "vis_obj": {
      "chart": "bar",
      "x_name": "log_entry_description",
      "y_name": "COUNT(log_entry_description)",
      "x_data": [
        [
          "b",
          "d",
          "h",
          "j",
          "p",
          "q",
          "s",
          "t",
          "v",
          "w",
          "c",
          "a"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY log_entry_description",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar chart x axis log entry description y axis the number of log entry description, and I want to order y-axis in ascending order.",
      "Draw a bar chart for what is the number of entry descriptions of each problem?, and list total number in ascending order.",
      "List all the log entry descriptions and count them using a bar chart, order by the Y in ascending."
    ],
    "irrelevant_tables": [
      "Product",
      "Problem_Category_Codes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2677@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "riding_club",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Gender",
      "y_name": "COUNT(Gender)",
      "x_data": [
        [
          "F",
          "M"
        ]
      ],
      "y_data": [
        [
          5,
          9
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Gender",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Compare the distribution of the players' gender using a bar chart, and could you display in ascending by the x axis?"
    ],
    "irrelevant_tables": [
      "match_result",
      "coach"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2678@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "riding_club",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Occupation",
      "y_name": "COUNT(Occupation)",
      "x_data": [
        [
          "Student",
          "Retired",
          "Parliamentarian",
          "Small Businessman",
          "Self Employed / Consultant",
          "Researcher",
          "Product Consultant - MLCC",
          "Ministerial Assistant",
          "Locomotive Engineer",
          "Distribution Centre Associate",
          "Design Coordinator"
        ]
      ],
      "y_data": [
        [
          2,
          2,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Occupation",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Compare the number of players of different occupations using a bar chart, list y-axis in desc order.",
      "Visualize a bar chart to show how many players in each occupation, and I want to show by the Y-axis from high to low please.",
      "Bar chart x axis occupation y axis how many occupation, display in descending by the Y-axis."
    ],
    "irrelevant_tables": [
      "club",
      "player_coach"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2681@x_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "riding_club",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Occupation",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Design Coordinator",
          "Distribution Centre Associate",
          "Locomotive Engineer",
          "Ministerial Assistant",
          "Parliamentarian",
          "Product Consultant - MLCC",
          "Researcher",
          "Retired",
          "Self Employed / Consultant",
          "Small Businessman",
          "Student"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          1,
          1,
          2,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "x",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show different occupations along with the number of players in each occupation with a bar chart, and list by the x axis in asc."
    ],
    "irrelevant_tables": [
      "player_coach",
      "match_result"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2755@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "United States",
          "United Kingdom"
        ]
      ],
      "y_data": [
        [
          1,
          2
        ],
        [
          2,
          3
        ]
      ],
      "classify": [
        "Battle ship",
        "Cargo ship"
      ],
      "describe": "GROUP BY Type, GROUP BY Nationality",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show me a stacked bar graph, the x-axis is the nationality of ship, and the y-axis is their total number of different nationality and split by ship type, and show X-axis in desc order."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": true
      }
    ]
  },
  "2756@x_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC"
    },
    "chart": "Stacked Bar",
    "hardness": "Hard",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "COUNT(Type)",
      "x_data": [
        [
          "Cargo ship",
          "Battle ship"
        ]
      ],
      "y_data": [
        [
          3,
          2
        ],
        [
          2,
          1
        ]
      ],
      "classify": [
        "United Kingdom",
        "United States"
      ],
      "describe": "GROUP BY Nationality, GROUP BY Type",
      "sort": {
        "channel": "x",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Stack bar chart of the number of type vs Nationality based on type, and list x-axis in descending order.",
      "Draw a bar chart showing the total number of every ship type by categorizing by nationality, and list x-axis in descending order.",
      "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality, and I want to order names in desc order."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis",
        "stacked_bar": true
      },
      {
        "channel_specified": [
          "classify"
        ],
        "sort_by": "axis",
        "stacked_bar": false
      },
      {
        "channel_specified": [
          "classify"
        ],
        "sort_by": "field",
        "stacked_bar": true
      }
    ]
  },
  "2760@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Nationality",
      "y_name": "COUNT(Nationality)",
      "x_data": [
        [
          "United Kingdom",
          "United States"
        ]
      ],
      "y_data": [
        [
          5,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Nationality",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Bar graph to show how many nationality from different nationality, list in desc by the total number.",
      "What is the total number of different nationalities of all ships? Give me a bar graph, and sort by the Y-axis from high to low.",
      "Show me the comparison of the total number of all ships' nationalities with a bar graph, list from high to low by the Y.",
      "Return a bar chart showing the total number of ships' nationalities, and list in desc by the total number."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "2762@y_name@DESC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "COUNT(*)",
      "x_data": [
        [
          "Cargo ship",
          "Battle ship"
        ]
      ],
      "y_data": [
        [
          5,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "descending"
      }
    },
    "nl_queries": [
      "Show different types of ships and the number of ships of each type in a bar chart, display y-axis in desc order.",
      "For each type, how many ships are there Plot them as bar chart, list from high to low by the total number please.",
      "Bar chart x axis type y axis the total number, list by the Y in desc please.",
      "Show different types of ships and the number of ships of each type Show bar chart, list by the Y in desc please."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2763@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Fate",
      "y_name": "COUNT(Fate)",
      "x_data": [
        [
          "Decommissioned 1959",
          "Decommissioned 1960",
          "Lost (burned and sunk) 1933",
          "Lost (burned) 1931",
          "Retired 1939",
          "Decommissioned 1950"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY Fate",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Compare the total number of each fate with a bar chart, and display Y-axis from low to high order.",
      "What is the total number of each fate? Give me the result in a bar graph, and could you order Y-axis from low to high order?"
    ],
    "irrelevant_tables": [
      "ship"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "2765@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "ship_mission",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Type",
      "y_name": "avg(Tonnage)",
      "x_data": [
        [
          "Cargo ship",
          "Battle ship"
        ]
      ],
      "y_data": [
        [
          3932.2,
          4845
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar chart for mean tonnage of each type, show by the Y in asc.",
      "Show different types of ships and the average tonnage of ships of each type in a bar chart, could you list y axis in asc order?",
      "Show different types of ships and the average tonnage of ships of each type Show bar chart, sort Y in asc order."
    ],
    "irrelevant_tables": [
      "mission"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "y"
        ],
        "sort_by": "axis"
      },
      {
        "channel_specified": [],
        "sort_by": "axis"
      }
    ]
  },
  "2879@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "student_assessment",
    "vis_obj": {
      "chart": "bar",
      "x_name": "last_name",
      "y_name": "COUNT(last_name)",
      "x_data": [
        [
          "Bartoletti",
          "Bednar",
          "Feest",
          "Grant",
          "Senger",
          "Wintheiser",
          "Hartmann"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          2
        ]
      ],
      "classify": [],
      "describe": "GROUP BY last_name",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Give me a bar graph for what is the total number of last names of all candidates?, I want to rank in asc by the how many last name please.",
      "Bar graph to show the number of last name from different last name, sort by the Y from low to high please."
    ],
    "irrelevant_tables": [
      "People_Addresses",
      "Addresses"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "117@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "asset_make",
      "y_name": "COUNT(asset_make)",
      "x_data": [
        [
          "GB",
          "IE",
          "IT",
          "PT",
          "CN",
          "DE",
          "FR",
          "IN",
          "RU"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY asset_make",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show the number of assets and group by asset make in a bar chart, and list in asc by the Y.",
      "Draw a bar chart of asset make versus the number of asset make, I want to order y axis from low to high order."
    ],
    "irrelevant_tables": [
      "Maintenance_Contracts",
      "Fault_Log"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "axis"
      },
      {
        "channel_specified": [
          "x",
          "y"
        ],
        "sort_by": "axis"
      }
    ]
  },
  "140@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "assets_maintenance",
    "vis_obj": {
      "chart": "bar",
      "x_name": "asset_make",
      "y_name": "COUNT(asset_make)",
      "x_data": [
        [
          "GB",
          "IE",
          "IT",
          "PT",
          "CN",
          "DE",
          "FR",
          "IN",
          "RU"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          2,
          2,
          2,
          2,
          3
        ]
      ],
      "classify": [],
      "describe": "GROUP BY asset_make",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Bar graph to show how many asset make from different asset make, show total number in asc order.",
      "Show the number of assets and group by asset make in a bar chart, order in asc by the how many asset make."
    ],
    "irrelevant_tables": [
      "Part_Faults",
      "Asset_Parts"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      },
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "1424@y_name@ASC": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Country , count(*) FROM airport GROUP BY country ORDER BY count(*) ASC",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Country , count(*) FROM airport GROUP BY country ORDER BY count(*) ASC"
    },
    "chart": "Bar",
    "hardness": "Medium",
    "db_id": "flight_company",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Country",
      "y_name": "count(*)",
      "x_data": [
        [
          "Belgium",
          "Denmark",
          "Iceland",
          "Netherlands",
          "Norway",
          "Spain",
          "United States"
        ]
      ],
      "y_data": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          3
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": {
        "channel": "y",
        "order": "ascending"
      }
    },
    "nl_queries": [
      "Show me the total number by country in a histogram, rank total number from low to high order."
    ],
    "irrelevant_tables": [
      "operate_company",
      "flight"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "sort_by": "field"
      }
    ]
  },
  "4002": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT city_code, count(*), Sex FROM Student GROUP BY city_code, Sex",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT city_code, count(*), Sex FROM Student GROUP BY city_code, Sex"
    },
    "chart": "Stacked Bar",
    "hardness": "Easy",
    "db_id": "activity_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "city_code",
      "y_name": "count(stuid)",
      "x_data": [
        [
          "ATL",
          "BAL",
          "BOS",
          "CHI",
          "DAL",
          "DET",
          "HKG",
          "HOU",
          "LON",
          "LOS",
          "NAR",
          "NYC",
          "PEK",
          "PHL",
          "PIT",
          "ROC",
          "WAS",
          "YYZ",
          "SFO"
        ]
      ],
      "y_data": [
        [
          0,
          3,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          2,
          0,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          3,
          1,
          2,
          3,
          1,
          1,
          2,
          0
        ]
      ],
      "classify": [
        "F",
        "M"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Use a stacked bar chart to display the number of students from different cities and genders."
    ],
    "irrelevant_tables": [
      "Activity",
      "Faculty"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "stacked_bar": true
      }
    ]
  },
  "4003": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT International_Passengers, Domestic_Passengers FROM airport GROUP BY Airport_ID",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT International_Passengers, Domestic_Passengers FROM airport GROUP BY Airport_ID"
    },
    "chart": "Scatter",
    "hardness": "Easy",
    "db_id": "aircraft",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "International_Passengers",
      "y_name": "Domestic_Passengers",
      "x_data": [
        [
          61344438.0,
          30431051.0,
          19996947.0,
          18119230.0,
          8853224.0,
          8105162.0,
          3711140.0,
          3943139.0,
          5057051.0,
          4870184.0
        ]
      ],
      "y_data": [
        [
          5562516.0,
          3730963.0,
          2343428.0,
          2943719.0,
          1320678.0,
          1471538.0,
          5281038.0,
          4192121.0,
          1171605.0,
          746094.0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A scatter plot showing the relationship between international passengers and local passengers at the airport."
    ],
    "irrelevant_tables": [
      "pilot",
      "match"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "4005": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year, avg(salary), league_id FROM salary GROUP BY year, league_id",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year, avg(salary), league_id FROM salary GROUP BY year, league_id"
    },
    "chart": "Grouping Line",
    "hardness": "Easy",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "avg(salary)",
      "x_data": [
        [
          1985,
          1986,
          1987,
          1988,
          1989,
          1990,
          1991,
          1992,
          1993,
          1994,
          1995,
          1996,
          1997,
          1998,
          1999,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          500249.3176470588,
          433925.0693641619,
          427857.76802507835,
          452374.17034700315,
          511116.4865671642,
          525913.727735369,
          879587.5474683545,
          1085608.5562130178,
          923882.9912087912,
          971003.2204899777,
          890698.7373737374,
          1000406.7262931034,
          1169651.3779697623,
          1207658.0319548873,
          1468880.6242990654,
          1983096.549107143,
          2232801.3391684904,
          2342579.4053452117,
          2614933.0605381164,
          2469002.5239179954,
          2590986.616438356,
          2616445.6961451247,
          2623749.153674833,
          2870790.4449244062,
          3184368.693208431,
          3142161.1689497717,
          3156654.9042316256,
          3277278.0,
          3688940.2014742014,
          3935543.744680851,
          4212445.024875622
        ],
        [
          455597.0169491525,
          402337.86734693876,
          441846.58116883115,
          453901.1907514451,
          502052.3617021277,
          500415.81856540084,
          908126.7018970189,
          1017651.1160092808,
          1028575.5833333334,
          1130703.0827586206,
          1039864.5458248473,
          1055235.1798715203,
          1267829.6471861473,
          1364396.5622317595,
          1503986.4458598725,
          2004401.6701030927,
          2333183.8734491314,
          2449016.0428211587,
          2524939.5879265093,
          2517280.1913265307,
          2681580.8142493637,
          3088941.970899471,
          3304390.882951654,
          3449574.2849872774,
          3380833.0621761656,
          3431360.3903061226,
          3505557.023076923,
          3662264.0852130326,
          3757664.181372549,
          4030561.0,
          4387324.503614458
        ]
      ],
      "classify": [
        "NL",
        "AL"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Create a line chart depicting the yearly trends in average salaries for basketball players across various leagues."
    ],
    "irrelevant_tables": [
      "all_star",
      "pitching"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4006": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year, count(DISTINCT player_id), league_id FROM player_award where year >= 2000 GROUP BY year, league_id",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year, count(DISTINCT player_id), league_id FROM player_award where year >= 2000 GROUP BY year, league_id"
    },
    "chart": "Grouping Line",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "count(player_id)",
      "x_data": [
        [
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          22,
          24,
          20,
          22,
          23,
          23,
          25,
          20,
          22,
          22,
          22,
          19,
          21,
          21,
          21,
          18
        ],
        [
          23,
          22,
          23,
          23,
          24,
          26,
          23,
          22,
          20,
          17,
          19,
          19,
          22,
          20,
          22,
          19
        ],
        [
          5,
          5,
          6,
          5,
          7,
          6,
          7,
          7,
          6,
          6,
          6,
          6,
          5,
          4,
          3,
          4
        ]
      ],
      "classify": [
        "NL",
        "AL",
        "ML"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Line chart illustrating the changes in the number of award-winning players in different leagues from the year 2000 onwards."
    ],
    "irrelevant_tables": [
      "all_star",
      "pitching"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4008": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year, avg(Horsepower), Cylinders FROM cars_data where Cylinders in (4,6) and year > 1974 and year < 1980 GROUP BY Year, Cylinders",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year, avg(Horsepower), Cylinders FROM cars_data where Cylinders in (4,6) and year > 1974 and year < 1980 GROUP BY Year, Cylinders"
    },
    "chart": "Grouping Line",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "avg(Horsepower)",
      "x_data": [
        [
          1975,
          1976,
          1977,
          1978,
          1979
        ]
      ],
      "y_data": [
        [
          84.91666666666667,
          75.6,
          78.78571428571429,
          79.70588235294117,
          75.75
        ],
        [
          96.75,
          98.7,
          102.0,
          109.83333333333333,
          105.0,
          111.0
        ]
      ],
      "classify": [
        "4",
        "6"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Display the trend of average horsepower changes over the years for cars with 4 or 6 cylinders using a grouped line chart, colored by Cylinders. Show the trend from 1975 to 1979."
    ],
    "irrelevant_tables": [
      "car_makers",
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4009": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Horsepower, Accelerate FROM cars_data where Edispl > 200",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Horsepower, Accelerate FROM cars_data where Edispl > 200"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Horsepower",
      "y_name": "Accelerate",
      "x_data": [
        [
          130,
          165,
          150,
          150,
          140,
          198,
          220,
          215,
          225,
          190,
          165,
          153,
          175,
          175,
          170,
          160,
          140,
          150,
          225,
          215,
          200,
          210,
          193,
          100,
          105,
          100,
          88,
          100,
          165,
          175,
          153,
          150,
          180,
          170,
          175,
          110,
          100,
          88,
          165,
          175,
          150,
          153,
          150,
          208,
          155,
          160,
          190,
          150,
          130,
          140,
          150,
          175,
          150,
          145,
          137,
          150,
          198,
          150,
          158,
          150,
          215,
          225,
          175,
          105,
          100,
          100,
          88,
          150,
          167,
          170,
          180,
          100,
          145,
          230,
          150,
          180,
          100,
          100,
          100,
          110,
          105,
          140,
          150,
          150,
          140,
          150,
          95,
          105,
          72,
          72,
          170,
          145,
          150,
          148,
          110,
          105,
          110,
          95,
          110,
          110,
          129,
          100,
          90,
          140,
          150,
          120,
          152,
          100,
          105,
          90,
          100,
          78,
          110,
          95,
          150,
          180,
          145,
          130,
          150,
          145,
          110,
          145,
          130,
          110,
          105,
          100,
          98,
          180,
          170,
          190,
          149,
          110,
          140,
          139,
          105,
          100,
          90,
          105,
          110,
          120,
          145,
          165,
          139,
          140,
          115,
          90,
          110,
          130,
          129,
          138,
          135,
          155,
          142,
          125,
          150,
          125,
          90,
          90,
          110,
          105,
          85,
          85,
          112
        ]
      ],
      "y_data": [
        [
          12.0,
          11.5,
          11.0,
          12.0,
          10.5,
          10.0,
          9.0,
          8.5,
          10.0,
          8.5,
          11.5,
          11.0,
          10.5,
          11.0,
          10.0,
          8.0,
          8.0,
          9.5,
          10.0,
          14.0,
          15.0,
          13.5,
          18.5,
          13.0,
          15.5,
          15.5,
          15.5,
          15.5,
          12.0,
          11.5,
          13.5,
          13.0,
          11.5,
          12.0,
          12.0,
          13.5,
          15.0,
          14.5,
          12.0,
          12.0,
          13.5,
          13.0,
          11.5,
          11.0,
          13.5,
          13.5,
          12.5,
          12.5,
          14.0,
          16.0,
          14.0,
          13.0,
          11.5,
          13.0,
          14.5,
          12.5,
          11.5,
          12.0,
          13.0,
          14.5,
          11.0,
          11.0,
          11.0,
          16.5,
          18.0,
          16.0,
          16.5,
          14.0,
          12.5,
          13.0,
          12.5,
          15.0,
          13.0,
          9.5,
          11.0,
          11.0,
          16.0,
          17.0,
          17.0,
          18.0,
          16.5,
          14.0,
          14.5,
          13.5,
          16.0,
          15.5,
          16.0,
          16.0,
          21.0,
          19.5,
          11.5,
          14.0,
          14.5,
          13.5,
          21.0,
          18.5,
          19.0,
          19.0,
          15.0,
          13.5,
          12.0,
          16.0,
          17.0,
          13.0,
          13.0,
          13.9,
          12.8,
          15.4,
          14.5,
          17.6,
          17.7,
          21.0,
          16.2,
          17.8,
          13.2,
          12.1,
          12.0,
          15.0,
          14.0,
          12.5,
          19.0,
          13.7,
          14.9,
          16.4,
          16.9,
          17.7,
          19.0,
          11.1,
          11.4,
          12.2,
          14.5,
          15.5,
          13.2,
          12.8,
          19.2,
          17.2,
          17.2,
          15.8,
          18.7,
          15.1,
          13.2,
          13.4,
          11.2,
          13.7,
          15.4,
          18.2,
          16.6,
          15.4,
          13.4,
          13.2,
          15.2,
          14.9,
          14.3,
          15.0,
          13.0,
          17.4,
          22.2,
          18.7,
          15.8,
          19.0,
          16.6,
          17.0,
          14.7
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Create a scatter plot to illustrate the correlation between Horsepower and Accelerate for cars with Edispl greater than 200."
    ],
    "irrelevant_tables": [
      "car_makers",
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "4015": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Num_of_staff, Score FROM shop",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Num_of_staff, Score FROM shop"
    },
    "chart": "Scatter",
    "hardness": "Extra Hard",
    "db_id": "coffee_shop",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Num_of_staff",
      "y_name": "Score",
      "x_data": [
        [
          13,
          19,
          42,
          27,
          24,
          34,
          425,
          28,
          23,
          16
        ]
      ],
      "y_data": [
        [
          42.0,
          38.0,
          36.0,
          32.0,
          30.0,
          30.0,
          40.0,
          30.0,
          30.0,
          28.0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the relationship between the number of staff and the score of the shop. Scatter plot is preferred."
    ],
    "irrelevant_tables": [
      "member",
      "happy_hour"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y"
        ]
      }
    ]
  },
  "4016": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year, count(*), semester from section where year >=2005 GROUP BY year, semester",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year, count(*), semester from section where year >=2005 GROUP BY year, semester"
    },
    "chart": "Grouping Line",
    "hardness": "Medium",
    "db_id": "college_2",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "semester",
      "x_data": [
        [
          2005,
          2006,
          2007,
          2008,
          2009,
          2010
        ]
      ],
      "y_data": [
        [
          4,
          8,
          6,
          1,
          7,
          5
        ],
        [
          4,
          5,
          6,
          9,
          2,
          6
        ]
      ],
      "classify": [
        "Fall",
        "Spring"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show me the trend of the number of courses in Fall and Spring from 2005 to 2010 by a grouping line chart."
    ],
    "irrelevant_tables": [
      "advisor",
      "course"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4017": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT City, count(*), Status FROM buildings WHERE Height >= 100 GROUP BY City, Status",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT City, count(*), Status FROM buildings WHERE Height >= 100 GROUP BY City, Status"
    },
    "chart": "Stacked Bar",
    "hardness": "Medium",
    "db_id": "company_office",
    "vis_obj": {
      "chart": "bar",
      "x_name": "City",
      "y_name": "count(*)",
      "x_data": [
        [
          "Mexico City",
          "Monterrey"
        ]
      ],
      "y_data": [
        [
          4,
          0
        ],
        [
          1,
          0
        ],
        [
          4,
          1
        ]
      ],
      "classify": [
        "on-hold",
        "proposed",
        "under construction"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Display the count of buildings that are equal to or taller than 100 meters in Mexico City and Monterrey. Represent the distribution of these buildings across different statuses using a stacked bar chart."
    ],
    "irrelevant_tables": [
      "Companies",
      "Office_locations"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "stacked_bar": true
      }
    ]
  },
  "4020": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT c.product_details, sum(a.order_quantity),b.order_status FROM Order_Items a JOIN Customer_Orders b ON a.order_id=b.order_id JOIN Products c ON a.product_id = c.product_id GROUP BY c.product_details, b.order_status ",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT c.product_details, sum(a.order_quantity),b.order_status FROM Order_Items a JOIN Customer_Orders b ON a.order_id=b.order_id JOIN Products c ON a.product_id = c.product_id GROUP BY c.product_details, b.order_status"
    },
    "chart": "Stacked Bar",
    "hardness": "Medium",
    "db_id": "customer_deliveries",
    "vis_obj": {
      "chart": "bar",
      "x_name": "product_details",
      "y_name": "sum(a.order_quantity)",
      "x_data": [
        [
          "Americano",
          "Dove Chocolate",
          "Latte"
        ]
      ],
      "y_data": [
        [
          9,
          9,
          0
        ],
        [
          12,
          43,
          22
        ]
      ],
      "classify": [
        "Delivered",
        "Cancelled"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Utilize a stacked bar chart to compare the quantities of delivered and cancelled ordered products for each product."
    ],
    "irrelevant_tables": [
      "Customers",
      "Trucks"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "stacked_bar": true
      }
    ]
  },
  "4021": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Budget_in_Billions, Num_Employees from department where Ranking <= 10 ",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Budget_in_Billions, Num_Employees from department where Ranking <= 10"
    },
    "chart": "Scatter",
    "hardness": "Medium",
    "db_id": "department_management",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Budget_in_Billions",
      "y_name": "Num_Employees",
      "x_data": [
        [
          9.96,
          11.1,
          439.3,
          23.4,
          10.7,
          77.6,
          6.2,
          59.7,
          543.2,
          46.2
        ]
      ],
      "y_data": [
        [
          30266.0,
          115897.0,
          3000000.0,
          112557.0,
          71436.0,
          109832.0,
          36000.0,
          17347.0,
          67000.0,
          10600.0
        ]
      ],
      "classify": [],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "For those top 10 departments, show the relationship between the budget and the number of employees. Scatter plot."
    ],
    "irrelevant_tables": [
      "head",
      "management"
    ],
    "query_meta": [
      {
        "channel_specified": []
      }
    ]
  },
  "4023": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Assets_billion, Market_Value, Main_Industry from company",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Assets_billion, Market_Value, Main_Industry from company"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Assets_billion",
      "y_name": "Market_Value",
      "x_data": [
        [
          2039.1,
          2550.0,
          1313.9
        ],
        [
          717.2,
          392.6
        ],
        [
          331.1,
          340.5,
          304.7,
          319.4,
          292.5
        ]
      ],
      "y_data": [
        [
          237.4,
          164.3,
          178.7
        ],
        [
          213.7,
          202.2
        ],
        [
          407.4,
          227.6,
          294.7,
          180.0,
          147.4
        ]
      ],
      "classify": [
        "Banking",
        "Conglomerate",
        "Oil and gas"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Scatter plot shows the correlation of assets and market value, colored by Main Industry."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "4024": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Sales_billion, Profits_billion, Main_Industry from company",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Sales_billion, Profits_billion, Main_Industry from company"
    },
    "chart": "Grouping Scatter",
    "hardness": "Easy",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Sales_billion",
      "y_name": "Profits_billion",
      "x_data": [
        [
          82.6,
          102.0,
          87.6
        ],
        [
          147.3,
          143.7
        ],
        [
          433.5,
          470.2,
          310.1,
          145.9,
          375.5
        ]
      ],
      "y_data": [
        [
          25.1,
          16.2,
          15.9
        ],
        [
          14.2,
          10.3
        ],
        [
          41.1,
          30.9,
          20.6,
          20.1,
          25.7
        ]
      ],
      "classify": [
        "Banking",
        "Conglomerate",
        "Oil and gas"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "The relationship between sales and profits, Color by Main Industry. Draw a scatter plot."
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "4025": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Headquarters, sum(Sales_billion), Main_Industry from company where Market_Value > 160 GROUP BY Headquarters, Main_Industry",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Headquarters, sum(Sales_billion), Main_Industry from company where Market_Value > 160 GROUP BY Headquarters, Main_Industry"
    },
    "chart": "Stacked Bar",
    "hardness": "Medium",
    "db_id": "gas_company",
    "vis_obj": {
      "chart": "scatter",
      "x_name": "Sales_billion",
      "y_name": "Profits_billion",
      "x_data": [
        [
          "China",
          "UK",
          "Netherlands",
          "USA",
          "Brazil"
        ]
      ],
      "y_data": [
        [
          82.6,
          102.0,
          0,
          87.6,
          0
        ],
        [
          0,
          0,
          0,
          291.0,
          0
        ],
        [
          310.1,
          0,
          470.2,
          433.5,
          145.9
        ]
      ],
      "classify": [
        "Banking",
        "Conglomerate",
        "Oil and gas"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Create a stacked bar chart displaying the total sales for companies with a market value exceeding 160 in various industries and headquarters"
    ],
    "irrelevant_tables": [
      "gas_station",
      "station_company"
    ],
    "query_meta": [
      {
        "channel_specified": [],
        "stacked_bar": true
      }
    ]
  },
  "4026": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Launch_year, count(*), WiFi FROM chip_model GROUP BY Launch_year, WiFi",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Launch_year, count(*), WiFi FROM chip_model GROUP BY Launch_year, WiFi"
    },
    "chart": "Grouping Line",
    "hardness": "Easy",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Launch_year",
      "y_name": "count(*)",
      "x_data": [
        [
          2002.0,
          2003.0,
          2004.0,
          2005.0
        ]
      ],
      "y_data": [
        [
          2,
          2,
          2,
          1
        ],
        [
          0,
          1,
          4,
          2
        ]
      ],
      "classify": [
        "No",
        "802.11b"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Line chart shows the number of chip model launched each year colored by WiFi."
    ],
    "irrelevant_tables": [
      "phone",
      "screen_mode"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4027": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Launch_year, count(*), Slots FROM chip_model GROUP BY Launch_year, Slots",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Launch_year, Launch_year, Slots FROM chip_model GROUP BY Launch_year, Slots"
    },
    "chart": "Grouping Line",
    "hardness": "Easy",
    "db_id": "phone_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Launch_year",
      "y_name": "count(*)",
      "x_data": [
        [
          2002,
          2003,
          2004,
          2005
        ]
      ],
      "y_data": [
        [
          2,
          0,
          3,
          3
        ],
        [
          0,
          3,
          3,
          0
        ]
      ],
      "classify": [
        "1CFII,1SD",
        "1SD"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Generate a line chart displaying the annual count of launched chip models, with color differentiation based on slots."
    ],
    "irrelevant_tables": [
      "phone",
      "screen_mode"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4028": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Built_Year, count(*),  Class from ship GROUP BY Class, Built_Year",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Built_Year, count(*),  Class from ship GROUP BY Class, Built_Year"
    },
    "chart": "Stacked Bar",
    "hardness": "Easy",
    "db_id": "ship_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Built_Year",
      "y_name": "count(*)",
      "x_data": [
        [
          1997,
          1998
        ]
      ],
      "y_data": [
        [
          0,
          1
        ],
        [
          5,
          3
        ]
      ],
      "classify": [
        "GL",
        "KR"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Stacked bar shows the distribution of ships built in different years colored by class."
    ],
    "irrelevant_tables": [
      "captain"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": true
      }
    ]
  },
  "4030": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year, count(*), Grape from wine where price > 100 group by Year, Grape ",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year, count(*), Grape from wine where price > 100 group by Year, Grape "
    },
    "chart": "Stacked Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "count(*)",
      "x_data": [
        [
          2006,
          2007,
          2008
        ]
      ],
      "y_data": [
        [
          4,
          11,
          2
        ],
        [
          1,
          1,
          0
        ],
        [
          1,
          1,
          0
        ]
      ],
      "classify": [
        "Cabernet Sauvingnon",
        "Grenache",
        "Syrah"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Stacked bar shows the distribution of wines with price over 100 in different years colored by grape."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": true
      }
    ]
  },
  "4031": {
    "vis_query": {
      "vis_part": "Visualize BAR",
      "data_part": {
        "sql_part": "SELECT Year, count(*), Grape from wine where Score > 95 group by Year, Grape",
        "binning": ""
      },
      "VQL": "Visualize BAR SELECT Year, count(*), Grape from wine where Score > 95 group by Year, Grape"
    },
    "chart": "Stacked Bar",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Year",
      "y_name": "count(*)",
      "x_data": [
        [
          2006,
          2007
        ]
      ],
      "y_data": [
        [
          1,
          3
        ],
        [
          1,
          0
        ],
        [
          1,
          1
        ]
      ],
      "classify": [
        "Cabernet Sauvingnon",
        "Grenache",
        "Syrah"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "Show the number of wines with score over 95 in different years colored by grape. Stacked bar chart."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ],
        "stacked_bar": true
      }
    ]
  },
  "4032": {
    "vis_query": {
      "vis_part": "Visualize SCATTER",
      "data_part": {
        "sql_part": "SELECT Price, Score, Grape from wine where Grape in ('Grenache', 'Syrah','Zinfandel')",
        "binning": ""
      },
      "VQL": "Visualize SCATTER SELECT Price, Score, Grape from wine where Grape in ('Grenache', 'Syrah','Zinfandel')"
    },
    "chart": "Grouping Scatter",
    "hardness": "Medium",
    "db_id": "wine_1",
    "vis_obj": {
      "chart": "bar",
      "x_name": "Price",
      "y_name": "Score",
      "x_data": [
        [
          44,
          35,
          40,
          38,
          44,
          15,
          18,
          43,
          29,
          34,
          32,
          42,
          40,
          28,
          38,
          24,
          20,
          18,
          18,
          30,
          13,
          45,
          24,
          35,
          33,
          48,
          40,
          23,
          43,
          27,
          50,
          27,
          20,
          18,
          18,
          19,
          18,
          18,
          35,
          26,
          20,
          20,
          15,
          12,
          10,
          25,
          25,
          22,
          17,
          33,
          55,
          35,
          35,
          38,
          41,
          32,
          32,
          28,
          34,
          50,
          35,
          28,
          30,
          28,
          18,
          22,
          25,
          24,
          27,
          30,
          18,
          45,
          45,
          24,
          18,
          14,
          12,
          25
        ],
        [
          200,
          36,
          35,
          48,
          39,
          42,
          38,
          100,
          135,
          15
        ],
        [
          60,
          76,
          200,
          65,
          40,
          45,
          36,
          36,
          42,
          55,
          38,
          40,
          40,
          27,
          44,
          50,
          55,
          38,
          22,
          35,
          17,
          40,
          20,
          60,
          45,
          25,
          25,
          38,
          40,
          30,
          35,
          45,
          30,
          24,
          18,
          9,
          38,
          60,
          28,
          52,
          45,
          25,
          75,
          45,
          45,
          55,
          43,
          43,
          75,
          38,
          55,
          75,
          36,
          35,
          30,
          45,
          135,
          40,
          18,
          45,
          16
        ]
      ],
      "y_data": [
        [
          93,
          93,
          91,
          89,
          88,
          88,
          87,
          93,
          93,
          93,
          92,
          91,
          90,
          90,
          89,
          88,
          88,
          88,
          87,
          87,
          86,
          86,
          91,
          91,
          95,
          94,
          93,
          92,
          91,
          91,
          91,
          89,
          89,
          89,
          88,
          88,
          87,
          87,
          87,
          86,
          86,
          84,
          84,
          82,
          82,
          78,
          88,
          88,
          83,
          90,
          89,
          89,
          89,
          89,
          89,
          88,
          88,
          88,
          88,
          88,
          88,
          88,
          88,
          88,
          87,
          87,
          87,
          87,
          87,
          87,
          87,
          87,
          87,
          87,
          86,
          86,
          85,
          86
        ],
        [
          97,
          93,
          91,
          88,
          87,
          87,
          87,
          93,
          91,
          90
        ],
        [
          94,
          92,
          98,
          95,
          94,
          93,
          93,
          93,
          93,
          92,
          92,
          92,
          91,
          91,
          91,
          90,
          90,
          90,
          89,
          89,
          88,
          88,
          88,
          88,
          88,
          88,
          88,
          88,
          87,
          87,
          87,
          87,
          87,
          87,
          84,
          83,
          93,
          93,
          92,
          91,
          91,
          91,
          90,
          90,
          90,
          90,
          98,
          94,
          94,
          93,
          93,
          93,
          93,
          92,
          91,
          92,
          92,
          89,
          88,
          88,
          87
        ]
      ],
      "classify": [
        "Zinfandel",
        "Grenache",
        "Syrah"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "A scatter plot illustrating the prices and scores of grapes Grenache, Syrah, and Zinfandel, with each grape differentiated by color."
    ],
    "irrelevant_tables": [
      "appellations",
      "grapes"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "classify"
        ]
      }
    ]
  },
  "4033": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT Year, max(Accelerate), Cylinders FROM cars_data where year >=1973 and year<1980 and Cylinders in (4,6,8) GROUP BY Year, Cylinders",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT Year, max(Accelerate), Cylinders FROM cars_data where year >=1973 and year<1980 and Cylinders in (4,6,8) GROUP BY Year, Cylinders"
    },
    "chart": "Grouping Line",
    "hardness": "Hard",
    "db_id": "car_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "Year",
      "y_name": "max(Accelerate)",
      "x_data": [
        [
          1973,
          1974,
          1975,
          1976,
          1977,
          1978,
          1979
        ]
      ],
      "y_data": [
        [
          21.0,
          21.0,
          18.5,
          22.2,
          18.6,
          21.5,
          24.8
        ],
        [
          18.0,
          18.0,
          21.0,
          21.0,
          19.0,
          19.2,
          18.2
        ],
        [
          14.5,
          16.0,
          14.5,
          15.0,
          19.0,
          15.5,
          22.2
        ]
      ],
      "classify": [
        "4",
        "6",
        "8"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "From 1973 to 1979, show the maximum acceleration of cars with 4, 6, and 8 cylinders each year. Line chart."
    ],
    "irrelevant_tables": [
      "car_makers",
      "continents"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  },
  "4034": {
    "vis_query": {
      "vis_part": "Visualize LINE",
      "data_part": {
        "sql_part": "SELECT year, max(salary), team_id FROM salary WHERE team_id in ('ATL', 'ARI', 'CHA') and year >= 2000 GROUP BY year, team_id",
        "binning": ""
      },
      "VQL": "Visualize LINE SELECT year, max(salary), team_id FROM salary WHERE team_id in ('ATL', 'ARI', 'CHA') and year >= 2000 GROUP BY year, team_id"
    },
    "chart": "Grouping Line",
    "hardness": "Medium",
    "db_id": "baseball_1",
    "vis_obj": {
      "chart": "line",
      "x_name": "year",
      "y_name": "max(salary)",
      "x_data": [
        [
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015
        ]
      ],
      "y_data": [
        [
          13350000,
          13350000,
          13350000,
          15000000,
          16000000,
          11000000,
          10673328,
          9100546,
          15100546,
          11666666,
          8500000,
          5850000,
          7750000,
          10000000,
          11000000,
          12000000
        ],
        [
          11100000,
          12500000,
          13100000,
          14750000,
          15333333,
          16061802,
          14503543,
          14500000,
          15975184,
          15500000,
          15000000,
          15000000,
          14000000,
          13146942,
          14250000,
          12000000
        ],
        [
          7100000,
          9927000,
          9927000,
          9000000,
          14000000,
          8750000,
          14166667,
          14833333,
          15666666,
          14000000,
          15000000,
          16000000,
          17000000,
          16157271,
          15000000,
          15750000
        ]
      ],
      "classify": [
        "ARI",
        "ATL",
        "CHA"
      ],
      "describe": "",
      "sort": null
    },
    "nl_queries": [
      "The maximum salary of players in teams ARI, ATL, and CHA in each year start from 2000. Line chart."
    ],
    "irrelevant_tables": [
      "all_star",
      "pitching"
    ],
    "query_meta": [
      {
        "channel_specified": [
          "x",
          "y",
          "classify"
        ]
      }
    ]
  }
}