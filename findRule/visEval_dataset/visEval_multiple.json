{"4": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"}, "chart": "Pie", "hardness": "Medium", "db_id": "activity_1", "vis_obj": {"chart": "pie", "x_name": "Rank", "y_name": "count(*)", "x_data": [["AssocProf", "AsstProf", "Professor"]], "y_data": [[2, 18, 14]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all the faculty ranks and the number of students advised by each rank with a pie chart.", "Return a pie on how many students are advised by each rank of faculty? List the rank and the number of students.", "A pie chart about how many students are advised by each rank of faculty? List the rank and the number of students.", "How many students are advised by each rank of faculty? List the rank and the number of students with a pie chart."], "irrelevant_tables": ["Faculty_Participates_in", "Participates_in"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "5": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"}, "chart": "Bar", "hardness": "Medium", "db_id": "activity_1", "vis_obj": {"chart": "bar", "x_name": "Rank", "y_name": "count(*)", "x_data": [["AssocProf", "AsstProf", "Professor"]], "y_data": [[2, 18, 14]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all the faculty ranks and the number of students advised by each rank in a bar chart.", "Show all the faculty ranks and the number of students advised by each rank. Visualize by bar chart.", "Show me a bar chart for how many students are advised by each rank of faculty? List the rank and the number of students.", "How many students are advised by each rank of faculty? List the rank and the number of students in a bar chart.", "How many students are advised by each rank of faculty? List the rank and the number of students. Plot them as bar chart."], "irrelevant_tables": ["Participates_in", "Activity"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "32": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "binning": ""}, "VQL": "Visualize BAR SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"}, "chart": "Bar", "hardness": "Medium", "db_id": "aircraft", "vis_obj": {"chart": "bar", "x_name": "Aircraft", "y_name": "COUNT(*)", "x_data": [["Robinson R-22", "Bell 206B3 JetRanger", "CH-47D Chinook", "Mil Mi-26", "CH-53E Super Stallion"]], "y_data": [[2, 1, 1, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the names of aircrafts and the number of times it won matches by a bar chart.", "List the names of aircrafts and the number of times it won matches. Plot them as bar chart.", "For each aircraft that has won an award, what is its name and how many time has it won. Plot them as bar chart."], "irrelevant_tables": ["pilot", "airport_aircraft"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "35": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft", "binning": ""}, "VQL": "Visualize PIE SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft"}, "chart": "Pie", "hardness": "Medium", "db_id": "aircraft", "vis_obj": {"chart": "pie", "x_name": "Aircraft", "y_name": "COUNT(Aircraft)", "x_data": [["Bell 206B3 JetRanger", "CH-47D Chinook", "CH-53E Super Stallion", "Mil Mi-26", "Robinson R-22"]], "y_data": [[1, 1, 1, 2, 2]], "classify": [], "describe": "GROUP BY Aircraft", "sort": null}, "nl_queries": ["Frequency of the aircrafts that has win an award, across by its name as a pie chart"], "irrelevant_tables": ["airport", "pilot"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "36": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft", "binning": ""}, "VQL": "Visualize BAR SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft"}, "chart": "Bar", "hardness": "Medium", "db_id": "aircraft", "vis_obj": {"chart": "bar", "x_name": "Aircraft", "y_name": "COUNT(Aircraft)", "x_data": [["Bell 206B3 JetRanger", "CH-47D Chinook", "CH-53E Super Stallion", "Mil Mi-26", "Robinson R-22"]], "y_data": [[1, 1, 1, 2, 2]], "classify": [], "describe": "GROUP BY Aircraft", "sort": null}, "nl_queries": ["Please list the number of each winning aircraft in a bar chart.", "What is the number of each winning aircraft? Visualize by bar chart."], "irrelevant_tables": ["airport_aircraft", "airport"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "37": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype"}, "chart": "Pie", "hardness": "Medium", "db_id": "allergy_1", "vis_obj": {"chart": "pie", "x_name": "AllergyType", "y_name": "count(*)", "x_data": [["animal", "environmental", "food"]], "y_data": [[8, 23, 28]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all allergy type with number of students affected by a pie chart.", "Return a pie chart on how many students are affected by each allergy type?"], "irrelevant_tables": ["Student"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "54": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType"}, "chart": "Pie", "hardness": "Hard", "db_id": "allergy_1", "vis_obj": {"chart": "pie", "x_name": "AllergyType", "y_name": "COUNT(AllergyType)", "x_data": [["animal", "environmental", "food"]], "y_data": [[2, 4, 4]], "classify": [], "describe": "GROUP BY AllergyType", "sort": null}, "nl_queries": ["What is the number of each allergie type that the student with first name Lisa has? Return a pie chart.", "What is the number of each allergie type the girl named Lisa has? Show a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "55": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType"}, "chart": "Bar", "hardness": "Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "AllergyType", "y_name": "COUNT(AllergyType)", "x_data": [["animal", "environmental", "food"]], "y_data": [[2, 4, 4]], "classify": [], "describe": "GROUP BY AllergyType", "sort": null}, "nl_queries": ["What is the number of each allergie type that the student with first name Lisa has? Visualize by bar chart.", "What is the number of each allergie type the girl named Lisa has? Show bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "65": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\" BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2016", "2017"]], "y_data": [[6, 3]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": null}, "nl_queries": ["Show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each year in a bar chart.", "What are the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each year? Plot a bar chart."], "irrelevant_tables": ["Apartment_Buildings", "View_Unit_Status"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "68": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\" BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[2, 2, 1, 1, 1, 2, 0]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": null}, "nl_queries": ["Use a bar chart to show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each weekday.", "A bar chart showing the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each weekday."], "irrelevant_tables": ["Apartments", "Apartment_Buildings"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "69": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2 BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2016", "2017"]], "y_data": [[9, 6]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": null}, "nl_queries": ["What is the number of booking start dates of the apartments with more than 2 bedrooms for each year? Return a bar chart.", "Find the number of booking start date for the apartments that have more than two bedrooms for each year with a bar chart."], "irrelevant_tables": ["View_Unit_Status", "Apartment_Facilities"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "72": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2 BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[4, 2, 1, 1, 2, 4, 1]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": null}, "nl_queries": ["What is the number of booking start dates of the apartments with more than 2 bedrooms for each weekday? Draw a bar chart.", "Find the number of booking start date for the apartments that have more than two bedrooms for each weekday in a bar chart."], "irrelevant_tables": ["View_Unit_Status", "Apartment_Buildings"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "77": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\" BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[2, 1, 1, 1, 1, 1, 0]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": null}, "nl_queries": ["What is the booking start dates of the apartments with type code \"Duplex\"? Bin the booking start dates into weekday interval with a bar chart.", "Return the booking start date for the apartments that have type code \"Duplex\" and bin the booking start dates into weekday interval with a bar chart."], "irrelevant_tables": ["Apartment_Buildings", "Guests"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "81": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code", "binning": ""}, "VQL": "Visualize PIE SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code"}, "chart": "Pie", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "pie", "x_name": "facility_code", "y_name": "COUNT(facility_code)", "x_data": [["Cable TV", "Gym"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY facility_code", "sort": null}, "nl_queries": ["A pie chart for showing the number of the facility codes of apartments with more than 4 bedrooms.", "What are the facility codes of the apartments with more than four bedrooms, and count them by a pie chart", "Show the facility codes of apartments with more than 4 bedrooms, and count them by a pie chart", "A pie chart for what are the number of the facility codes of the apartments with more than four bedrooms?"], "irrelevant_tables": ["View_Unit_Status", "Apartment_Buildings"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "98": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Medium", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2016", "2017"]], "y_data": [[9, 6]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": null}, "nl_queries": ["Show the number of start dates of all the apartment bookings for each year with a bar chart."], "irrelevant_tables": ["View_Unit_Status", "Apartment_Facilities"], "query_meta": [{"channel_specified": []}]}, "103": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code"}, "chart": "Pie", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "pie", "x_name": "apt_type_code", "y_name": "COUNT(apt_type_code)", "x_data": [["Duplex", "Flat", "Studio"]], "y_data": [[2, 1, 1]], "classify": [], "describe": "GROUP BY apt_type_code", "sort": null}, "nl_queries": ["Give me a pie chart showing the number of buildings managed by \"Kyle\" and group by apartment type codes .", "How many buildings are managed by \"Kyle\"? Please return a pie chart grouping by apartment type codes."], "irrelevant_tables": ["Apartment_Facilities", "Apartment_Bookings"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "120": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description", "binning": ""}, "VQL": "Visualize BAR SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description"}, "chart": "Bar", "hardness": "Medium", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "fault_description", "y_name": "COUNT(fault_description)", "x_data": [["failed parts", "system error"]], "y_data": [[6, 9]], "classify": [], "describe": "GROUP BY fault_description", "sort": null}, "nl_queries": ["A bar chart about the number of faluts for different fault description recorded in the logs."], "irrelevant_tables": ["Skills", "Maintenance_Contracts"], "query_meta": [{"channel_specified": []}]}, "131": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description", "binning": ""}, "VQL": "Visualize PIE SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"}, "chart": "Pie", "hardness": "Medium", "db_id": "assets_maintenance", "vis_obj": {"chart": "pie", "x_name": "skill_description", "y_name": "COUNT(skill_description)", "x_data": [["Electrical", "Mechanical", "TV, Video"]], "y_data": [[9, 6, 5]], "classify": [], "describe": "GROUP BY skill_description", "sort": null}, "nl_queries": ["Give me a pie chart about the number of engineers for different skill description."], "irrelevant_tables": ["Assets", "Skills_Required_To_Fix"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "138": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name", "binning": ""}, "VQL": "Visualize PIE SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name"}, "chart": "Pie", "hardness": "Medium", "db_id": "assets_maintenance", "vis_obj": {"chart": "pie", "x_name": "part_name", "y_name": "count(*)", "x_data": [["middle", "package", "top"]], "y_data": [[5, 6, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return a pie on how many assets can each parts be used in? List the part name and the number.", "How many assets can each parts be used in? List the part name and the number by a pie chart."], "irrelevant_tables": ["Third_Party_Companies", "Maintenance_Engineers"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "146": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_short_name , COUNT(fault_short_name) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  fault_short_name", "binning": ""}, "VQL": "Visualize BAR SELECT fault_short_name , COUNT(fault_short_name) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  fault_short_name"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "fault_short_name", "y_name": "COUNT(fault_short_name)", "x_data": [["MW", "PW", "TW"]], "y_data": [[0, 3, 0], [1, 2, 2], [4, 2, 1]], "classify": ["Electrical", "Mechanical", "TV, Video"], "describe": "GROUP BY skill_description, GROUP BY fault_short_name", "sort": null}, "nl_queries": ["A stacked bar chart showing the number of faults for different fault short name and skills required to fix them. The x-axis is falut short name and group by skill description."], "irrelevant_tables": ["Maintenance_Engineers", "Fault_Log_Parts"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "stacked_bar": true}]}, "150": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description", "binning": ""}, "VQL": "Visualize PIE SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"}, "chart": "Pie", "hardness": "Medium", "db_id": "assets_maintenance", "vis_obj": {"chart": "pie", "x_name": "skill_description", "y_name": "COUNT(skill_description)", "x_data": [["Electrical", "Mechanical", "TV, Video"]], "y_data": [[3, 5, 7]], "classify": [], "describe": "GROUP BY skill_description", "sort": null}, "nl_queries": ["A pie chart listing the number of faults for different description of skills required to fix them."], "irrelevant_tables": ["Fault_Log", "Engineer_Visits"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "158": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "binning": "BIN year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "baseball_1", "vis_obj": {"chart": "bar", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[2, 3, 3, 2, 2, 1, 0]], "classify": [], "describe": "BIN year BY WEEKDAY", "sort": null}, "nl_queries": ["Show me the frequency of the weekdays (binning year into weekdays interval) that the team Boston Red Stockings won in the postseasons with a bar chart."], "irrelevant_tables": ["batting_postseason", "team_half"], "query_meta": [{"channel_specified": []}]}, "163": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year"}, "chart": "Line", "hardness": "Hard", "db_id": "baseball_1", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "count(*)", "x_data": [["1903", "1912", "1915", "1916", "1918", "1975", "1986", "1999", "2003", "2004", "2007", "2008", "2013"]], "y_data": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 5, 15]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons. Visualize by line chart."], "irrelevant_tables": ["player_award_vote", "fielding_postseason"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "175": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT killed , injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'", "binning": ""}, "VQL": "Visualize SCATTER SELECT killed , injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'"}, "chart": "Scatter", "hardness": "Medium", "db_id": "battle_death", "vis_obj": {"chart": "scatter", "x_name": "killed", "y_name": "injured", "x_data": [[8, 3, 25, 2, 0, 4, 0, 29, 0, 0, 14]], "y_data": [[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["plot scatter on what are the death and injury situations caused by the ship with tonnage 't'?", "Visualize a scatter chart on what are the death and injury situations caused by the ship with tonnage 't'?", "What are the death and injury situations caused by the ship with tonnage 't'. Visualize by scatter chart."], "irrelevant_tables": ["battle"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "308": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat", "binning": ""}, "VQL": "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat"}, "chart": "Scatter", "hardness": "Easy", "db_id": "bike_1", "vis_obj": {"chart": "scatter", "x_name": "lat", "y_name": "min(T2.duration)", "x_data": [[37.329732, 37.330698, 37.333988, 37.331415, 37.336721, 37.333798, 37.330165, 37.348742, 37.337391, 37.335885, 37.332808, 37.339301, 37.332692, 37.333955, 37.481758, 37.486078000000006, 37.487616, 37.484219, 37.48537, 37.487682, 37.389218, 37.394358, 37.40694000000001, 37.39027700000001, 37.400443, 37.385956, 37.400241, 37.443988, 37.444521, 37.429082, 37.448598, 37.4256839, 37.78387100000001, 37.795001, 37.79728, 37.794231, 37.795425, 37.788975, 37.799953, 37.790302, 37.795392, 37.79146400000001, 37.787152, 37.789756, 37.792251, 37.781752, 37.77865, 37.781332, 37.80477, 37.780526, 37.785299, 37.78697800000001, 37.782259, 37.771058, 37.774814, 37.776619, 37.784878000000006, 37.7766, 37.776617, 37.788446, 37.781039, 37.798522, 37.794139, 37.7913, 37.786305, 37.789625, 37.352601, 37.798541, 37.491269, 37.342725]], "y_data": [[195, 211, 169, 237, 182, 147, 161, 259, 219, 209, 205, 101, 165, 258, 198, 206, 126, 1193, 651, 225, 145, 189, 153, 191, 198, 166, 320, 80, 631, 151, 145, 166, 104, 92, 84, 76, 175, 73, 111, 139, 114, 63, 136, 86, 72, 73, 120, 107, 62, 68, 111, 62, 71, 138, 70, 101, 126, 77, 61, 209, 106, 143, 64, 87, 140, 104, 409, 105, 225, 269]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each station, just show its latitude and the minimum duration of trips that ended at the station using a scatter chart.", "Can you give me each end station's latitude and minimum duration for trips ended there with a scatter chart?"], "irrelevant_tables": ["status", "weather"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "328": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"}, "chart": "Scatter", "hardness": "Medium", "db_id": "bike_1", "vis_obj": {"chart": "scatter", "x_name": "long", "y_name": "avg(T2.duration)", "x_data": [[-121.901782, -121.888979, -121.894902, -121.8932, -121.894074, -121.886943, -121.885831, -121.894715, -121.886995, -121.88566000000002, -121.883891, -121.88993700000002, -121.900084, -121.877349, -122.226904, -122.232089, -122.227424, -122.203288, -122.223492, -122.081896, -122.07671299999998, -122.106758, -122.066553, -122.108338, -122.083678, -122.099076, -122.164759, -122.163093, -122.142805, -122.159504, -122.13777749999998, -122.408433, -122.39997, -122.398436, -122.402923, -122.404767, -122.403452, -122.398525, -122.390637, -122.394203, -122.391034, -122.388013, -122.394643, -122.39708600000002, -122.405127, -122.418235, -122.418603, -122.403234, -122.39028799999998, -122.39623600000002, -122.398108, -122.392738, -122.402717, -122.418954, -122.417385, -122.401014, -122.39547, -122.39526, -122.408499, -122.411748, -122.407245, -122.394434, -122.399051, -122.404966, -122.400811, -121.905733, -122.40086200000002, -122.236234, -121.895617]], "y_data": [[544.7611940298508, 885, 378.28, 980.0714285714287, 840.225, 529.0909090909091, 682.3333333333334, 1230.655172413793, 1123.4, 810.5416666666665, 711.7777777777777, 616.4, 608.8333333333334, 3597.095238095238, 3909, 2643.871794871795, 741, 979.0666666666667, 555.4, 563.0333333333333, 714.8062015503875, 380.4090909090909, 918.1315789473683, 667.5925925925926, 1082.7142857142858, 699.7, 1653.3255813953488, 2643.6, 1423.842105263158, 1164.1153846153845, 872.2222222222223, 1245.5836909871246, 906.0827586206897, 1067.6629213483143, 524.774834437086, 1497.7671232876712, 825.1928571428572, 1817.221649484536, 655.7166666666667, 1802.6721991701245, 938.7894736842104, 766.0746268656717, 535.0488372093023, 752.6637554585153, 551.4051282051282, 1774.6315789473686, 734.3861386138614, 1630.002267573696, 905.3340611353713, 399.6787330316742, 414.5117370892018, 512.8461538461538, 568.9297752808989, 912.8475609756098, 1139.6389891696754, 561.7394957983194, 725.3219284603423, 801.9405320813771, 765.4458598726114, 1276.7208121827412, 1423.375, 890.9441964285713, 655.2933333333333, 1664.8505338078294, 786.4408284023668, 862.4666666666667, 1044.7237569060774, 253.33333333333331, 556]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each station, just simply show its longitude and the average duration of trips that started from the station using a scatter chart.", "Please return a scatter chart to show each start station's longitude and the corresponding average duration of trips started there."], "irrelevant_tables": ["weather", "status"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "368": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "browser_web", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Firefox", "Internet Explorer", "Opera", "Safari"]], "y_data": [[2, 3, 2, 2]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["A bar chart showing the number of accelerators for each browser."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "370": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name", "binning": ""}, "VQL": "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"}, "chart": "Pie", "hardness": "Medium", "db_id": "browser_web", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["CACHEbox", "CProxy", "Fasterfox", "Nitro", "fasTun"]], "y_data": [[2, 2, 3, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["A pie chart showing the proportion of the number of browsers for each accelerator."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "419": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"}, "chart": "Pie", "hardness": "Medium", "db_id": "car_1", "vis_obj": {"chart": "pie", "x_name": "Continent", "y_name": "count(*)", "x_data": [["america", "europe", "asia", "africa", "australia"]], "y_data": [[3, 6, 2, 2, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["How many countries does each continent have? List the continent name and the number of countries in a pie chart.", "For each continent, list how many countries it has in a pie chart."], "irrelevant_tables": ["model_list", "cars_data"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "433": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"}, "chart": "Pie", "hardness": "Medium", "db_id": "car_1", "vis_obj": {"chart": "pie", "x_name": "Continent", "y_name": "count(*)", "x_data": [["america", "asia", "europe"]], "y_data": [[4, 7, 11]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["How many car makers are there in each continents? List the continent name and the count with a pie chart.", "Display a pie chart for what is the name of each continent and how many car makers are there in each one?", "Show me a pie chart for what is the name of each continent and how many car makers are there in each one?"], "irrelevant_tables": ["model_list", "car_names"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "440": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"", "binning": "BIN InvoiceDate BY YEAR"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\" BIN InvoiceDate BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "chinook_1", "vis_obj": {"chart": "bar", "x_name": "InvoiceDate", "y_name": "COUNT(InvoiceDate)", "x_data": [["2009", "2010", "2012", "2013"]], "y_data": [[1, 2, 3, 1]], "classify": [], "describe": "BIN InvoiceDate BY YEAR", "sort": null}, "nl_queries": ["How many invoices are issued for customers with the first name Astrid and the last name Gruber during each year, and show them by a bar chart"], "irrelevant_tables": ["Album", "PlaylistTrack"], "query_meta": [{"channel_specified": []}]}, "441": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"", "binning": "BIN InvoiceDate BY WEEKDAY"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\" BIN InvoiceDate BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "chinook_1", "vis_obj": {"chart": "bar", "x_name": "InvoiceDate", "y_name": "COUNT(InvoiceDate)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[2, 2, 1, 0, 1, 1, 0]], "classify": [], "describe": "BIN InvoiceDate BY WEEKDAY", "sort": null}, "nl_queries": ["How many invoices are issued for customers with the first name Astrid and the last name Gruber, bin date by weekday, and show them by a bar chart"], "irrelevant_tables": ["Employee", "Genre"], "query_meta": [{"channel_specified": []}]}, "446": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title", "binning": ""}, "VQL": "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"}, "chart": "Pie", "hardness": "Easy", "db_id": "cinema", "vis_obj": {"chart": "pie", "x_name": "Title", "y_name": "max(T1.price)", "x_data": [["The Case of the Mystery Weekend", "The Case of the Smart Dummy", "The Case: Off the Record", "The Case of the Bermuda Triangle", "The Case of the Piggy Banker"]], "y_data": [[15.99, 12.99, 8.99, 9.99, 12.99]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Display a pie chart for what are the title and maximum price of each film?", "What are the title and maximum price of each film. Show a pie chart.", "Give me the title and highest price for each film by a pie chart."], "irrelevant_tables": ["cinema"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "451": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title"}, "chart": "Bar", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Title", "y_name": "AVG(Price)", "x_data": [["The Case of the Bermuda Triangle", "The Case of the Mystery Weekend", "The Case of the Piggy Banker", "The Case of the Smart Dummy", "The Case: Off the Record"]], "y_data": [[9.99, 12.99, 12.99, 12.99, 8.99]], "classify": [], "describe": "GROUP BY Title", "sort": null}, "nl_queries": ["Show the average price of each film in a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "457": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Carrowleagh", "Codling", "Gortahile", "Mount Callan", "Oriel"]], "y_data": [[1, 3, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of films for each cinema in a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "461": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "SUM(Price)", "x_data": [["Carrowleagh", "Codling", "Gortahile", "Mount Callan", "Oriel"]], "y_data": [[9.99, 34.97, 12.99, 9.99, 15.99]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Give me a pie chart showing sum of price for each cinema."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "462": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Title , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title", "binning": ""}, "VQL": "Visualize PIE SELECT Title , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title"}, "chart": "Pie", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "pie", "x_name": "Title", "y_name": "SUM(Price)", "x_data": [["The Case of the Bermuda Triangle", "The Case of the Mystery Weekend", "The Case of the Piggy Banker", "The Case of the Smart Dummy", "The Case: Off the Record"]], "y_data": [[9.99, 38.97, 12.99, 12.99, 8.99]], "classify": [], "describe": "GROUP BY Title", "sort": null}, "nl_queries": ["Return a pie chart showing sum of price for each film."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "463": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date"}, "chart": "Bar", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "COUNT(Date)", "x_data": [["11 July", "19 May", "2 Aug", "20 May", "21 Jun", "21 May"]], "y_data": [[1, 1, 1, 1, 1, 2]], "classify": [], "describe": "GROUP BY Date", "sort": null}, "nl_queries": ["For each record in schedule, show the number of films for each day in a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "478": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "sum(T1.show_times_per_day)", "x_data": [["Codling", "Carrowleagh", "Gortahile", "Mount Callan", "Oriel"]], "y_data": [[10, 5, 4, 5, 5]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show me a pie chart for what is total number of show times per dat for each cinema?", "Pie. what is total number of show times per dat for each cinema?"], "irrelevant_tables": ["film"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "479": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "sum(T1.show_times_per_day)", "x_data": [["Codling", "Carrowleagh", "Gortahile", "Mount Callan", "Oriel"]], "y_data": [[10, 5, 4, 5, 5]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Display a bar chart for what is total number of show times per dat for each cinema?", "What is total number of show times per dat for each cinema. Show bar chart."], "irrelevant_tables": ["film"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "487": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "climbing", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Duwoni / Mt Speke (Vittorio Emanuele Pk)", "Kibo (Uhuru Pk)", "Mawenzi (Hans Meyer Pk)", "Mount Kenya (Batian)", "Mount Kenya (Lenana)"]], "y_data": [[2, 2, 1, 3, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of climbers for each mountain in a pie chart.", "What is the number of climbers for each mountain? Show me a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "488": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name"}, "chart": "Bar", "hardness": "Medium", "db_id": "climbing", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Duwoni / Mt Speke (Vittorio Emanuele Pk)", "Kibo (Uhuru Pk)", "Mawenzi (Hans Meyer Pk)", "Mount Kenya (Batian)", "Mount Kenya (Lenana)"]], "y_data": [[2, 2, 1, 3, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of climbers for each mountain in a bar chart.", "What is the number of climbers for each mountain? Show me a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "513": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"}, "chart": "Bar", "hardness": "Medium", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "DEPT_CODE", "y_name": "sum(T1.crs_credit)", "x_data": [["ACCT", "CIS"]], "y_data": [[15, 27]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the total credits of all classes offered by each department. Visualize by bar chart.", "A bar chart about what are the total number of credits offered by each department?", "What are the total number of credits offered by each department. Show bar chart."], "irrelevant_tables": ["PROFESSOR", "EMPLOYEE"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "526": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "DEPT_NAME", "y_name": "count(*)", "x_data": [["Accounting", "Computer Info. Systems", "Biology"]], "y_data": [[3, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of students in each department that has the top 3 highest number of students with a bar chart.", "Which departments have the top 3 highest number of students? Show the department name and number of students with a bar chart."], "irrelevant_tables": ["COURSE", "CLASS"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "527": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "pie", "x_name": "DEPT_ADDRESS", "y_name": "count(*)", "x_data": [["KLR 211, Box 52", "KLR 333, Box 56", "AAK 230, Box 415"]], "y_data": [[3, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of students in each department that has the top 3 highest number of students. Show the department address and number of students with a pie chart.", "Which departments have the top 3 highest number of students? Show the department address and number of students with a pie chart."], "irrelevant_tables": ["COURSE", "EMPLOYEE"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "551": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME", "binning": "BIN EMP_HIREDATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME BIN EMP_HIREDATE BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_HIREDATE", "y_name": "COUNT(EMP_HIREDATE)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[0, 0, 0, 0, 1, 1, 0]], "classify": [], "describe": "GROUP BY EMP_LNAME, BIN EMP_HIREDATE BY WEEKDAY", "sort": null}, "nl_queries": ["Show the number of professors who is in office DRE 102 hired in each weekday with a bar chart.", "How many professors whose office is located in DRE 102 are hired in each weekday? Return a bar chart."], "irrelevant_tables": ["DEPARTMENT", "ENROLL"], "query_meta": [{"channel_specified": [], "stacked_bar": false}, {"channel_specified": [], "stacked_bar": false}]}, "561": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME"}, "chart": "Bar", "hardness": "Medium", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Arnelle", "Carlos", "Gerald", "Ismael", "Peter", "Robert"]], "y_data": [[2, 2, 3, 2, 3, 1]], "classify": [], "describe": "GROUP BY EMP_FNAME", "sort": null}, "nl_queries": ["Show the number of courses for each instructor (indicated by first name) in a bar chart.", "How many courses for each teacher? Show me a bar graph with each teacher by first name."], "irrelevant_tables": ["STUDENT", "DEPARTMENT"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "574": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"}, "chart": "Bar", "hardness": "Medium", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "SCHOOL_CODE", "y_name": "count(*)", "x_data": [["A&SCI", "BUS"]], "y_data": [[12, 10]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return a bar chart on what is the number of professors for different school?", "What is the number of professors for different school. Plot them as bar chart.", "Return a bar chart on how many different professors are there for the different schools?", "A bar chart about how many different professors are there for the different schools?", "How many different professors are there for the different schools. Show bar chart."], "irrelevant_tables": ["ENROLL", "COURSE"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "577": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "pie", "x_name": "STU_LNAME", "y_name": "COUNT(STU_LNAME)", "x_data": [["Bowser", "Smithson"]], "y_data": [[3, 1]], "classify": [], "describe": "GROUP BY STU_LNAME", "sort": null}, "nl_queries": ["Find the number of students who took some course and got A or C and group by last name in a pie chart.", "How many students taking a course who received an A or C? Group by students' last name with a pie chart."], "irrelevant_tables": ["EMPLOYEE", "PROFESSOR"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "582": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Arnelle", "Carlos", "Gerald", "Ismael", "Peter", "Robert"]], "y_data": [[2, 0, 0, 0, 0, 1], [0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 1, 0], [0, 2, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0]], "classify": ["Accounting I", "Accounting II", "Database Design and Implementation", "Intro. to Microcomputing", "Intro. to Statistics", "Statistical Applications"], "describe": "GROUP BY CRS_DESCRIPTION, GROUP BY EMP_FNAME", "sort": null}, "nl_queries": ["Show the number of courses each instructor taught in a stacked bar chart. The x-axis is the instructor's first name and group by course description.", "How many courses each teacher taught? Show me a stacked bar chart. The x-axis is the teacher's first name and group by course description."], "irrelevant_tables": ["PROFESSOR", "DEPARTMENT"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "stacked_bar": true}, {"channel_specified": ["x", "y", "classify"], "stacked_bar": true}]}, "591": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR"}, "chart": "Grouping Line", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["2003", "2004", "2005", "2006", "2007", "2008", "2009"]], "y_data": [[1, 1, 1, 0, 0, 0, 0], [1, 0, 1, 2, 2, 2, 1]], "classify": ["Fall", "Spring"], "describe": "GROUP BY semester, BIN year BY YEAR", "sort": null}, "nl_queries": ["Find the number of courses offered by Psychology department in each year with a group line chart grouping by semester.", "How many courses are in the Psychology department in each year? Show a group line chart grouping by semester."], "irrelevant_tables": ["advisor", "time_slot"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "593": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title", "binning": ""}, "VQL": "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "semester", "y_name": "COUNT(semester)", "x_data": [["Fall", "Spring"]], "y_data": [[3, 9]], "classify": [], "describe": "GROUP BY semester", "sort": null}, "nl_queries": ["Find the number of courses offered by Psychology department in each semester with a bar chart.", "How many courses are in the Psychology department for each semester? Return a bar chart."], "irrelevant_tables": ["student", "takes"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "610": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester", "binning": ""}, "VQL": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester"}, "chart": "Pie", "hardness": "Hard", "db_id": "college_2", "vis_obj": {"chart": "pie", "x_name": "semester", "y_name": "COUNT(semester)", "x_data": [["Fall", "Spring"]], "y_data": [[3, 9]], "classify": [], "describe": "GROUP BY semester", "sort": null}, "nl_queries": ["Find the number of courses offered by Psychology department in each semester with a pie chart.", "How many courses are in the Psychology department for each semester? Return a pie chart."], "irrelevant_tables": ["department", "instructor"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "611": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year"}, "chart": "Line", "hardness": "Hard", "db_id": "college_2", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["2003", "2004", "2005", "2006", "2007", "2008", "2009"]], "y_data": [[2, 1, 2, 2, 2, 2, 1]], "classify": [], "describe": "GROUP BY year", "sort": null}, "nl_queries": ["Find the number of courses offered by Psychology department in each year with a line chart.", "How many courses are in the Psychology department for each year? Return a line chart."], "irrelevant_tables": ["department", "classroom"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "612": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology'", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' BIN year BY YEAR"}, "chart": "Line", "hardness": "Hard", "db_id": "college_2", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["2003", "2004", "2005", "2006", "2007", "2008", "2009"]], "y_data": [[2, 1, 2, 2, 2, 2, 1]], "classify": [], "describe": "BIN year BY YEAR", "sort": null}, "nl_queries": ["Find the number of courses offered by Psychology department in each year with a line chart.", "How many courses are in the Psychology department for each year? Return a line chart."], "irrelevant_tables": ["takes", "student"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "628": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name"}, "chart": "Scatter", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "scatter", "x_name": "count(DISTINCT T2.id)", "y_name": "count(DISTINCT T3.id)", "x_data": [[99, 106, 92, 100, 108, 86, 98, 95, 97, 92, 119, 85, 105, 96, 109, 100, 85]], "y_data": [[4, 1, 5, 2, 2, 4, 4, 4, 1, 1, 3, 4, 2, 2, 3, 2, 6]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the relationship between total number of students and total number of instructors in a scatter chart.", "What is the relationship between total number of students and total number of instructors? Return a scatter chart."], "irrelevant_tables": ["takes", "prereq"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "676": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5", "binning": ""}, "VQL": "Visualize BAR SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_3", "vis_obj": {"chart": "bar", "x_name": "CName", "y_name": "COUNT(CName)", "x_data": [["ALGORITHMS I", "APPLIED STATISTICS AND DATA ANALYSIS", "CIRCUITS", "COMBINATORIAL ANALYSIS", "COMPUTER SYSTEM FUNDAMENTALS", "COMPUTER VISION", "DATA STRUCTURES in JAVA", "DATABASE SYSTEMS", "DISTRIBUTED SYSTEMS", "EXPLORING THE INTERNET", "INTRO TO NATURAL LANGUAGE PROCESSING", "INTRO TO PROGRAMMING IN JAVA", "INTRODUCTION TO PROBABILITY", "MULTIMEDIA COMPUTING", "QUANTITATIVE MEDICAL COMPUTING", "SUPERCOMPUTING"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY CName", "sort": null}, "nl_queries": ["What is the number of each course name that have at least five enrollments? Show me a bar chart.", "Give the number of each course name with at least five enrollments. Return a bar chart."], "irrelevant_tables": ["Member_of", "Faculty"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "691": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "concert_singer", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["John Nizinik", "Justin Brown", "Rose White", "Timbaland", "Tribal King"]], "y_data": [[1, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["What are the names of the singers who performed in a concert in 2014, and count them by a pie chart", "List all singer names in concerts in year 2014, and count them by a pie chart", "A pie chart for what are the number of the names of the singers who performed in a concert in 2014?"], "irrelevant_tables": ["stadium"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "699": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "concert_singer", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["Timbaland", "Justin Brown", "Rose White", "John Nizinik", "Tribal King"]], "y_data": [[2, 3, 1, 2, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List singer names and number of concerts for each singer by a pie chart.", "Display a pie chart for what are the names of the singers and number of concerts for each person?"], "irrelevant_tables": ["stadium"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "707": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"}, "chart": "Scatter", "hardness": "Easy", "db_id": "county_public_safety", "vis_obj": {"chart": "scatter", "x_name": "White", "y_name": "Crime_rate", "x_data": [[93.1, 86.6, 83, 72.5, 83.5, 82, 84.5, 53.5, 80.7, 86, 78.3, 84.1, 76.1, 87.9, 61.2, 64.3, 70.7]], "y_data": [[118, 118, 118, 123, 123, 178, 178, 178, 178, 178, 178, 150, 150, 49, 49, 174, 174]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show white percentages of cities and the crime rates of counties they are in with a scatter chart.", "Show white percentages of cities and the crime rates of counties they are in. Plot them as scatter chart.", "Scatter chart. what are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to. Show scatter chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "712": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "course_teach", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Anne Walker", "Gustaaf Deloor", "Kearsley Brown", "Lucy Wong", "Vicente Carretero"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show names of teachers and the number of courses they teach by a pie chart.", "Show names of teachers and the number of courses they teach. Show a pie chart.", "Draw a pie chart for what are the names of the teachers and how many courses do they teach?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "714": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "course_teach", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Anne Walker", "Gustaaf Deloor", "Kearsley Brown", "Lucy Wong", "Vicente Carretero"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of courses each teacher teaches in a pie chart.", "What is the number of courses each teacher teaches? Return a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "718": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "course_teach", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Anne Walker", "Gustaaf Deloor", "Kearsley Brown", "Lucy Wong", "Vicente Carretero"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of courses each teacher is arranged to teach in a pie chart.", "What is the number of courses each teacher teaches? Return a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "722": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code", "binning": ""}, "VQL": "Visualize PIE SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Doc_Control_Systems", "vis_obj": {"chart": "pie", "x_name": "role_description", "y_name": "count(*)", "x_data": [["Editor", "Manager", "Proof Manager", "Photo"]], "y_data": [[2, 1, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["How many employees does each role have? Plot a pie chart."], "irrelevant_tables": ["Documents_Mailed", "Ref_Document_Types"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "743": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Doc_Template_Mgt", "vis_obj": {"chart": "pie", "x_name": "Template_Type_Code", "y_name": "count(*)", "x_data": [["AD", "BK", "PP", "PPT"]], "y_data": [[3, 5, 4, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all template type codes and the number of documents using each type in a pie chart.", "What are the different template type codes, and how many documents use each type. Plot them as pie chart."], "irrelevant_tables": ["Ref_Template_Types", "Paragraphs"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "744": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Doc_Template_Mgt", "vis_obj": {"chart": "bar", "x_name": "Template_Type_Code", "y_name": "count(*)", "x_data": [["AD", "BK", "PP", "PPT"]], "y_data": [[3, 5, 4, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all template type codes and the number of documents using each type with a bar chart.", "Show all template type codes and the number of documents using each type. Visualize by bar chart.", "A bar chart about what are the different template type codes, and how many documents use each type?", "What are the different template type codes, and how many documents use each type. Plot them as bar chart."], "irrelevant_tables": ["Paragraphs", "Ref_Template_Types"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "747": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text", "binning": ""}, "VQL": "Visualize PIE SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text"}, "chart": "Pie", "hardness": "Hard", "db_id": "cre_Doc_Template_Mgt", "vis_obj": {"chart": "pie", "x_name": "Paragraph_Text", "y_name": "COUNT(Paragraph_Text)", "x_data": [["Korea", "Ukraine"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY Paragraph_Text", "sort": null}, "nl_queries": ["What are the paragraph texts for the document with the name 'Customer reviews', and count them by a pie chart", "Show all paragraph texts for the document \"Customer reviews\", and count them by a pie chart", "A pie chart for what are the number of the paragraph texts for the document with the name 'Customer reviews'?"], "irrelevant_tables": ["Ref_Template_Types", "Templates"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "793": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date", "binning": "BIN Date_Stored BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date BIN Date_Stored BY WEEKDAY"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Doc_Tracking_DB", "vis_obj": {"chart": "bar", "x_name": "Date_Stored", "y_name": "COUNT(Date_Stored)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[3, 7, 0, 1, 0, 0, 4]], "classify": [], "describe": "BIN Date_Stored BY WEEKDAY", "sort": null}, "nl_queries": ["How many documents are stored? Bin the store date by weekday in a bar chart.", "Return a bar chart showing the number of documents stored in each weekday."], "irrelevant_tables": ["Roles", "Ref_Document_Types"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "812": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Statement_Details", "y_name": "COUNT(Statement_Details)", "x_data": [["Open Project", "Private Project"]], "y_data": [[9, 6]], "classify": [], "describe": "GROUP BY Statement_Details", "sort": null}, "nl_queries": ["Show the number of accounts for different statement details in a bar chart.", "How many accounts for different statement details? Draw a bar chart."], "irrelevant_tables": ["Ref_Document_Types", "Projects"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "815": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Statement_Details , SUM(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Statement_Details , SUM(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "pie", "x_name": "Statement_Details", "y_name": "SUM(Account_Details)", "x_data": [["Open Project", "Private Project"]], "y_data": [[20316, 21335]], "classify": [], "describe": "GROUP BY Statement_Details", "sort": null}, "nl_queries": ["Show the sum of account details for different statement details in a pie chart."], "irrelevant_tables": ["Projects", "Ref_Document_Types"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "817": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Statement_Details", "y_name": "AVG(Account_Details)", "x_data": [["Open Project", "Private Project"]], "y_data": [[2257.3333333333335, 3555.8333333333335]], "classify": [], "describe": "GROUP BY Statement_Details", "sort": null}, "nl_queries": ["Show the average of account details for different statement details in a bar chart."], "irrelevant_tables": ["Documents_with_Expenses", "Ref_Document_Types"], "query_meta": [{"channel_specified": []}]}, "832": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Budget_Type_Code", "y_name": "COUNT(Budget_Type_Code)", "x_data": [["GV", "ORG", "SF"]], "y_data": [[6, 2, 2]], "classify": [], "describe": "GROUP BY Budget_Type_Code", "sort": null}, "nl_queries": ["Show the number of documents for different budget type code in a bar chart.", "Return a bar chart to show how many documents for different budget type code."], "irrelevant_tables": ["Ref_Document_Types", "Statements"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "834": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "pie", "x_name": "Budget_Type_Code", "y_name": "COUNT(Budget_Type_Code)", "x_data": [["GV", "ORG", "SF"]], "y_data": [[6, 2, 2]], "classify": [], "describe": "GROUP BY Budget_Type_Code", "sort": null}, "nl_queries": ["Show the number of documents for different budget type code in a pie chart.", "Return a pie chart to show how many documents for different budget type code."], "irrelevant_tables": ["Accounts", "Statements"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "838": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description", "binning": ""}, "VQL": "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "pie", "x_name": "Budget_Type_Description", "y_name": "COUNT(Budget_Type_Description)", "x_data": [["Government", "Organisation", "Self founded"]], "y_data": [[6, 2, 2]], "classify": [], "describe": "GROUP BY Budget_Type_Description", "sort": null}, "nl_queries": ["Show the number of documents for different budget type description in a pie chart.", "Return a pie chart to show how many documents for different budget type description."], "irrelevant_tables": ["Accounts", "Projects"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "856": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name", "binning": ""}, "VQL": "Visualize PIE SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "pie", "x_name": "Store_Name", "y_name": "COUNT(Store_Name)", "x_data": [["Bednar Film", "Kling Workshop", "Queen Art", "Warino Photo"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "GROUP BY Store_Name", "sort": null}, "nl_queries": ["Which workshop groups have bookings with status code \"stop\"? Give me the names, and count them by a pie chart"], "irrelevant_tables": ["Clients", "Performers"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "868": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 GROUP BY Order_Date", "binning": ""}, "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 GROUP BY Order_Date"}, "chart": "Line", "hardness": "Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "line", "x_name": "Order_Date", "y_name": "COUNT(Order_Date)", "x_data": [["1981-06-20", "1985-05-29", "1988-11-13", "1994-08-03", "1998-03-10", "1999-11-20", "2000-07-03", "2008-04-02", "2011-01-05", "2014-07-10"]], "y_data": [[2, 1, 1, 1, 1, 2, 1, 1, 3, 1]], "classify": [], "describe": "GROUP BY Order_Date", "sort": null}, "nl_queries": ["Find the order dates of the orders with price above 1000, and count them by a line chart", "What are the order dates of orders with price higher than 1000, and count them by a line chart", "A line chart for finding the number of the order dates of the orders with price above 1000.", "A line chart for what are the number of the order dates of orders with price higher than 1000?"], "irrelevant_tables": ["Performers", "Customers"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "874": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "chart": "Pie", "hardness": "Medium", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "pie", "x_name": "Service_Type_Description", "y_name": "COUNT(*)", "x_data": [["provide photo service", "provide dinning service", "provide filming service", "provide adv promoting service"]], "y_data": [[5, 5, 3, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["How many services for each service type description? Use a pie chart to show it.", "Show the number of services for each service type description with a pie chart."], "irrelevant_tables": ["Clients", "Drama_Workshop_Groups"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "875": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "chart": "Bar", "hardness": "Medium", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "bar", "x_name": "Service_Type_Description", "y_name": "COUNT(*)", "x_data": [["provide photo service", "provide dinning service", "provide filming service", "provide adv promoting service"]], "y_data": [[5, 5, 3, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["How many services for each service type description? Use a bar chart to show it.", "Show the number of services for each service type description with a bar chart."], "irrelevant_tables": ["Addresses", "Marketing_Regions"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "880": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 GROUP BY Actual_Delivery_Date", "binning": ""}, "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 GROUP BY Actual_Delivery_Date"}, "chart": "Line", "hardness": "Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "line", "x_name": "Actual_Delivery_Date", "y_name": "COUNT(Actual_Delivery_Date)", "x_data": [["1990-11-14", "1992-07-21", "1993-09-16", "1998-08-22", "2004-03-27", "2011-04-13", "2015-06-20"]], "y_data": [[1, 1, 2, 1, 2, 1, 1]], "classify": [], "describe": "GROUP BY Actual_Delivery_Date", "sort": null}, "nl_queries": ["A line chart for what are the number of the actual delivery dates of orders with quantity 1?", "What are the actual delivery dates of orders with quantity 1, and count them by a line chart", "A line chart for listing the number of the actual delivery date for all the orders with quantity 1"], "irrelevant_tables": ["Performers", "Ref_Service_Types"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "883": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description", "binning": ""}, "VQL": "Visualize PIE SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description"}, "chart": "Pie", "hardness": "Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "pie", "x_name": "Service_Type_Description", "y_name": "COUNT(Service_Type_Description)", "x_data": [["provide adv promoting service", "provide dinning service", "provide filming service", "provide photo service"]], "y_data": [[2, 5, 3, 5]], "classify": [], "describe": "GROUP BY Service_Type_Description", "sort": null}, "nl_queries": ["Give me the descriptions of the service types that cost more than 100, and count them by a pie chart", "A pie chart for what are the number of the descriptions of the service types with product price above 100?", "A pie chart for giveing me the number of the descriptions of the service types that cost more than 100.", "What are the descriptions of the service types with product price above 100, and count them by a pie chart"], "irrelevant_tables": ["Drama_Workshop_Groups", "Stores"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "910": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name", "binning": ""}, "VQL": "Visualize PIE SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"}, "chart": "Pie", "hardness": "Medium", "db_id": "customer_complaints", "vis_obj": {"chart": "pie", "x_name": "product_name", "y_name": "count(*)", "x_data": [["Chocolate", "Keyboard", "Mouse", "The Great Gatsby"]], "y_data": [[6, 1, 1, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the name of all products along with the number of complaints that they have received in a pie chart.", "List the name of all products along with the number of complaints that they have received. Show a pie chart.", "Return a pie chart on what are all the different product names, and how many complains has each received?", "Display a pie chart for what are all the different product names, and how many complains has each received?"], "irrelevant_tables": ["Customers", "Staff"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "912": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county", "binning": ""}, "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"}, "chart": "Bar", "hardness": "Medium", "db_id": "customer_deliveries", "vis_obj": {"chart": "bar", "x_name": "state_province_county", "y_name": "count(*)", "x_data": [["California", "Colorado", "Idaho", "Illinois", "Maine", "Michigan", "Nebraska", "Tennessee", "Wyoming"]], "y_data": [[2, 2, 1, 1, 1, 2, 1, 4, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the state names and the number of customers living in each state with a bar chart."], "irrelevant_tables": ["Employees", "Order_Deliveries"], "query_meta": [{"channel_specified": []}]}, "914": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , COUNT(customer_name) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , COUNT(customer_name) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_and_addresses", "vis_obj": {"chart": "bar", "x_name": "customer_name", "y_name": "COUNT(customer_name)", "x_data": [["Clifford Pagac", "Kitty Padberg III", "Prof. Alexzander Hamill", "Prof. Reyes Berge II"]], "y_data": [[1, 2, 1, 1]], "classify": [], "describe": "GROUP BY customer_name", "sort": null}, "nl_queries": ["Return a bar chart showing the number of orders that have the status \"Delivered\" for each customer name.", "What is the number of orders that have the status \"Delivered\" for each customer name? Visualize in a bar chart."], "irrelevant_tables": ["Addresses", "Products"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "961": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"}, "chart": "Bar", "hardness": "Medium", "db_id": "customers_and_invoices", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "sum(T1.product_quantity)", "x_data": [["Arts", "Beer Menus", "Chocolate", "Fans", "Hard Drive", "Harry Potter 2", "Harry Potter 3", "Harry Potter 4", "Learning English", "TV"]], "y_data": [[5, 2, 1, 9, 10, 8, 15, 3, 5, 7]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all product names and the total quantity ordered for each product name in a bar chart.", "Draw a bar chart for what are the different product names, and what is the sum of quantity ordered for each product?", "A bar chart about what are the different product names, and what is the sum of quantity ordered for each product?", "What are the different product names, and what is the sum of quantity ordered for each product. Visualize by bar chart."], "irrelevant_tables": ["Orders", "Product_Categories"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "975": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'", "binning": "BIN date_account_opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' BIN date_account_opened BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_and_invoices", "vis_obj": {"chart": "bar", "x_name": "date_account_opened", "y_name": "COUNT(date_account_opened)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[1, 0, 0, 0, 2, 1, 0]], "classify": [], "describe": "BIN date_account_opened BY WEEKDAY", "sort": null}, "nl_queries": ["Show the number of accounts for all accounts by the customer with first name 'Meaghan' opened in each day. Bin the account open day by weekday in a bar chart.", "How many accounts are opened in each day for all accounts by the customer with first name 'Meaghan' ? Bin the account open day by weekday in a bar chart."], "irrelevant_tables": ["Invoices", "Orders"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "990": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "binning": ""}, "VQL": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "customers_and_invoices", "vis_obj": {"chart": "bar", "x_name": "customer_last_name", "y_name": "count(*)", "x_data": [["Schaefer", "Leuschke", "Keeling", "Ruecker", "Muller", "Auer", "Boyle"]], "y_data": [[1, 1, 4, 1, 1, 4, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the number of accounts for each customer in a bar chart grouping by customer's last name.", "How many accounts for each customer? Show a bar chart that groups by customer's last name."], "irrelevant_tables": ["Orders", "Invoices"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "994": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id", "binning": "BIN date_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id BIN date_from BY WEEKDAY"}, "chart": "Bar", "hardness": "Medium", "db_id": "customers_and_products_contacts", "vis_obj": {"chart": "bar", "x_name": "date_from", "y_name": "COUNT(date_from)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[5, 0, 2, 3, 6, 1, 3]], "classify": [], "describe": "BIN date_from BY WEEKDAY", "sort": null}, "nl_queries": ["Show the number of customer address history in each day and bin date from by weekday with a bar chart."], "irrelevant_tables": ["Order_Items", "Products"], "query_meta": [{"channel_specified": []}]}, "998": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_to , COUNT(date_to) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY date_to", "binning": ""}, "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY date_to"}, "chart": "Line", "hardness": "Medium", "db_id": "customers_and_products_contacts", "vis_obj": {"chart": "line", "x_name": "date_to", "y_name": "COUNT(date_to)", "x_data": [["2018-02-25", "2018-02-27", "2018-03-07", "2018-03-08", "2018-03-09", "2018-03-10", "2018-03-11", "2018-03-13", "2018-03-14", "2018-03-16", "2018-03-18", "2018-03-19", "2018-03-20", "2018-03-22", "2018-03-24"]], "y_data": [[1, 1, 3, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY date_to", "sort": null}, "nl_queries": ["Show the number of customer address history in each day and group by date to with a line chart."], "irrelevant_tables": ["Order_Items", "Contacts"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1001": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"}, "chart": "Bar", "hardness": "Medium", "db_id": "customers_and_products_contacts", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "SUM(T2.order_quantity)", "x_data": [["Apple", "gucci", "jcrew"]], "y_data": [[23, 21, 40]], "classify": [], "describe": "GROUP BY product_name", "sort": null}, "nl_queries": ["Show the product name and total order quantity for each product in a bar chart.", "Show the product name and total order quantity for each product. Plot them as bar chart."], "irrelevant_tables": ["Contacts", "Addresses"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1003": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"}, "chart": "Pie", "hardness": "Medium", "db_id": "customers_and_products_contacts", "vis_obj": {"chart": "pie", "x_name": "product_name", "y_name": "SUM(T2.order_quantity)", "x_data": [["Apple", "gucci", "jcrew"]], "y_data": [[23, 21, 40]], "classify": [], "describe": "GROUP BY product_name", "sort": null}, "nl_queries": ["Show the product name and total order quantity for each product with a pie chart.", "Show the product name and total order quantity for each product. Visualize by pie chart."], "irrelevant_tables": ["Customer_Orders", "Addresses"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1018": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type", "binning": ""}, "VQL": "Visualize PIE SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type"}, "chart": "Pie", "hardness": "Medium", "db_id": "customers_campaigns_ecommerce", "vis_obj": {"chart": "pie", "x_name": "premises_type", "y_name": "COUNT(premises_type)", "x_data": [["Office", "Residence", "Warehouse"]], "y_data": [[6, 3, 6]], "classify": [], "describe": "GROUP BY premises_type", "sort": null}, "nl_queries": ["A pie chart showing the number of customer addresses in each premises type."], "irrelevant_tables": ["Order_Items", "Mailshot_Customers"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1059": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code"}, "chart": "Pie", "hardness": "Medium", "db_id": "customers_card_transactions", "vis_obj": {"chart": "pie", "x_name": "card_type_code", "y_name": "count(*)", "x_data": [["Credit", "Debit"]], "y_data": [[7, 8]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the card type codes and the number of transactions in a pie chart.", "Show the card type codes and the number of transactions. Visualize by pie chart.", "Show me a pie chart for what are the different card types, and how many transactions have been made with each?", "What are the different card types, and how many transactions have been made with each. Show a pie chart."], "irrelevant_tables": ["Accounts"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1072": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Venue ORDER BY T3.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Venue ORDER BY T3.Name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "debate", "vis_obj": {"chart": "bar", "x_name": "Venue", "y_name": "COUNT(Venue)", "x_data": [["Abu Dhabi , UAE", "Dubai , UAE", "Manama , Bahrain"]], "y_data": [[1, 1, 3]], "classify": [], "describe": "GROUP BY Venue", "sort": null}, "nl_queries": ["A bar chart showing the number of debates in each venue for those on the negative side, ordered in ascending alphabetical order of name."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "1073": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "debate", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Charles Van Wyck", "George Briggs", "Horace F. Clark", "John Cochrane"]], "y_data": [[1, 1, 2, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of debates for each person on the negative side in a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1074": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Name ORDER BY T3.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Name ORDER BY T3.Name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "debate", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Charles Van Wyck", "George Briggs", "Horace F. Clark", "John Cochrane"]], "y_data": [[1, 1, 2, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the number of debates for each person on the negative side in a bar chart, ordered in ascending alphabetical order of name."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1079": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "debate", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["James Humphrey", "Luther C. Carter", "Thomas J. Barr", "William B. Maclay"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the number of debates for each person on the affirmative side in a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1081": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue"}, "chart": "Pie", "hardness": "Medium", "db_id": "debate", "vis_obj": {"chart": "pie", "x_name": "Venue", "y_name": "COUNT(Venue)", "x_data": [["Abu Dhabi , UAE", "Dubai , UAE", "Manama , Bahrain"]], "y_data": [[1, 1, 3]], "classify": [], "describe": "GROUP BY Venue", "sort": null}, "nl_queries": ["A pie chart showing the number of debates in each venue for those on the affirmative side."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1082": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "debate", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["James Humphrey", "Luther C. Carter", "Thomas J. Barr", "William B. Maclay"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the names of people and the number of times they have been on the affirmative side of debates by a pie chart.", "Show the names of people and the number of times they have been on the affirmative side of debates. Show a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1088": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , COUNT(T1.Name) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY T1.Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "decoration_competition", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["B.C. School", "Calgary School", "Edmonton School", "Saskatchewan School", "Toronto School"]], "y_data": [[1, 2, 3, 2, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Return a pie chart showing how many members have visited for each college."], "irrelevant_tables": ["round"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1104": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "department_management", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "SUM(Num_Employees)", "x_data": [["Homeland Security", "Treasury"]], "y_data": [[208000, 115897]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a pie chart."], "irrelevant_tables": ["head"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1187": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "binning": "BIN date_arrived BY YEAR"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id BIN date_arrived BY YEAR"}, "chart": "Bar", "hardness": "Medium", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "date_arrived", "y_name": "COUNT(date_arrived)", "x_data": [["2017", "2018"]], "y_data": [[8, 1]], "classify": [], "describe": "BIN date_arrived BY YEAR", "sort": null}, "nl_queries": ["How many dogs who have gone through a treatment arrived in each year? Return a bar chart that bins arrived date by year interval.", "Show the number of dogs that received a treatment arrived in each year in a bar chart that bins arrived date by year interval."], "irrelevant_tables": ["Breeds", "Treatment_Types"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1188": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed", "binning": ""}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed"}, "chart": "Bar", "hardness": "Medium", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "date_departed", "y_name": "COUNT(date_departed)", "x_data": [["2018-03-24", "2018-03-25"]], "y_data": [[3, 6]], "classify": [], "describe": "GROUP BY date_departed", "sort": null}, "nl_queries": ["How many dogs who have gone through a treatment departed in each day? Return a bar chart.", "Show the number of dogs that received a treatment departed in each day in a bar chart."], "irrelevant_tables": ["Professionals", "Charges"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1192": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived"}, "chart": "Line", "hardness": "Medium", "db_id": "dog_kennels", "vis_obj": {"chart": "line", "x_name": "date_arrived", "y_name": "COUNT(date_arrived)", "x_data": [["2017-04-20", "2017-05-06", "2017-06-18", "2017-09-08", "2017-10-24", "2017-12-22", "2017-12-29", "2018-01-02"]], "y_data": [[1, 1, 3, 1, 1, 2, 5, 1]], "classify": [], "describe": "GROUP BY date_arrived", "sort": null}, "nl_queries": ["How many dogs who have gone through a treatment arrived in each day? Return a line chart that groups by arrived date.", "Show the number of dogs that received a treatment arrived in each day in a line chart that groups by arrived date."], "irrelevant_tables": ["Owners", "Charges"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1198": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description", "binning": ""}, "VQL": "Visualize PIE SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description"}, "chart": "Pie", "hardness": "Medium", "db_id": "dog_kennels", "vis_obj": {"chart": "pie", "x_name": "treatment_type_description", "y_name": "SUM(cost_of_treatment)", "x_data": [["Physical examination", "Take for a Walk", "Vaccination"]], "y_data": [[2429, 2392, 2540]], "classify": [], "describe": "GROUP BY treatment_type_description", "sort": null}, "nl_queries": ["List the cost of each treatment and the corresponding treatment type description with a pie chart.", "List the cost of each treatment and the corresponding treatment type description. Visualize by pie chart.", "Show me a pie chart for what are the cost and treatment type description of each treatment?"], "irrelevant_tables": ["Owners", "Breeds"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1204": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name"}, "chart": "Bar", "hardness": "Medium", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "last_name", "y_name": "COUNT(last_name)", "x_data": [["DuBuque", "Feil", "Fisher", "Funk", "Haley", "Mertz", "Nicolas", "Price", "Prohaska", "Rippin", "Schmitt", "Stoltenberg"]], "y_data": [[1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2]], "classify": [], "describe": "GROUP BY last_name", "sort": null}, "nl_queries": ["List the number of dogs each owner has in a bar chart that groups by owner's last name.", "How many dogs each owner has? Return a bar chart that groups by owner's last name."], "irrelevant_tables": ["Charges", "Breeds"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1216": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname"}, "chart": "Pie", "hardness": "Hard", "db_id": "dorm_1", "vis_obj": {"chart": "pie", "x_name": "Fname", "y_name": "COUNT(Fname)", "x_data": [["Michael", "Sarah", "Shiela", "Stacy", "Tracy"]], "y_data": [[1, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Fname", "sort": null}, "nl_queries": ["Find the first name of students who are living in the Smith Hall, and count them by a pie chart", "A pie chart for finding the number of the first name of students who are living in the Smith Hall.", "A pie chart for what are the number of the first names of all students in Smith Hall?", "What are the first names of all students in Smith Hall, and count them by a pie chart"], "irrelevant_tables": ["Dorm_amenity", "Has_amenity"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1223": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name", "binning": ""}, "VQL": "Visualize PIE SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"}, "chart": "Pie", "hardness": "Hard", "db_id": "dorm_1", "vis_obj": {"chart": "pie", "x_name": "dorm_name", "y_name": "count(*)", "x_data": [["Anonymous Donor Hall", "Dorm-plex 2000", "Fawlty Towers", "Smith Hall"]], "y_data": [[1, 2, 2, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of students who is older than 20 in each dorm. Visualize by pie chart.", "Pie. how many students are older than 20 in each dorm?"], "irrelevant_tables": ["Dorm_amenity", "Has_amenity"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1277": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize PIE SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "e_learning", "vis_obj": {"chart": "pie", "x_name": "subject_name", "y_name": "COUNT(*)", "x_data": [["Arts", "Language", "Computer Science"]], "y_data": [[4, 5, 6]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of courses for each subject in a pie chart.", "How many courses for each subject? Plot a pie chart."], "irrelevant_tables": ["Student_Course_Enrolment", "Course_Authors_and_Tutors"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1288": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize PIE SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "e_learning", "vis_obj": {"chart": "pie", "x_name": "subject_name", "y_name": "COUNT(*)", "x_data": [["Computer Science", "Arts", "Language"]], "y_data": [[6, 4, 5]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of courses for each subject in a pie chart.", "How many courses for each subject? Plot a pie chart."], "irrelevant_tables": ["Course_Authors_and_Tutors", "Student_Course_Enrolment"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1309": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"}, "chart": "Pie", "hardness": "Medium", "db_id": "election", "vis_obj": {"chart": "pie", "x_name": "Party", "y_name": "SUM(COUNT(*))", "x_data": [["Democratic", "Independence", "Liberal", "Working Families"]], "y_data": [[4, 1, 2, 1]], "classify": [], "describe": "GROUP BY Party", "sort": null}, "nl_queries": ["Show the name of each party and the corresponding number of delegates from that party. Plot them as pie chart."], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1310": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"}, "chart": "Pie", "hardness": "Medium", "db_id": "election", "vis_obj": {"chart": "pie", "x_name": "Party", "y_name": "COUNT(Party)", "x_data": [["Democratic", "Independence", "Liberal", "Working Families"]], "y_data": [[4, 1, 2, 1]], "classify": [], "describe": "GROUP BY Party", "sort": null}, "nl_queries": ["Show how many delegates in each party with a pie chart.", "For each party, use a pie chart to show the number of its delegates."], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1314": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "binning": ""}, "VQL": "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "election", "vis_obj": {"chart": "pie", "x_name": "County_name", "y_name": "COUNT(*)", "x_data": [["Howard", "Baltimore County", "Colony", "Mansfield"]], "y_data": [[3, 2, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each county, find the name of the county and the number of delegates from that county. Show the proportion by pie chart."], "irrelevant_tables": ["party"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1316": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee", "binning": ""}, "VQL": "Visualize PIE SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"}, "chart": "Pie", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "pie", "x_name": "Committee", "y_name": "COUNT(Committee)", "x_data": [["Appropriations", "Economic Matters", "Environmental Matters"]], "y_data": [[2, 1, 1]], "classify": [], "describe": "GROUP BY Committee", "sort": null}, "nl_queries": ["Return all the committees that have delegates from Democratic party, and count them by a pie chart", "Which committees have delegates from the Democratic party, and count them by a pie chart"], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1317": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "Committee", "y_name": "COUNT(Committee)", "x_data": [["Appropriations", "Economic Matters", "Environmental Matters"]], "y_data": [[2, 1, 1]], "classify": [], "describe": "GROUP BY Committee", "sort": null}, "nl_queries": ["Return all the committees that have delegates from Democratic party, and count them by a bar chart", "Which committees have delegates from the Democratic party, and count them by a bar chart"], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1318": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor", "binning": ""}, "VQL": "Visualize PIE SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor"}, "chart": "Pie", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "pie", "x_name": "Governor", "y_name": "COUNT(Governor)", "x_data": [["Peter Vallone", "Tom Golisano"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY Governor", "sort": null}, "nl_queries": ["Who were the governors of the parties associated with delegates from district 1, and count them by a pie chart"], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1319": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor", "binning": ""}, "VQL": "Visualize BAR SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "Governor", "y_name": "COUNT(Governor)", "x_data": [["Peter Vallone", "Tom Golisano"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY Governor", "sort": null}, "nl_queries": ["Who were the governors of the parties associated with delegates from district 1, and count them by a bar chart"], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": []}]}, "1376": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id", "binning": ""}, "VQL": "Visualize PIE SELECT name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "epinions_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "count(*)", "x_data": [["Helen", "Mark"]], "y_data": [[3, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each user, find their name and the number of reviews written by them. Plot them as pie chart."], "irrelevant_tables": ["trust", "item"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1377": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "epinions_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Helen", "Mark"]], "y_data": [[3, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each user, find their name and the number of reviews written by them. Show bar chart."], "irrelevant_tables": ["item", "trust"], "query_meta": [{"channel_specified": []}]}, "1379": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id", "binning": ""}, "VQL": "Visualize PIE SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "epinions_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "avg(trust)", "x_data": [["Mark", "Terry", "Nancy", "Rosie", "Roxi"]], "y_data": [[4.666666666666667, 5, 8, 4.5, 10]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find each target user's name and average trust score. Show a pie chart."], "irrelevant_tables": ["review", "item"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1381": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id", "binning": ""}, "VQL": "Visualize PIE SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "epinions_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "avg(T2.rating)", "x_data": [["Helen", "Mark"]], "y_data": [[7.333333333333332, 7]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each user, return the name and the average rating of reviews given by them. Plot them as pie chart."], "irrelevant_tables": ["trust", "item"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1389": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name", "binning": ""}, "VQL": "Visualize PIE SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "farm", "vis_obj": {"chart": "pie", "x_name": "Official_Name", "y_name": "COUNT(Official_Name)", "x_data": [["Aroostook", "Drummond", "Grand Falls/Grand-Sault", "Perth-Andover", "Plaster Rock"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Official_Name", "sort": null}, "nl_queries": ["How many competitions are held in each city? Draw a pie chart.", "Show the number of competitions held in each city with a pie chart."], "irrelevant_tables": ["competition_record"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1392": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type"}, "chart": "Bar", "hardness": "Medium", "db_id": "film_rank", "vis_obj": {"chart": "bar", "x_name": "Type", "y_name": "COUNT(Type)", "x_data": [["Mass human sacrifice", "Mass suicide", "Mass suicide murder"]], "y_data": [[1, 6, 2]], "classify": [], "describe": "GROUP BY Type", "sort": null}, "nl_queries": ["Please show the number of films for each type in a bar chart.", "How many films for each type? Return a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "1395": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type", "binning": ""}, "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type"}, "chart": "Pie", "hardness": "Medium", "db_id": "film_rank", "vis_obj": {"chart": "pie", "x_name": "Type", "y_name": "COUNT(Type)", "x_data": [["Mass human sacrifice", "Mass suicide", "Mass suicide murder"]], "y_data": [[1, 6, 2]], "classify": [], "describe": "GROUP BY Type", "sort": null}, "nl_queries": ["Show the number of films for each type in a pie chart.", "How many films in each type? Show me a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1434": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name", "binning": ""}, "VQL": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"}, "chart": "Pie", "hardness": "Hard", "db_id": "formula_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Honda", "Toyota"]], "y_data": [[45, 95]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["A pie chart for finding the number of the names of Japanese constructors that have once earned more than 5 points?", "A pie chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?", "What are the names of all the Japanese constructors that have earned more than 5 points, and count them by a pie chart", "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a pie chart"], "irrelevant_tables": ["seasons", "circuits"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1435": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"}, "chart": "Bar", "hardness": "Hard", "db_id": "formula_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Honda", "Toyota"]], "y_data": [[45, 95]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["What are the names of all the Japanese constructors that have earned more than 5 points, and count them by a bar chart", "A bar chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?", "A bar chart for finding the number of the names of Japanese constructors that have once earned more than 5 points?", "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a bar chart"], "irrelevant_tables": ["status", "races"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1515": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id", "binning": ""}, "VQL": "Visualize PIE SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "gas_company", "vis_obj": {"chart": "pie", "x_name": "Company", "y_name": "count(*)", "x_data": [["ExxonMobil", "Royal Dutch Shell", "PetroChina", "Petrobras", "BP"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the company name with the number of gas station in a pie chart."], "irrelevant_tables": ["gas_station"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1520": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown", "binning": ""}, "VQL": "Visualize PIE SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown"}, "chart": "Pie", "hardness": "Medium", "db_id": "gymnast", "vis_obj": {"chart": "pie", "x_name": "Hometown", "y_name": "COUNT(*)", "x_data": [["Bonao", "Los Alcarrizos", "Santiago de los Caballeros", "Santo Domingo"]], "y_data": [[1, 1, 1, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Visualize a pie chart with what are the hometowns of gymnasts and the corresponding number of gymnasts?", "Show me a pie chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?", "What are the hometowns of gymnasts and the corresponding number of gymnasts. Show a pie chart.", "Display a pie chart for how many gymnasts are from each hometown?", "Visualize a pie chart with how many gymnasts are from each hometown?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1522": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["General Medicine", "Psychiatry", "Surgery"]], "y_data": [[5, 1, 3]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show how many physicians for each department name they primarily affiliated in a pie chart."], "irrelevant_tables": ["Patient", "Trained_In"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1524": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Christopher Turk", "Elliot Reid", "John Dorian", "Molly Clock", "Percival Cox"]], "y_data": [[1, 3, 2, 1, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["What are the names of all the physicians who took appointments, and count them by a pie chart", "List the name of physicians who took some appointment, and count them by a pie chart", "A pie chart for listing the number of the name of physicians who took some appointment."], "irrelevant_tables": ["Block", "Affiliated_With"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1527": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Christopher Turk", "John Wen", "Todd Quinlan"]], "y_data": [[1, 2, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Find the physicians who are trained in a procedure that costs more than 5000, and count them by a pie chart", "A pie chart for finding the number of the physicians who are trained in a procedure that costs more than 5000.", "Which physicians are trained in procedures that are more expensive than 5000, and count them by a pie chart"], "irrelevant_tables": ["Nurse", "Department"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1528": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name"}, "chart": "Bar", "hardness": "Hard", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Christopher Turk", "John Wen", "Todd Quinlan"]], "y_data": [[1, 2, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Which physicians are trained in procedures that are more expensive than 5000, and count them by a bar chart", "A bar chart for finding the number of the physicians who are trained in a procedure that costs more than 5000.", "Find the physicians who are trained in a procedure that costs more than 5000, and count them by a bar chart"], "irrelevant_tables": ["Medication", "Prescribes"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1529": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Dennis Doe", "Grace Ritchie", "John Smith", "Random J. Patient"]], "y_data": [[3, 2, 3, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["List the names of patients who have made appointments, and count them by a pie chart", "A pie chart for listing the number of the names of patients who have made appointments.", "What are names of patients who made an appointment, and count them by a pie chart"], "irrelevant_tables": ["Medication", "Trained_In"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1530": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name"}, "chart": "Bar", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Dennis Doe", "Grace Ritchie", "John Smith", "Random J. Patient"]], "y_data": [[3, 2, 3, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["A bar chart for listing the number of the names of patients who have made appointments.", "List the names of patients who have made appointments, and count them by a bar chart", "What are names of patients who made an appointment, and count them by a bar chart"], "irrelevant_tables": ["Prescribes", "Affiliated_With"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1531": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"}, "chart": "Pie", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["Foo Labs", "X"]], "y_data": [[2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Pie. how many medications are prescribed for each brand?", "Return a pie chart on how many medications are prescribed for each brand?", "How many medications are prescribed for each brand. Plot them as pie chart."], "irrelevant_tables": ["Physician", "Block"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1534": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"}, "chart": "Pie", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["John Dorian", "Elliot Reid", "Christopher Turk"]], "y_data": [[1, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return a pie on how many patients do each physician take care of? List their names and number of patients they take care of.", "Draw a pie chart for how many patients do each physician take care of? List their names and number of patients they take care of.", "How many patients do each physician take care of? List their names and number of patients they take care of in a pie chart.", "How many patients do each physician take care of? List their names and number of patients they take care of. Visualize by pie chart.", "Return the name of each physician and the number of patients he or she treats by a pie chart.", "Return the name of each physician and the number of patients he or she treats. Show a pie chart."], "irrelevant_tables": ["Department", "On_Call"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1535": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"}, "chart": "Bar", "hardness": "Medium", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["John Dorian", "Elliot Reid", "Christopher Turk"]], "y_data": [[1, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return a bar chart on how many patients do each physician take care of? List their names and number of patients they take care of.", "Draw a bar chart for how many patients do each physician take care of? List their names and number of patients they take care of.", "How many patients do each physician take care of? List their names and number of patients they take care of in a bar chart.", "How many patients do each physician take care of? List their names and number of patients they take care of. Show bar chart.", "Return the name of each physician and the number of patients he or she treats in a bar chart."], "irrelevant_tables": ["Prescribes", "Undergoes"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1652": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "chart": "Bar", "hardness": "Medium", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "HIRE_DATE", "y_name": "COUNT(HIRE_DATE)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[1, 1, 1, 2, 0, 1, 1]], "classify": [], "describe": "BIN HIRE_DATE BY WEEKDAY", "sort": null}, "nl_queries": ["For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the amount of hire_date over the  hire_date bin hire_date by weekday by a bar chart.", "For those employees who do not work in departments with managers that have ids between 100 and 200, find  hire_date and the amount of hire_date bin hire_date by weekday, and visualize them by a bar chart.", "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  hire_date and the amount of hire_date bin hire_date by weekday.", "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by weekday in a bar chart."], "irrelevant_tables": ["countries", "job_history"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1663": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) Group by HIRE_DATE", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "hr_1", "vis_obj": {"chart": "line", "x_name": "HIRE_DATE", "y_name": "AVG(SALARY)", "x_data": [["1987-09-03", "1987-09-26", "1987-09-27", "1987-09-28", "1987-09-29", "1987-09-30", "1987-10-01"]], "y_data": [[7000.0, 13000.0, 6000.0, 6500.0, 10000.0, 12000.0, 8300.0]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the change of  average salary over  hire_date  in a line chart.", "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a line chart about the change of  mean salary over  hire_date ."], "irrelevant_tables": ["regions", "locations"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1690": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "chart": "Scatter", "hardness": "Extra Hard", "db_id": "hr_1", "vis_obj": {"chart": "scatter", "x_name": "SALARY", "y_name": "COMMISSION_PCT", "x_data": [[7000, 13000, 6000, 6500, 10000, 12000, 8300]], "y_data": [[0.15, 0, 0, 0, 0, 0, 0]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For those employees who do not work in departments with managers that have ids between 100 and 200, return a scatter chart about the correlation between  salary and  commission_pct .", "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a scatter chart about the correlation between  salary and  commission_pct .", "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a scatter chart about the correlation between  salary and  commission_pct .", "For those employees who do not work in departments with managers that have ids between 100 and 200, a scatter chart shows the correlation between  salary and  commission_pct .", "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the correlation between  salary and  commission_pct  in a scatter chart."], "irrelevant_tables": ["job_history", "countries"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "1955": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE", "binning": ""}, "VQL": "Visualize PIE SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE"}, "chart": "Pie", "hardness": "Hard", "db_id": "hr_1", "vis_obj": {"chart": "pie", "x_name": "JOB_TITLE", "y_name": "COUNT(JOB_TITLE)", "x_data": [["Sales Manager", "Sales Representative"]], "y_data": [[5, 29]], "classify": [], "describe": "GROUP BY JOB_TITLE", "sort": null}, "nl_queries": ["Display the proportion of the job title for all those jobs in department 80 using a pie chart.", "What is the proportion of job titles for employees in department 80? You can give me a pie chart."], "irrelevant_tables": ["departments", "job_history"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1961": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID"}, "chart": "Pie", "hardness": "Hard", "db_id": "hr_1", "vis_obj": {"chart": "pie", "x_name": "JOB_ID", "y_name": "COUNT(JOB_ID)", "x_data": [["FI_ACCOUNT", "FI_MGR"]], "y_data": [[5, 1]], "classify": [], "describe": "GROUP BY JOB_ID", "sort": null}, "nl_queries": ["For all employees in the Finance department, show me the proportion of their job id using a pie chart."], "irrelevant_tables": ["regions", "countries"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "1980": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName", "binning": ""}, "VQL": "Visualize PIE SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "inn_1", "vis_obj": {"chart": "pie", "x_name": "roomName", "y_name": "COUNT(roomName)", "x_data": [["Convoke and sanguine", "Frugal not apropos", "Harbinger but bequest", "Thrift and accolade"]], "y_data": [[1, 2, 3, 1]], "classify": [], "describe": "GROUP BY roomName", "sort": null}, "nl_queries": ["A pie chart for what are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?", "What are the name of rooms booked by customers whose first name has \"ROY\" in part, and count them by a pie chart", "Find the name of rooms booked by some customers whose first name contains ROY, and count them by a pie chart", "A pie chart for finding the number of the name of rooms booked by some customers whose first name contains ROY."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "1990": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "binning": "BIN Date_Closed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "insurance_fnol", "vis_obj": {"chart": "bar", "x_name": "Date_Closed", "y_name": "COUNT(Date_Closed)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[0, 0, 0, 2, 0, 0, 0]], "classify": [], "describe": "BIN Date_Closed BY WEEKDAY", "sort": null}, "nl_queries": ["Retrieve the close dates of all the policies associated with the customer whose name contains \"Diana\", bin the close dates into the day of week interval and count them for a bar chart."], "irrelevant_tables": ["Services", "Claims"], "query_meta": [{"channel_specified": []}]}, "2059": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "journal_committee", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Gra\u017cyna Wolszczak", "Kamila Porczyk", "Maria G\u00f3ralczyk", "W\u0142adys\u0142aw Grzywna"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["A pie chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000.", "Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a pie chart"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2071": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "binning": ""}, "VQL": "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"}, "chart": "Pie", "hardness": "Medium", "db_id": "loan_1", "vis_obj": {"chart": "pie", "x_name": "bname", "y_name": "sum(amount)", "x_data": [["broadway", "downtown", "morningside"]], "y_data": [[5000, 3000, 2050]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Pie. what are the names of the different bank branches, and what are their total loan amounts?", "Display a pie chart for what are the names of the different bank branches, and what are their total loan amounts?"], "irrelevant_tables": ["customer"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2074": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "pie", "x_name": "Type_of_Thing_Code", "y_name": "COUNT(Type_of_Thing_Code)", "x_data": [["Commen", "Electronics", "Furniture"]], "y_data": [[7, 5, 1]], "classify": [], "describe": "GROUP BY Type_of_Thing_Code", "sort": null}, "nl_queries": ["Give me a pie chart to show the proportion of each type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'."], "irrelevant_tables": ["Customer_Events", "Properties"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2093": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details", "binning": ""}, "VQL": "Visualize PIE SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details"}, "chart": "Pie", "hardness": "Medium", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "pie", "x_name": "organization_details", "y_name": "COUNT(organization_details)", "x_data": [["Denesik and Sons Party", "Reinger, Hudson and Nolan Group", "Robel-Schulist Group"]], "y_data": [[10, 2, 3]], "classify": [], "describe": "GROUP BY organization_details", "sort": null}, "nl_queries": ["Just give me a pie chart that X is the details of the organization and the Y-axis is the number of things they own.", "Show the number of items by the details of the organization that owns it using a pie chart."], "irrelevant_tables": ["Properties", "Timed_Locations_of_Things"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2096": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in"}, "chart": "Bar", "hardness": "Medium", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "bar", "x_name": "date_moved_in", "y_name": "COUNT(date_moved_in)", "x_data": [["2015-03-27", "2016-09-27"]], "y_data": [[9, 4]], "classify": [], "describe": "GROUP BY date_moved_in", "sort": null}, "nl_queries": ["Please use a bar chart to compare the number of customers of each customer's move in date."], "irrelevant_tables": ["Residents", "Residents_Services"], "query_meta": [{"channel_specified": []}]}, "2132": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage' GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage' GROUP BY Event_Details"}, "chart": "Pie", "hardness": "Hard", "db_id": "local_govt_in_alabama", "vis_obj": {"chart": "pie", "x_name": "Event_Details", "y_name": "COUNT(Event_Details)", "x_data": [["Fail", "Success"]], "y_data": [[3, 2]], "classify": [], "describe": "GROUP BY Event_Details", "sort": null}, "nl_queries": ["what are the event details of the services that have the type code 'Marriage', and count them by a pie chart"], "irrelevant_tables": ["Participants", "Participants_in_Events"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2144": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code"}, "chart": "Bar", "hardness": "Medium", "db_id": "local_govt_in_alabama", "vis_obj": {"chart": "bar", "x_name": "Participant_Type_Code", "y_name": "AVG(count(*))", "x_data": [["Organizer", "Participant"]], "y_data": [[1.5, 2]], "classify": [], "describe": "GROUP BY Participant_Type_Code", "sort": null}, "nl_queries": ["How many events have each participants attended? Show their average number by each participant type code using a bar chart."], "irrelevant_tables": ["Services"], "query_meta": [{"channel_specified": []}]}, "2155": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT cmi_details , COUNT(cmi_details) FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax' GROUP BY cmi_details", "binning": ""}, "VQL": "Visualize PIE SELECT cmi_details , COUNT(cmi_details) FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax' GROUP BY cmi_details"}, "chart": "Pie", "hardness": "Hard", "db_id": "local_govt_mdm", "vis_obj": {"chart": "pie", "x_name": "cmi_details", "y_name": "COUNT(cmi_details)", "x_data": [["Reynolds-McClure", "Schmidt, Kertzmann and Lubowitz", "Schmitt-Lang", "Volkman, Mills and Ferry"]], "y_data": [[1, 1, 1, 3]], "classify": [], "describe": "GROUP BY cmi_details", "sort": null}, "nl_queries": ["what are the details of the cmi masters that have the cross reference code 'Tax', and count them by a pie chart"], "irrelevant_tables": ["Rent_Arrears", "Benefits_Overpayments"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2161": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name"}, "chart": "Pie", "hardness": "Hard", "db_id": "machine_repair", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Eddie Collins", "Joe Sewell", "Tony Sewell"]], "y_data": [[1, 5, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["A pie chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?", "What are the names of the technicians that are assigned to repair machines with more point values than 70, and count them by a pie chart", "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a pie chart"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2166": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "machine_repair", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Charlie Hollocher", "Eddie Collins", "Joe Sewell", "John Brown", "Tony Sewell"]], "y_data": [[1, 1, 5, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show names of technicians and the number of machines they are assigned to repair with a pie chart."], "irrelevant_tables": ["machine"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2167": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name"}, "chart": "Bar", "hardness": "Medium", "db_id": "machine_repair", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Charlie Hollocher", "Eddie Collins", "Joe Sewell", "John Brown", "Tony Sewell"]], "y_data": [[1, 1, 5, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show names of technicians and the number of machines they are assigned to repair with a bar chart.", "Show names of technicians and the number of machines they are assigned to repair. Visualize by bar chart.", "Display a bar chart for what are the names of the technicians  and how many machines are they assigned to repair?"], "irrelevant_tables": ["machine"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2170": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY T2.quality_rank", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY T2.quality_rank"}, "chart": "Pie", "hardness": "Hard", "db_id": "machine_repair", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Charlie Hollocher", "Eddie Collins", "Joe Sewell", "John Brown", "Tony Sewell"]], "y_data": [[1, 1, 5, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show names of technicians in ascending order of quality rank of the machine they are assigned, and count them by a pie chart"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2171": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY T2.quality_rank", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY T2.quality_rank"}, "chart": "Bar", "hardness": "Hard", "db_id": "machine_repair", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Charlie Hollocher", "Eddie Collins", "Joe Sewell", "John Brown", "Tony Sewell"]], "y_data": [[1, 1, 5, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Show names of technicians in ascending order of quality rank of the machine they are assigned, and count them by a bar chart", "A bar chart for what are the number of the names of the technicians by ascending order of quality rank for the machine they are assigned?", "What are the names of the technicians by ascending order of quality rank for the machine they are assigned, and count them by a bar chart"], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2218": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "SUM(Price)", "x_data": [["Austin", "Beijing", "Los Angeles", "Paris", "Taiwan", "Tokyo"]], "y_data": [[450, 150, 486, 125, 240, 240]], "classify": [], "describe": "GROUP BY Headquarter", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of price , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, find headquarter and the sum of price, and group by attribute headquarter, and visualize them by a bar chart.", "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  headquarter and the sum of price, and group by attribute headquarter.", "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the  headquarter, and group by attribute headquarter by a bar chart.", "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the sum of price, and group by attribute headquarter."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2219": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "AVG(Price)", "x_data": [["Austin", "Beijing", "Los Angeles", "Paris", "Taiwan", "Tokyo"]], "y_data": [[150, 150, 162, 62.5, 240, 240]], "classify": [], "describe": "GROUP BY Headquarter", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, give me the comparison about the average of price over the headquarter , and group by attribute headquarter by a bar chart.", "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  headquarter and the average of price , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of price , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of price , and group by attribute headquarter."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2226": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Founder", "y_name": "COUNT(Founder)", "x_data": [["Andy", "James", "John", "Mary", "Owen", "Robert"]], "y_data": [[1, 3, 1, 1, 3, 2]], "classify": [], "describe": "GROUP BY Founder", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  founder and the amount of founder , and group by attribute founder.", "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  founder and the amount of founder , and group by attribute founder.", "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  founder and the amount of founder , and group by attribute founder.", "For those records from the products and each product's manufacturer, give me the comparison about the amount of founder over the  founder , and group by attribute founder by a bar chart.", "For those records from the products and each product's manufacturer, show me about the distribution of  founder and the amount of founder , and group by attribute founder in a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2229": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Founder", "y_name": "SUM(Price)", "x_data": [["Andy", "James", "John", "Mary", "Owen", "Robert"]], "y_data": [[240, 486, 240, 150, 450, 125]], "classify": [], "describe": "GROUP BY Founder", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, show me about the distribution of  founder and the sum of price , and group by attribute founder in a bar chart.", "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  founder and the sum of price , and group by attribute founder.", "For those records from the products and each product's manufacturer, find  founder and the sum of price , and group by attribute founder, and visualize them by a bar chart.", "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the  founder , and group by attribute founder by a bar chart.", "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  founder and the sum of price , and group by attribute founder."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2230": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Founder", "y_name": "AVG(Price)", "x_data": [["Andy", "James", "John", "Mary", "Owen", "Robert"]], "y_data": [[240, 162, 240, 150, 150, 62.5]], "classify": [], "describe": "GROUP BY Founder", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, show me about the distribution of  founder and the average of price , and group by attribute founder in a bar chart.", "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  founder and the average of price , and group by attribute founder.", "For those records from the products and each product's manufacturer, find  founder and the average of price , and group by attribute founder, and visualize them by a bar chart.", "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the  founder , and group by attribute founder by a bar chart.", "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  founder and the average of price , and group by attribute founder."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2270": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "chart": "Scatter", "hardness": "Easy", "db_id": "manufactory_1", "vis_obj": {"chart": "scatter", "x_name": "Price", "y_name": "Revenue", "x_data": [[240, 120, 150, 5, 240, 180, 90, 270, 66, 180, 150]], "y_data": [[130, 30, 200, 30, 120, 100, 100, 50, 50, 100, 50]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between price and revenue.", "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between price and revenue.", "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between price and  revenue", "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between price and revenue."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2280": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Price , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Price , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "chart": "Grouping Scatter", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "scatter", "x_name": "Price", "y_name": "Revenue", "x_data": [[180, 90, 180], [240], [270, 66, 150], [150], [240], [120, 5]], "y_data": [[100, 100, 100], [130], [50, 50, 50], [200], [120], [30, 30]], "classify": ["Creative Labs", "Fujitsu", "Hewlett-Packard", "Iomega", "Sony", "Winchester"], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, a scatter chart shows the correlation between price and revenue , and colored by manufacturer's name.", "For those records from the products and each product's manufacturer, show me about the correlation between price and revenue , and colored by manufacturer's name in a scatter chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["classify"]}, {"channel_specified": ["classify"]}]}, "2289": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "chart": "Grouping Scatter", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "scatter", "x_name": "Price", "y_name": "Revenue", "x_data": [[180, 90, 180], [150], [270, 66, 150], [120, 5], [240], [240]], "y_data": [[100, 100, 100], [200], [50, 50, 50], [30, 30], [130], [120]], "classify": ["Austin", "Beijing", "Los Angeles", "Paris", "Taiwan", "Tokyo"], "describe": "GROUP BY Headquarter", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  price and  revenue , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  price and  revenue , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  price and  revenue , and group by attribute headquarter.", "For those records from the products and each product's manufacturer, show me about the correlation between  price and  revenue , and group by attribute headquarter in a scatter chart.", "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  price and  revenue , and group by attribute headquarter."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["classify"]}, {"channel_specified": ["classify"]}, {"channel_specified": ["classify"]}, {"channel_specified": ["classify"]}, {"channel_specified": ["classify"]}]}, "2299": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "chart": "Grouping Scatter", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "scatter", "x_name": "Price", "y_name": "Revenue", "x_data": [[240], [270, 66, 150], [240], [150], [180, 90, 180], [120, 5]], "y_data": [[120], [50, 50, 50], [130], [200], [100, 100, 100], [30, 30]], "classify": ["Andy", "James", "John", "Mary", "Owen", "Robert"], "describe": "GROUP BY Founder", "sort": null}, "nl_queries": ["For those records from the products and each product's manufacturer, visualize the relationship between price and revenue by a scatter, and colored by attribute founder."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["classify"]}]}, "2309": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "manufacturer", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["Chevrolet House", "Jiaju", "Chevrolet", "Tomorrow"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of funiture types produced by each manufacturer as well as the company names. Visualize by pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2343": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"}, "chart": "Pie", "hardness": "Hard", "db_id": "mountain_photos", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "count(*)", "x_data": [["Panasonic Leica DG Nocticron 42.5mm f /1.2", "Panasonic Lumix G 150mm f /2.8", "Olympus 15mm f/8.0 Body Cap", "Schneider Kreuznach Super Angulon 14mm f /2.0", "Sigma 19mm f2.8 EX DN"]], "y_data": [[1, 1, 2, 2, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show me a pie chart for what is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "Visualize a pie chart with what is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos. Plot them as pie chart."], "irrelevant_tables": ["mountain"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2344": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"}, "chart": "Bar", "hardness": "Hard", "db_id": "mountain_photos", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Panasonic Leica DG Nocticron 42.5mm f /1.2", "Panasonic Lumix G 150mm f /2.8", "Olympus 15mm f/8.0 Body Cap", "Schneider Kreuznach Super Angulon 14mm f /2.0", "Sigma 19mm f2.8 EX DN"]], "y_data": [[1, 1, 2, 2, 4]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Draw a bar chart for what is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos in asc.", "Display a bar chart for what is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos inasc.", "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos in asceding. Show bar chart."], "irrelevant_tables": ["mountain"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2346": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "mountain_photos", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["deers", "grass", "life", "monkey", "rabbits", "the mountain"]], "y_data": [[1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["A pie chart for what are the number of the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus', and count them by a pie chart"], "irrelevant_tables": ["mountain"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2359": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director", "binning": ""}, "VQL": "Visualize PIE SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"}, "chart": "Pie", "hardness": "Medium", "db_id": "movie_1", "vis_obj": {"chart": "pie", "x_name": "director", "y_name": "count(*)", "x_data": [["James Cameron", "Robert Wise", "Steven Spielberg", "Victor Fleming"]], "y_data": [[2, 2, 5, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return a pie chart on how many movie reviews does each director get?", "How many movie reviews does each director get. Visualize by pie chart.", "For each director, how many reviews have they received. Visualize by pie chart."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2371": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title"}, "chart": "Bar", "hardness": "Medium", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "min(T1.stars)", "x_data": [["Avatar", "E.T.", "Gone with the Wind", "Raiders of the Lost Ark", "Snow White", "The Sound of Music"]], "y_data": [[3, 2, 2, 2, 4, 2]], "classify": [], "describe": "GROUP BY title", "sort": null}, "nl_queries": ["Visualize the title and their lowest ratings of the movie using a bar chart.", "Please return me a bar chart show what are the smallest rating of different movie title?", "Visualize the lowest rating of different movie title using a bar chart."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2387": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director", "binning": ""}, "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director"}, "chart": "Bar", "hardness": "Easy", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "director", "y_name": "min(T1.stars)", "x_data": [["James Cameron", "Robert Wise", "Steven Spielberg", "Victor Fleming"]], "y_data": [[3, 2, 2, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the director and their lowest rating among all movies in a bar chart.", "Compare the lowest rating among all movies by each director using a bar chart.", "Please visualize a bar chart, that the X-axis is the director and the Y-axis is thier corresponding lowest rating among all movies. "], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": ["x", "y"]}]}, "2397": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director", "binning": ""}, "VQL": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director"}, "chart": "Pie", "hardness": "Medium", "db_id": "movie_1", "vis_obj": {"chart": "pie", "x_name": "director", "y_name": "max(T1.stars)", "x_data": [["James Cameron", "Robert Wise", "Steven Spielberg", "Victor Fleming"]], "y_data": [[5, 3, 4, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each director, return the director's name together with  the highest rating among all of their movies and ignore movies whose director is NULL. Could you plot the result with a pie chart?"], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2403": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4  ORDER BY T1.year", "binning": ""}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4  ORDER BY T1.year"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["1937", "1939", "1981", "2009"]], "y_data": [[2, 1, 2, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently, and count them by a bar chart"], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2429": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.country , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\" GROUP BY T1.country", "binning": ""}, "VQL": "Visualize PIE SELECT T1.country , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\" GROUP BY T1.country"}, "chart": "Pie", "hardness": "Hard", "db_id": "music_1", "vis_obj": {"chart": "pie", "x_name": "country", "y_name": "COUNT(country)", "x_data": [["Bangladesh", "India"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY country", "sort": null}, "nl_queries": ["What is the country of origin of the artist who is female and produced a song in Bangla, and count them by a pie chart", "What countries are the female artists who sung in the language Bangla from, and count them by a pie chart"], "irrelevant_tables": ["genre", "files"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2432": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT genre_is , min(T2.rating) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY genre_is ORDER BY T2.genre_is", "binning": ""}, "VQL": "Visualize BAR SELECT genre_is , min(T2.rating) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY genre_is ORDER BY T2.genre_is"}, "chart": "Bar", "hardness": "Medium", "db_id": "music_1", "vis_obj": {"chart": "bar", "x_name": "genre_is", "y_name": "min(T2.rating)", "x_data": [["blues", "folk", "modern", "nazrul", "pop", "tagore"]], "y_data": [[6, 7, 10, 5, 8, 8]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What are the and their lowest rating of songs grouped by genre and ordered by genre in asc? Plot them by a bar chart.", "Can you draw a bar chart that the X is genere and the Y is their lowest rating of songs grouped by genre in ascending, and ordered by genre"], "irrelevant_tables": ["artist"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": ["x", "y"], "sort_by": "field"}]}, "2442": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"}, "chart": "Pie", "hardness": "Medium", "db_id": "musical", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["The Phantom of the Opera", "Les Mis\u00e9rables", "West Side Story", "The Book of Mormon"]], "y_data": [[2, 2, 1, 4]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show names of musicals and the number of actors who have appeared in the musicals by a pie chart.", "Show me a pie chart for how many actors have appeared in each musical?", "Draw a pie chart for how many actors have appeared in each musical?", "How many actors have appeared in each musical. Show a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2457": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name"}, "chart": "Bar", "hardness": "Medium", "db_id": "network_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Alexis", "Andrew", "Austin", "Brittany", "Cassandra", "Gabriel", "Jessica", "John", "Kyle"]], "y_data": [[1, 1, 1, 1, 1, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["Show the number of names of high schoolers who have likes with a bar chart.", "Give me a bar chart to show the number of names of high schoolers who have likes.", "Show me the frequency of names of high schoolers who have likes with a bar chart."], "irrelevant_tables": ["Friend"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2471": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)", "binning": ""}, "VQL": "Visualize BAR SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)"}, "chart": "Bar", "hardness": "Medium", "db_id": "network_2", "vis_obj": {"chart": "bar", "x_name": "friend", "y_name": "age", "x_data": [["Bob", "Zach"]], "y_data": [[35, 45]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Who has friends that are older than the average age? Print their friends and their ages as well using a bar chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "2474": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "binning": ""}, "VQL": "Visualize PIE SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"}, "chart": "Pie", "hardness": "Medium", "db_id": "news_report", "vis_obj": {"chart": "pie", "x_name": "Work_Type", "y_name": "avg(t1.age)", "x_data": [["Host", "Music", "Screening"]], "y_data": [[43, 35.5, 30.33333333333333]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the average age of journalists working on different role type, show the result with a pie chart."], "irrelevant_tables": ["event"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2476": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "binning": ""}, "VQL": "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"}, "chart": "Bar", "hardness": "Medium", "db_id": "news_report", "vis_obj": {"chart": "bar", "x_name": "Work_Type", "y_name": "avg(Years_working)", "x_data": [["Host", "Music", "Screening"]], "y_data": [[16.5, 14, 4.666666666666667]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Return me a bar chart to show the average experience working length of journalists working on different role type.", "Visualize the average experience working length of journalists working on different role type using a bar chart."], "irrelevant_tables": ["event"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "2478": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "binning": ""}, "VQL": "Visualize PIE SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"}, "chart": "Pie", "hardness": "Medium", "db_id": "news_report", "vis_obj": {"chart": "pie", "x_name": "Work_Type", "y_name": "avg(Years_working)", "x_data": [["Host", "Music", "Screening"]], "y_data": [[16.5, 14, 4.666666666666667]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Visualize the average experience working length of journalists working on different role type using a pie chart.", "Return me a pie chart to show the average experience working length of journalists working on different role type."], "irrelevant_tables": ["event"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2479": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type"}, "chart": "Grouping Scatter", "hardness": "Medium", "db_id": "news_report", "vis_obj": {"chart": "scatter", "x_name": "avg(t1.age)", "y_name": "avg(Years_working)", "x_data": [[43], [35.5], [30.33333333333333]], "y_data": [[16.5], [14], [4.666666666666667]], "classify": ["Host", "Music", "Screening"], "describe": "GROUP BY Work_Type", "sort": null}, "nl_queries": ["Find the correlation between average age and average experience working length of journalists working on different role type with a grouped scatter plot.", "Please return a grouped scatter chart with three attributes: the average age and average experience working length of journalists working on different role type."], "irrelevant_tables": ["event"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "2508": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "party_people", "vis_obj": {"chart": "pie", "x_name": "Party_name", "y_name": "count(*)", "x_data": [["Convention Peoples Party", "Progress Party", "3"]], "y_data": [[3, 2, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show party names and the number of events for each party by a pie chart.", "Show party names and the number of events for each party. Visualize by pie chart.", "Visualize a pie chart with how many events are there for each party?", "Return a pie chart on how many events are there for each party?", "How many events are there for each party. Show a pie chart."], "irrelevant_tables": ["region", "member"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2512": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "party_people", "vis_obj": {"chart": "pie", "x_name": "Party_name", "y_name": "count(*)", "x_data": [["Convention Peoples Party", "Progress Party", "3"]], "y_data": [[2, 4, 9]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all party names and the number of members in each party by a pie chart.", "Return a pie on how many members are in each party?", "How many members are in each party. Visualize by pie chart."], "irrelevant_tables": ["party_events", "region"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2536": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date", "binning": ""}, "VQL": "Visualize PIE SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date"}, "chart": "Pie", "hardness": "Hard", "db_id": "performance_attendance", "vis_obj": {"chart": "pie", "x_name": "Date", "y_name": "COUNT(Date)", "x_data": [["February 11", "February 2", "February 5"]], "y_data": [[1, 2, 1]], "classify": [], "describe": "GROUP BY Date", "sort": null}, "nl_queries": ["A pie chart for showing the number of the dates of performances with attending members whose roles are \"Violin\".", "Show the dates of performances with attending members whose roles are \"Violin\", and count them by a pie chart"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2564": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Company_name , COUNT(T2.Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY T2.Company_name", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Company_name , COUNT(T2.Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY T2.Company_name"}, "chart": "Pie", "hardness": "Hard", "db_id": "phone_1", "vis_obj": {"chart": "pie", "x_name": "Company_name", "y_name": "COUNT(Company_name)", "x_data": [["Nokia Corporation", "Samsung Electronics Co Ltd", "Sony Mobile Communications"]], "y_data": [[2, 2, 1]], "classify": [], "describe": "GROUP BY Company_name", "sort": null}, "nl_queries": ["Tell me the proportion of the number of chips from different company names for the phone whose screen mode type is \"Graphics\" with a pie chart."], "irrelevant_tables": ["chip_model"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2576": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name"}, "chart": "Pie", "hardness": "Medium", "db_id": "phone_market", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["IPhone 5s", "IPhone 6s", "IPhone 7", "IPhone X"]], "y_data": [[2, 1, 1, 2]], "classify": [], "describe": "GROUP BY Name", "sort": null}, "nl_queries": ["Use a pie chart to show how many markets each phone is sold in."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2578": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District ORDER BY T2.Ranking", "binning": ""}, "VQL": "Visualize BAR SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District ORDER BY T2.Ranking"}, "chart": "Bar", "hardness": "Hard", "db_id": "phone_market", "vis_obj": {"chart": "bar", "x_name": "District", "y_name": "COUNT(District)", "x_data": [["Alberta", "British Columbia", "Ontario", "Quebec"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "GROUP BY District", "sort": null}, "nl_queries": ["Give me a bar chart to visualize the number of the districts of markets they are on, in ascending order of the ranking of the market."], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}]}, "2579": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District", "binning": ""}, "VQL": "Visualize PIE SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District"}, "chart": "Pie", "hardness": "Medium", "db_id": "phone_market", "vis_obj": {"chart": "pie", "x_name": "District", "y_name": "COUNT(District)", "x_data": [["Alberta", "British Columbia", "Ontario", "Quebec"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "GROUP BY District", "sort": null}, "nl_queries": ["Show the proportion of the districts of markets they are on, a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2595": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name", "binning": ""}, "VQL": "Visualize PIE SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name"}, "chart": "Pie", "hardness": "Hard", "db_id": "product_catalog", "vis_obj": {"chart": "pie", "x_name": "attribute_name", "y_name": "COUNT(attribute_name)", "x_data": [["Black", "Sweet", "Yellow"]], "y_data": [[3, 3, 2]], "classify": [], "describe": "GROUP BY attribute_name", "sort": null}, "nl_queries": ["Compute how many attributes in each name of the attribute definitions with attribute value 0. Show the result with a pie chart."], "irrelevant_tables": ["Catalog_Structure", "Catalogs"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2620": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description", "binning": ""}, "VQL": "Visualize PIE SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "products_gen_characteristics", "vis_obj": {"chart": "pie", "x_name": "product_category_description", "y_name": "COUNT(product_category_description)", "x_data": [["Herbs", "Seeds", "Spices"]], "y_data": [[2, 3, 1]], "classify": [], "describe": "GROUP BY product_category_description", "sort": null}, "nl_queries": ["A pie chart for what are the number of the descriptions of the categories that products with product descriptions that contain the letter t are in?", "What are the descriptions of the categories that products with product descriptions that contain the letter t are in, and count them by a pie chart", "Find the category descriptions of the products whose descriptions include letter 't', and count them by a pie chart", "A pie chart for finding the number of the category descriptions of the products whose descriptions include letter 't'."], "irrelevant_tables": ["Product_Characteristics", "Ref_Colors"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2635": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880"}, "chart": "Pie", "hardness": "Medium", "db_id": "protein_institute", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "Height_feet", "x_data": [["Citizens Bank Building", "Tampa City Hall", "One Tampa City Center"]], "y_data": [[145, 160, 537]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the names and heights of buildings with at least two institutions founded after 1880 in a pie chart."], "irrelevant_tables": ["protein"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2640": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id", "binning": ""}, "VQL": "Visualize BAR SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "protein_institute", "vis_obj": {"chart": "bar", "x_name": "Institution", "y_name": "count(*)", "x_data": [["Dakota State University", "Haskell Indian Nations University", "Lindenwood University-Belleville", "Valley City State University"]], "y_data": [[1, 1, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show institution names along with the number of proteins for each institution in a bar chart."], "irrelevant_tables": ["building"], "query_meta": [{"channel_specified": []}]}, "2641": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "race_track", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Auto Club Speedway", "Chicagoland Speedway", "Daytona International Speedway", "Homestead-Miami Speedway", "Kansas Speedway", "Martinsville Speedway"]], "y_data": [[1, 2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the name of track and the number of races in each track by a bar chart.", "Show the name of track and the number of races in each track. Visualize by bar chart.", "Visualize a bar chart for what are the names of different tracks, and how many races has each had?", "What are the names of different tracks, and how many races has each had. Plot them as bar chart.", "Return a histogram on what are the names of different tracks, and how many races has each had?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2693": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type", "binning": ""}, "VQL": "Visualize PIE SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type"}, "chart": "Pie", "hardness": "Medium", "db_id": "school_bus", "vis_obj": {"chart": "pie", "x_name": "Type", "y_name": "count(*)", "x_data": [["Private", "Public"]], "y_data": [[3, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the type of school and the number of buses for each type by a pie chart.", "Show the type of school and the number of buses for each type. Visualize by pie chart."], "irrelevant_tables": ["driver"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2694": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type"}, "chart": "Bar", "hardness": "Medium", "db_id": "school_bus", "vis_obj": {"chart": "bar", "x_name": "Type", "y_name": "count(*)", "x_data": [["Private", "Public"]], "y_data": [[3, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the type of school and the number of buses for each type in a bar chart."], "irrelevant_tables": ["driver"], "query_meta": [{"channel_specified": []}]}, "2734": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag", "binning": ""}, "VQL": "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag"}, "chart": "Pie", "hardness": "Medium", "db_id": "ship_1", "vis_obj": {"chart": "pie", "x_name": "Flag", "y_name": "COUNT(Flag)", "x_data": [["Malta", "Panama"]], "y_data": [[1, 4]], "classify": [], "describe": "GROUP BY Flag", "sort": null}, "nl_queries": ["Show me the proportion of the flag of ships that are not steered by any captain with Midshipman rank using a pie chart.", "What is the proportion of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2780": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5", "binning": "BIN birthday BY WEEKDAY"}, "VQL": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "soccer_1", "vis_obj": {"chart": "bar", "x_name": "birthday", "y_name": "COUNT(birthday)", "x_data": [["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]], "y_data": [[1, 1, 2, 0, 1, 0, 0]], "classify": [], "describe": "BIN birthday BY Month", "sort": null}, "nl_queries": ["Find players with an overall rating greater than or equal to 70 and use a bae chart to show the distribution of their birthdays over years."], "irrelevant_tables": ["sqlite_sequence", "Team"], "query_meta": [{"channel_specified": []}]}, "2781": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT birthday , COUNT(birthday),preferred_foot,T2.player_api_id  FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id where overall_rating >=75 GROUP BY preferred_foot,T2.player_api_id", "binning": "BIN birthday BY YEAR"}, "VQL": "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR"}, "chart": "Grouping Line", "hardness": "Extra Hard", "db_id": "soccer_1", "vis_obj": {"chart": "line", "x_name": "birthday", "y_name": "COUNT(birthday)", "x_data": [[1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997]], "y_data": [[0, 1, 1, 1, 1, 1, 7, 7, 16, 15, 19, 28, 35, 53, 58, 50, 58, 59, 57, 63, 53, 51, 50, 37, 35, 32, 24, 21, 10, 4, 1], [1, 1, 1, 5, 6, 11, 22, 30, 49, 65, 79, 87, 141, 136, 162, 127, 152, 159, 150, 191, 171, 162, 158, 123, 97, 91, 62, 49, 20, 8, 4]], "classify": ["left", "right"], "describe": "GROUP BY player_name, BIN birthday BY YEAR", "sort": null}, "nl_queries": ["Find players with a overall rating greater than or equal to 75 and use line chart to show the trend in the year of birth for players with different foot preferences."], "irrelevant_tables": ["sqlite_sequence", "Team"], "query_meta": [{"channel_specified": ["x", "y", "classify"]}]}, "2782": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT birthday, T1.player_api_id FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id Where T2.overall_rating >= 70 group by T1.player_api_id", "binning": "BIN birthday BY YEAR"}, "VQL": "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "soccer_1", "vis_obj": {"chart": "line", "x_name": "birthday", "y_name": "COUNT(birthday)", "x_data": [[1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1999]], "y_data": [[1, 1, 4, 10, 11, 16, 36, 56, 93, 120, 141, 192, 255, 306, 339, 308, 370, 385, 381, 436, 428, 446, 400, 363, 327, 273, 225, 159, 94, 42, 15, 2]], "classify": [], "describe": "BIN birthday BY YEAR", "sort": null}, "nl_queries": ["Find players with a composite score greater than or equal to 75 and use the trend line to show the trend in the year of birth for players with different foot preferences"], "irrelevant_tables": ["sqlite_sequence", "Team"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2785": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "chart": "Pie", "hardness": "Hard", "db_id": "soccer_2", "vis_obj": {"chart": "pie", "x_name": "pName", "y_name": "COUNT(pName)", "x_data": [["Andrew", "Blake", "Charles", "David", "Eddie"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY pName", "sort": null}, "nl_queries": ["Find the name of all students who were in the tryout sorted in alphabetic order, and count them by a pie chart", "A pie chart for what are the number of the names of all students who tried out in alphabetical order?", "What are the names of all students who tried out in alphabetical order, and count them by a pie chart"], "irrelevant_tables": ["College"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2787": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos", "binning": ""}, "VQL": "Visualize PIE SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos"}, "chart": "Pie", "hardness": "Easy", "db_id": "soccer_2", "vis_obj": {"chart": "pie", "x_name": "pPos", "y_name": "min(T2.HS)", "x_data": [["goalie", "mid", "striker"]], "y_data": [[1200, 300, 1600]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Pie. what is minimum hours of the students playing in different position?", "For each position, what is the minimum time students spent practicing. Show a pie chart."], "irrelevant_tables": ["College"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2795": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "binning": ""}, "VQL": "Visualize PIE SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"}, "chart": "Pie", "hardness": "Medium", "db_id": "soccer_2", "vis_obj": {"chart": "pie", "x_name": "state", "y_name": "enr", "x_data": [["ASU", "FSU"]], "y_data": [[12000, 19000]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["What is the name and enrollment of the colleges where have any students who got accepted in the tryout decision. Show a pie chart.", "Show me a pie chart for how many students are enrolled in colleges that have student accepted during tryouts?", "How many students are enrolled in colleges that have student accepted during tryouts. Plot them as pie chart."], "irrelevant_tables": ["Player"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2808": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "solvency_ii", "vis_obj": {"chart": "bar", "x_name": "Product_Name", "y_name": "COUNT(*)", "x_data": [["TV Equipments", "Special Dinning", "Men suits", "Conference Equipments", "Dinning", "Trading Policy", "Trading Policy B"]], "y_data": [[5, 4, 2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the names of products and the number of events they are in, sorted by the number of events in descending order by a bar chart.", "Show the names of products and the number of events they are in, sorted by the number of events in descending order. Visualize by bar chart."], "irrelevant_tables": ["Parties_in_Events", "Addresses"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2822": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name"}, "chart": "Pie", "hardness": "Medium", "db_id": "sports_competition", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["AIB", "ASC", "BK Slide", "HGS2", "IFG"]], "y_data": [[2, 4, 6, 2, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["For all players, show the proportion of the club name they come from by a pie chart."], "irrelevant_tables": ["competition_result", "competition"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2847": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5"}, "chart": "Pie", "hardness": "Extra Hard", "db_id": "store_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(*)", "x_data": [["Rock", "Latin", "Metal", "Alternative & Punk", "Jazz"]], "y_data": [[1297, 579, 374, 332, 130]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the top 5 genres by number of tracks. List genres name and total tracks by a pie chart.", "List the top 5 genres by number of tracks. List genres name and total tracks. Visualize by pie chart.", "Return a pie chart on how many tracks does each genre have and what are the names of the top 5?", "How many tracks does each genre have and what are the names of the top 5. Show a pie chart."], "irrelevant_tables": ["customers", "playlist_tracks"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2848": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "store_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(*)", "x_data": [["Rock", "Latin", "Metal", "Alternative & Punk", "Jazz"]], "y_data": [[1297, 579, 374, 332, 130]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the top 5 genres by number of tracks. List genres name and total tracks with a bar chart.", "List the top 5 genres by number of tracks. List genres name and total tracks. Plot them as bar chart.", "Visualize a bar chart for how many tracks does each genre have and what are the names of the top 5?", "Show me a bar chart for how many tracks does each genre have and what are the names of the top 5?", "How many tracks does each genre have and what are the names of the top 5. Show bar chart."], "irrelevant_tables": ["invoices", "artists"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "2852": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "store_1", "vis_obj": {"chart": "bar", "x_name": "first_name", "y_name": "SUM(T2.total)", "x_data": [["Helena", "Richard", "Luis", "Ladislav", "Hugh", "Julia", "Frank", "Fynn", "Astrid", "Victor"]], "y_data": [[49.62000000000001, 47.62000000000001, 46.62, 45.62, 45.62, 43.62000000000001, 43.62, 43.62, 42.62, 42.62]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the top 10 customers by total gross sales. Compare the total gross sales of customers by their first name. Show by a bar chart."], "irrelevant_tables": ["artists", "employees"], "query_meta": [{"channel_specified": []}]}, "2858": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city", "binning": ""}, "VQL": "Visualize PIE SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city"}, "chart": "Pie", "hardness": "Medium", "db_id": "store_product", "vis_obj": {"chart": "pie", "x_name": "Headquartered_City", "y_name": "count(*)", "x_data": [["Bahawalpur City", "Bhakkar City", "Hafizabad City", "Khanewal City"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the number of stores in each city. Visualize by pie chart.", "Display a pie chart for how many stores are headquarted in each city?", "How many stores are headquarted in each city. Show a pie chart."], "irrelevant_tables": ["store_product", "product"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2864": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "storm_record", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["One", "Three", "Four", "Five"]], "y_data": [[2, 1, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["List the name for storms and the number of affected regions for each storm with a pie chart.", "List the name for storms and the number of affected regions for each storm. Plot them as pie chart.", "A pie chart about how many regions were affected by each storm?", "Return a pie chart on how many regions were affected by each storm?", "How many regions were affected by each storm. Show a pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2866": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "binning": ""}, "VQL": "Visualize PIE SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "storm_record", "vis_obj": {"chart": "pie", "x_name": "Region_name", "y_name": "count(*)", "x_data": [["Afghanistan", "Albania", "Algeria", "Denmark"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show the name for regions and the number of storms for each region in a pie chart.", "Show the name for regions and the number of storms for each region. Plot them as pie chart.", "Show me a pie chart for how many storms occured in each region?", "How many storms occured in each region. Plot them as pie chart."], "irrelevant_tables": ["storm"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2885": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "binning": ""}, "VQL": "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "student_assessment", "vis_obj": {"chart": "pie", "x_name": "course_name", "y_name": "count(*)", "x_data": [["statistics", "English", "French", "data structure"]], "y_data": [[4, 2, 2, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Draw a pie chart for how many registed students do each course have? List course name and the number of their registered students?", "For each course id, how many students are registered and what are the course names. Plot them as pie chart."], "irrelevant_tables": ["Student_Course_Attendance", "People"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2903": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name"}, "chart": "Bar", "hardness": "Hard", "db_id": "swimming", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Craig Stevens", "Federico Colbertaldo", "Grant Hackett", "Oussama Mellouli", "Ryan Cochrane", "Sergiy Fesenko"]], "y_data": [[3, 1, 1, 2, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["A bar chart for finding the number of the names of swimmers who has a result of \"win\".", "Find the names of swimmers who has a result of \"win\", and count them by a bar chart"], "irrelevant_tables": ["event", "stadium"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "2930": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name", "binning": ""}, "VQL": "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name"}, "chart": "Pie", "hardness": "Hard", "db_id": "swimming", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Baku Olympic Stadium", "Gazprom Arena", "Nou Mestalla", "Yubileyniy Stadium"]], "y_data": [[1, 1, 2, 1]], "classify": [], "describe": "GROUP BY name", "sort": null}, "nl_queries": ["Find the names of stadiums that some Australian swimmers have been to, and count them by a pie chart", "A pie chart for finding the number of the names of stadiums that some Australian swimmers have been to."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2932": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "theme_gallery", "vis_obj": {"chart": "pie", "x_name": "Name", "y_name": "count(*)", "x_data": [["Vijay Singh", "John Daly", "Paul Azinger", "Jeff Sluman", "Nick Price"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show all artist names and the number of exhibitions for each artist in a pie chart.", "Display a pie chart for how many exhibitions has each artist had?"], "irrelevant_tables": ["exhibition_record"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2934": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Date , Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004", "binning": ""}, "VQL": "Visualize PIE SELECT Date , Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004"}, "chart": "Pie", "hardness": "Medium", "db_id": "theme_gallery", "vis_obj": {"chart": "pie", "x_name": "Date", "y_name": "Attendance", "x_data": [["December 2", "December 5", "December 7"]], "y_data": [[965, 1098, 2983]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find dates and attendance for exhibitions that happened in 2004, show me the proportion of attendance by date in a pie chart."], "irrelevant_tables": ["artist"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2958": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description", "binning": ""}, "VQL": "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description"}, "chart": "Pie", "hardness": "Medium", "db_id": "tracking_grants_for_research", "vis_obj": {"chart": "pie", "x_name": "outcome_description", "y_name": "COUNT(outcome_description)", "x_data": [["Published Research Paper", "Research Patent"]], "y_data": [[10, 5]], "classify": [], "describe": "GROUP BY outcome_description", "sort": null}, "nl_queries": ["What are the descriptions of all the project outcomes, and count them by a pie chart", "List the description of the outcomes for all projects, and count them by a pie chart", "A pie chart for what are the number of the descriptions of all the project outcomes?", "A pie chart for listing the number of the description of the outcomes for all projects."], "irrelevant_tables": ["Research_Staff", "Staff_Roles"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2969": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name"}, "chart": "Bar", "hardness": "Medium", "db_id": "tracking_orders", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "SUM(count(*))", "x_data": [["book", "clothes", "food", "music", "phone"]], "y_data": [[1, 1, 5, 5, 3]], "classify": [], "describe": "GROUP BY product_name", "sort": null}, "nl_queries": ["List the name and count of each product in all orders with a bar chart.", "For each product, show its name and the number of times it was ordered. Plot them as bar chart."], "irrelevant_tables": ["Invoices", "Shipment_Items"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "2971": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name", "binning": ""}, "VQL": "Visualize PIE SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name"}, "chart": "Pie", "hardness": "Medium", "db_id": "tracking_orders", "vis_obj": {"chart": "pie", "x_name": "product_name", "y_name": "SUM(count(*))", "x_data": [["book", "clothes", "food", "music", "phone"]], "y_data": [[1, 1, 5, 5, 3]], "classify": [], "describe": "GROUP BY product_name", "sort": null}, "nl_queries": ["List the name and count of each product in all orders with a pie chart.", "List the name and count of each product in all orders. Plot them as pie chart."], "irrelevant_tables": ["Invoices", "Shipment_Items"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "2972": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id", "binning": ""}, "VQL": "Visualize PIE SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"}, "chart": "Pie", "hardness": "Medium", "db_id": "tracking_orders", "vis_obj": {"chart": "pie", "x_name": "customer_name", "y_name": "count(*)", "x_data": [["George", "Beulah", "Jeramie"]], "y_data": [[3, 2, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each customer who has at least two orders, find the customer name and number of orders made. Show a pie chart."], "irrelevant_tables": ["Order_Items", "Products"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "2973": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"}, "chart": "Bar", "hardness": "Medium", "db_id": "tracking_orders", "vis_obj": {"chart": "bar", "x_name": "customer_name", "y_name": "count(*)", "x_data": [["George", "Beulah", "Jeramie"]], "y_data": [[3, 2, 3]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["For each customer who has at least two orders, find the customer name and number of orders made. Visualize by bar chart."], "irrelevant_tables": ["Order_Items", "Products"], "query_meta": [{"channel_specified": []}]}, "2979": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.order_status , COUNT(T2.order_status) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" GROUP BY order_status", "binning": ""}, "VQL": "Visualize BAR SELECT T2.order_status , COUNT(T2.order_status) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" GROUP BY order_status"}, "chart": "Bar", "hardness": "Hard", "db_id": "tracking_orders", "vis_obj": {"chart": "bar", "x_name": "order_status", "y_name": "COUNT(order_status)", "x_data": [["On Road", "Packing"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY order_status", "sort": null}, "nl_queries": ["Find the status of orders which belong to the customer named \"Jeramie\", group by order status, and count them. Show the result with a bar chart."], "irrelevant_tables": ["Invoices", "Order_Items"], "query_meta": [{"channel_specified": []}]}, "2980": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.order_status , COUNT(T2.order_status) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" GROUP BY order_status", "binning": ""}, "VQL": "Visualize PIE SELECT T2.order_status , COUNT(T2.order_status) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" GROUP BY order_status"}, "chart": "Pie", "hardness": "Hard", "db_id": "tracking_orders", "vis_obj": {"chart": "pie", "x_name": "order_status", "y_name": "COUNT(order_status)", "x_data": [["On Road", "Packing"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY order_status", "sort": null}, "nl_queries": ["Find the status of orders which belong to the customer named \"Jeramie\", group by order status, and count them. Show the result with a pie chart.", "Find the status of orders which belong to the customer named \"Jeramie\", group by order status, and show the proportion of order status with a pie chart."], "irrelevant_tables": ["Shipment_Items", "Products"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "3021": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details", "binning": ""}, "VQL": "Visualize PIE SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details"}, "chart": "Pie", "hardness": "Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "pie", "x_name": "purchase_details", "y_name": "COUNT(purchase_details)", "x_data": [["a", "c", "i", "r"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY purchase_details", "sort": null}, "nl_queries": ["What are the purchase details of transactions with amount bigger than 10000, and count them by a pie chart", "A pie chart for what are the number of the purchase details of transactions with amount bigger than 10000?"], "irrelevant_tables": ["Ref_Transaction_Types", "Investors"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "3063": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option", "binning": ""}, "VQL": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"}, "chart": "Pie", "hardness": "Medium", "db_id": "tvshow", "vis_obj": {"chart": "pie", "x_name": "Package_Option", "y_name": "COUNT(Package_Option)", "x_data": [["Sky Famiglia", "Sky Famiglia + Sky HD", "no ( FTV )"]], "y_data": [[8, 1, 2]], "classify": [], "describe": "GROUP BY Package_Option", "sort": null}, "nl_queries": ["What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a pie chart", "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a pie chart", "A pie chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?"], "irrelevant_tables": ["TV_series"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "3064": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"}, "chart": "Bar", "hardness": "Medium", "db_id": "tvshow", "vis_obj": {"chart": "bar", "x_name": "Package_Option", "y_name": "COUNT(Package_Option)", "x_data": [["Sky Famiglia", "Sky Famiglia + Sky HD", "no ( FTV )"]], "y_data": [[8, 1, 2]], "classify": [], "describe": "GROUP BY Package_Option", "sort": null}, "nl_queries": ["find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart", "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart"], "irrelevant_tables": ["TV_series"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}, {"channel_specified": []}]}, "3068": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid", "binning": ""}, "VQL": "Visualize PIE SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"}, "chart": "Pie", "hardness": "Medium", "db_id": "twitter_1", "vis_obj": {"chart": "pie", "x_name": "name", "y_name": "count(*)", "x_data": [["Iron Man", "Black Widow\n", "Susan", "Tyler Swift", "Celine Dion"]], "y_data": [[2, 1, 2, 1, 2]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Find the name of each user and number of tweets tweeted by each of them. Visualize by pie chart."], "irrelevant_tables": ["follows"], "query_meta": [{"channel_specified": ["x", "y"]}]}, "3265": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID", "binning": ""}, "VQL": "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID"}, "chart": "Pie", "hardness": "Medium", "db_id": "workshop_paper", "vis_obj": {"chart": "pie", "x_name": "Author", "y_name": "COUNT(DISTINCT T1.workshop_id)", "x_data": [["Jeff Lloyd", "Sammy Green", "Sherman Smith", "Steve Niehaus", "Steve Raible"]], "y_data": [[1, 2, 1, 1, 1]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Show each author and the number of workshops they submitted to in a pie chart.", "Show each author and the number of workshops they submitted to. Show a pie chart.", "Pie. how many workshops did each author submit to? Return the author name and the number of workshops.", "Visualize a pie chart with how many workshops did each author submit to? Return the author name and the number of workshops.", "How many workshops did each author submit to? Return the author name and the number of workshops by a pie chart.", "How many workshops did each author submit to? Return the author name and the number of workshops. Plot them as pie chart."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "3273": {"vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language", "binning": ""}, "VQL": "Visualize PIE SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language"}, "chart": "Pie", "hardness": "Hard", "db_id": "world_1", "vis_obj": {"chart": "pie", "x_name": "Language", "y_name": "COUNT(Language)", "x_data": [["Dutch", "Papiamento"]], "y_data": [[3, 1]], "classify": [], "describe": "GROUP BY Language", "sort": null}, "nl_queries": ["What is the official language used in the country the name of whose head of state is Beatrix, and count them by a pie chart", "What is the official language spoken in the country whose head of state is Beatrix, and count them by a pie chart"], "irrelevant_tables": ["sqlite_sequence", "city"], "query_meta": [{"channel_specified": ["x", "y"]}, {"channel_specified": ["x", "y"]}]}, "3274": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language", "binning": ""}, "VQL": "Visualize BAR SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language"}, "chart": "Bar", "hardness": "Hard", "db_id": "world_1", "vis_obj": {"chart": "bar", "x_name": "Language", "y_name": "COUNT(Language)", "x_data": [["Dutch", "Papiamento"]], "y_data": [[3, 1]], "classify": [], "describe": "GROUP BY Language", "sort": null}, "nl_queries": ["What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart", "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a bar chart"], "irrelevant_tables": ["city", "sqlite_sequence"], "query_meta": [{"channel_specified": []}, {"channel_specified": []}]}, "2443@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "musical", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["West Side Story", "Les Mis\u00e9rables", "The Phantom of the Opera", "The Book of Mormon"]], "y_data": [[1, 2, 2, 4]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many actors have appeared in each musical Plot them as bar chart, list in ascending by the Y-axis.", "Show names of musicals and the number of actors who have appeared in the musicals Show bar chart, and display Y-axis in ascending order please.", "Show names of musicals and the number of actors who have appeared in the musicals in a bar chart, and list from low to high by the y-axis please.", "Return a histogram on how many actors have appeared in each musical?, could you display in asc by the total number?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1388@x_name@ASC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year ASC", "binning": "BIN Year BY YEAR"}, "VQL": "Visualize LINE SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year ASC BIN Year BY YEAR"}, "chart": "Line", "hardness": "Hard", "db_id": "farm", "vis_obj": {"chart": "line", "x_name": "Year", "y_name": "COUNT(Year)", "x_data": [["2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013"]], "y_data": [[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]], "classify": [], "describe": "BIN Year BY YEAR", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show how many competitions are held in each year with a line chart, and could you rank by the X in ascending?", "Show how many competitions are held in each year with a line chart, and could you order by the x-axis in asc?"], "irrelevant_tables": ["competition_record"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1390@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY COUNT(Official_Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY COUNT(Official_Name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "farm", "vis_obj": {"chart": "bar", "x_name": "Official_Name", "y_name": "COUNT(Official_Name)", "x_data": [["Aroostook", "Plaster Rock", "Perth-Andover", "Grand Falls/Grand-Sault", "Drummond"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Official_Name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of competitions held in each city with a bar chart, and rank in descending by the y axis.", "How many competitions are held in each city? Draw a bar chart, sort Y in desc order please."], "irrelevant_tables": ["competition_record"], "query_meta": [{"channel_specified": ["y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1475@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "game_injury", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "COUNT(Date)", "x_data": [["31 October 2008", "16 August 2008", "14 March 2010", "9 December 2007", "8 August 2009", "7 July 2011", "31 October 2010", "22 September 2007", "18 May 2007", "14 October 2009", "10 July 2008"]], "y_data": [[3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Date", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many players are injured in each day? Show a bar chart, I want to list from high to low by the Y."], "irrelevant_tables": ["stadium"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1478@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'  ORDER BY COUNT(Season) DESC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize BAR SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'  ORDER BY COUNT(Season) DESC BIN Season BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "game_injury", "vis_obj": {"chart": "bar", "x_name": "Season", "y_name": "COUNT(Season)", "x_data": [["2011", "2008", "2007", "2010", "2009"]], "y_data": [[1, 1, 1, 0, 0]], "classify": [], "describe": "BIN Season BY YEAR", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many players having an injury of 'Foot injury' or 'Knee problem' in each season? Draw a bar chart, and could you order from high to low by the Y?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1523@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name ORDER BY T3.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name ORDER BY T3.Name DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Surgery", "Psychiatry", "General Medicine"]], "y_data": [[3, 1, 5]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Give me a bar chart showing how many physicians for each department name they primarily affiliated in, display in desc by the names."], "irrelevant_tables": ["Block", "Appointment"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1525@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Christopher Turk", "Molly Clock", "John Dorian", "Percival Cox", "Elliot Reid"]], "y_data": [[1, 1, 2, 2, 3]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["List the name of physicians who took some appointment, and count them by a bar chart, sort Y-axis in ascending order.", "What are the names of all the physicians who took appointments, and count them by a bar chart, and rank from low to high by the y-axis please.", "A bar chart for listing the number of the name of physicians who took some appointment, rank by the the number of name from low to high please."], "irrelevant_tables": ["Department", "Affiliated_With"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1532@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "hospital_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Foo Labs", "X"]], "y_data": [[2, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Find the number of medications prescribed for each brand Plot them as bar chart, and I want to rank by the X-axis in desc please.", "How many medications are prescribed for each brand Visualize by bar chart, I want to display in desc by the x axis.", "Display a bar chart for how many medications are prescribed for each brand?, and I want to display in desc by the x axis."], "irrelevant_tables": ["Stay", "Procedures"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2310@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufacturer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Tomorrow", "Chevrolet House", "Jiaju", "Chevrolet"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and could you display by the x-axis in desc please?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2314@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufacturer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "Price_in_Dollar", "x_data": [["Hatstand", "Dining set", "Chabudai", "Bookcase", "Billiard table"]], "y_data": [[1234, 2124, 450, 239, 443]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart, display in desc by the Name.", "Give me the names and prices of furnitures which some companies are manufacturing with a bar chart, and I want to display by the names in descending."], "irrelevant_tables": ["manufacturer"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2845@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "station_weather", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Ananthapuri Express", "Jayanthi Janatha Express", "Madurai Fast Passenger", "Quilon Fast Passenger", "Guruvayur Express", "Island Express"]], "y_data": [[1, 1, 1, 1, 2, 2]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find names of trains that run through stations for the local authority Chiltern, compare the total number of name in a bar graph, and sort in asc by the y-axis."], "irrelevant_tables": ["weekly_weather"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2865@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "storm_record", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Four", "Three", "Five", "One"]], "y_data": [[1, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["List the name for storms and the number of affected regions for each storm with a bar chart, and display the total number in ascending order.", "Return a bar chart on how many regions were affected by each storm?, and I want to list in asc by the y-axis.", "How many regions were affected by each storm Visualize by bar chart, rank in ascending by the Y please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2867@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "storm_record", "vis_obj": {"chart": "bar", "x_name": "Region_name", "y_name": "count(*)", "x_data": [["Afghanistan", "Albania", "Algeria", "Denmark"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the name for regions and the number of storms for each region by a bar chart, display in ascending by the X-axis.", "Show me a bar chart for how many storms occured in each region?, and I want to sort by the names in ascending."], "irrelevant_tables": ["storm"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1409@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "flight_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Lockheed L1011", "Airbus A340-300", "SAAB 340", "Piper Archer III", "Embraer ERJ-145", "Boeing 757-300", "Boeing 747-400", "Boeing 737-800"]], "y_data": [[2, 2, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Display a bar chart for what is the name of each aircraft and how many flights does each one complete?, rank from high to low by the y-axis.", "Visualize a bar chart for what is the name of each aircraft and how many flights does each one complete?, and could you sort by the Y-axis from high to low?", "What is the name of each aircraft and how many flights does each one complete Show bar chart, and sort by the Y in descending please.", "Show aircraft names and number of flights for each aircraft with a bar chart, list by the Y in descending."], "irrelevant_tables": ["certificate", "employee"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2173@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Hewlett-Packard", "Creative Labs", "Winchester", "Sony", "Iomega", "Fujitsu"]], "y_data": [[3, 3, 2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many products are there for each manufacturer Visualize by bar chart, I want to show in desc by the y-axis.", "Display a bar chart for how many products are there for each manufacturer?, could you show in descending by the Y-axis?", "Find the number of products for each manufacturer, showing the name of each company Show bar chart, and display from high to low by the the total number ."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2176@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY count(DISTINCT T1.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY count(DISTINCT T1.name) DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "count(DISTINCT T1.name)", "x_data": [["Los Angeles", "Austin", "Paris", "Tokyo", "Taiwan", "Beijing"]], "y_data": [[3, 3, 2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many different products are produced in each headquarter city Visualize by bar chart, I want to list by the y axis in descending.", "Find the number of different products that are produced by companies at different headquarter cities Plot them as bar chart, and could you order by the Y-axis in desc please?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2203@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "max(T1.Price)", "x_data": [["Winchester", "Sony", "Iomega", "Hewlett-Packard", "Fujitsu", "Creative Labs"]], "y_data": [[120, 240, 150, 270, 240, 180]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Compare the prices of each manufacturer's most expensive product with a bar chart, and could you order x-axis in descending order?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2215@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "COUNT(Headquarter)", "x_data": [["Austin", "Beijing", "Los Angeles", "Paris", "Taiwan", "Tokyo"]], "y_data": [[3, 1, 3, 2, 1, 1]], "classify": [], "describe": "GROUP BY Headquarter", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["For those records from the products and each product's manufacturer, find headquarter and the amount of headquarter , and group by attribute headquarter, and visualize them by a bar chart, and sort in asc by the X-axis.", "For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the amount of headquarter , and group by attribute headquarter in a bar chart, and sort in asc by the X-axis."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2224@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "SUM(Revenue)", "x_data": [["Austin", "Beijing", "Los Angeles", "Paris", "Taiwan", "Tokyo"]], "y_data": [[300, 200, 150, 60, 130, 120]], "classify": [], "describe": "GROUP BY Headquarter", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the sum of revenue , and group by attribute headquarter in a bar chart, could you rank by the X-axis in ascending?", "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the sum of revenue , and group by attribute headquarter, I want to display in ascending by the x axis.", "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of revenue , and group by attribute headquarter, order by the x-axis in asc."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2225@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Headquarter", "y_name": "AVG(Revenue)", "x_data": [["Beijing", "Taiwan", "Tokyo", "Austin", "Los Angeles", "Paris"]], "y_data": [[200, 130, 120, 100, 50, 30]], "classify": [], "describe": "GROUP BY Headquarter", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of revenue , and group by attribute headquarter, sort from high to low by the mean revenue.", "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to rank y-axis in descending order.", "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, sort from high to low by the mean revenue."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2235@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Founder", "y_name": "SUM(Revenue)", "x_data": [["Robert", "Owen", "Mary", "John", "James", "Andy"]], "y_data": [[60, 300, 200, 130, 150, 120]], "classify": [], "describe": "GROUP BY Founder", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the sum of revenue , and group by attribute founder, and rank by the X-axis in desc please.", "For those records from the products and each product's manufacturer, show me about the distribution of founder and the sum of revenue , and group by attribute founder in a bar chart, I want to list X in desc order please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2236@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Revenue) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Founder", "y_name": "AVG(Revenue)", "x_data": [["Robert", "James", "Owen", "Andy", "John", "Mary"]], "y_data": [[30, 50, 100, 120, 130, 200]], "classify": [], "describe": "GROUP BY Founder", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For those records from the products and each product's manufacturer, show me about the distribution of founder and the average of revenue , and group by attribute founder in a bar chart, and sort by the the average of revenue in ascending.", "For those records from the products and each product's manufacturer, find founder and the average of revenue , and group by attribute founder, and visualize them by a bar chart, display by the total number in asc.", "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the founder , and group by attribute founder by a bar chart, could you order by the the average of revenue in ascending?", "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the average of revenue , and group by attribute founder, and rank y axis in ascending order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "2305@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY avg(T1.Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY avg(T1.Price) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "manufactory_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "avg(T1.Price)", "x_data": [["Winchester", "Creative Labs", "Iomega", "Hewlett-Packard", "Fujitsu", "Sony"]], "y_data": [[62.5, 150, 150, 162, 240, 240]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Draw a bar chart for what are the average prices of products, grouped by manufacturer name?, and order Y-axis from low to high order.", "A bar chart about what are the average prices of products, grouped by manufacturer name?, order from low to high by the y-axis."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2788@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos ORDER BY pPos DESC", "binning": ""}, "VQL": "Visualize BAR SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos ORDER BY pPos DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "soccer_2", "vis_obj": {"chart": "bar", "x_name": "pPos", "y_name": "min(T2.HS)", "x_data": [["striker", "mid", "goalie"]], "y_data": [[1600, 300, 1200]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show me a bar chart for what is minimum hours of the students playing in different position?, order in desc by the X-axis."], "irrelevant_tables": ["College"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "988@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_and_invoices", "vis_obj": {"chart": "bar", "x_name": "customer_first_name", "y_name": "count(*)", "x_data": [["Vesta", "Ruby", "Meaghan", "Kieran", "Joesph", "Jensen", "Abbey"]], "y_data": [[1, 3, 4, 4, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the number of accounts for each customer in a bar chart grouping by customer's first name, I want to sort in descending by the name."], "irrelevant_tables": ["Products", "Financial_Transactions"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1105@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY SUM(Num_Employees) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY SUM(Num_Employees) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "department_management", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "SUM(Num_Employees)", "x_data": [["Homeland Security", "Treasury"]], "y_data": [[208000, 115897]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' with a bar chart, and order number of employees from low to high order."], "irrelevant_tables": ["head"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2475@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "news_report", "vis_obj": {"chart": "bar", "x_name": "Work_Type", "y_name": "avg(t1.age)", "x_data": [["Host", "Music", "Screening"]], "y_data": [[43, 35.5, 30.33333333333333]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the average age of journalists working on different role type, show the result with a bar chart, and sort by the y axis in descending please."], "irrelevant_tables": ["event"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2493@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name ORDER BY COUNT(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "news_report", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Jackie Waring", "Tony Waddington", "Tom Briggs", "Ray Ferris", "John Meaney", "Herbert Swindells"]], "y_data": [[2, 1, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the names of journalists and the number of events they reported in a bar chart, and I want to sort y-axis from high to low order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2430@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.country , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\" GROUP BY T1.country ORDER BY T1.country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.country , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\" GROUP BY T1.country ORDER BY T1.country ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "music_1", "vis_obj": {"chart": "bar", "x_name": "country", "y_name": "COUNT(country)", "x_data": [["India", "Bangladesh"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY country", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What countries are the female artists who sung in the language Bangla from, and count them by a bar chart, and I want to rank by the y-axis in asc."], "irrelevant_tables": ["genre", "files"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2859@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "store_product", "vis_obj": {"chart": "bar", "x_name": "Headquartered_City", "y_name": "count(*)", "x_data": [["Bahawalpur City", "Bhakkar City", "Hafizabad City", "Khanewal City"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the number of stores in each city Plot them as bar chart, and I want to order in asc by the Y.", "How many stores are headquarted in each city Plot them as bar chart, and list in asc by the total number.", "Draw a bar chart for how many stores are headquarted in each city?, sort in asc by the the total number .", "Return a bar chart on how many stores are headquarted in each city?, list in asc by the total number please."], "irrelevant_tables": ["product", "store_product"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2735@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "ship_1", "vis_obj": {"chart": "bar", "x_name": "Flag", "y_name": "COUNT(Flag)", "x_data": [["Panama", "Malta"]], "y_data": [[4, 1]], "classify": [], "describe": "GROUP BY Flag", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["What is the total number of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a bar chart, and rank by the X-axis in descending.", "Show me the total number of the flag of ships that are not steered by any captain with Midshipman rank using a bar graph, and display x axis in descending order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2803@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "solvency_ii", "vis_obj": {"chart": "bar", "x_name": "Product_Name", "y_name": "COUNT(*)", "x_data": [["Conference Equipments", "Dinning", "Trading Policy", "Trading Policy B", "Men suits", "Special Dinning", "TV Equipments"]], "y_data": [[1, 1, 1, 1, 2, 4, 5]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the names of products and the number of events they are in Visualize by bar chart, and I want to sort by the total number in asc.", "Show the names of products and the number of events they are in by a bar chart, and display Y in ascending order."], "irrelevant_tables": ["Parties", "Assets_in_Events"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "2621@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "products_gen_characteristics", "vis_obj": {"chart": "bar", "x_name": "product_category_description", "y_name": "COUNT(product_category_description)", "x_data": [["Seeds", "Herbs", "Spices"]], "y_data": [[3, 2, 1]], "classify": [], "describe": "GROUP BY product_category_description", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["What are the descriptions of the categories that products with product descriptions that contain the letter t are in, and count them by a bar chart, display by the y-axis from high to low.", "A bar chart for what are the number of the descriptions of the categories that products with product descriptions that contain the letter t are in?, and display by the y-axis from high to low.", "Find the category descriptions of the products whose descriptions include letter 't', and count them by a bar chart, display Y from high to low order.", "A bar chart for finding the number of the category descriptions of the products whose descriptions include letter 't', and display Y in desc order."], "irrelevant_tables": ["Ref_Colors", "Ref_Characteristic_Types"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1163@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC", "binning": "BIN date_of_treatment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC BIN date_of_treatment BY MONTH"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "date_of_treatment", "y_name": "COUNT(date_of_treatment)", "x_data": [["Feb", "Mar"]], "y_data": [[2, 13]], "classify": [], "describe": "BIN date_of_treatment BY MONTH", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many treatments in each month? Return a bar chart, show by the y axis from low to high please."], "irrelevant_tables": ["Charges", "Breeds"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1164@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC", "binning": "BIN date_of_treatment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC BIN date_of_treatment BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "date_of_treatment", "y_name": "COUNT(date_of_treatment)", "x_data": [["Tue", "Fri", "Mon", "Sat", "Sun", "Wed", "Thur"]], "y_data": [[1, 2, 2, 2, 2, 2, 4]], "classify": [], "describe": "BIN date_of_treatment BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many treatments in each day? Return a bar chart that bins date of treatment by weekday, sort in asc by the Y-axis.", "List the number of treatments in each day with a bar chart that bins date of treatment by weekday, and display the number of date of treatment from low to high order."], "irrelevant_tables": ["Charges", "Dogs"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1165@x_name@DESC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment DESC"}, "chart": "Line", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "line", "x_name": "date_of_treatment", "y_name": "COUNT(date_of_treatment)", "x_data": [["2018-03-24", "2018-03-23", "2018-03-19", "2018-03-16", "2018-03-15", "2018-03-14", "2018-03-13", "2018-03-11", "2018-03-10", "2018-03-08", "2018-03-04", "2018-03-01", "2018-02-28", "2018-02-26"]], "y_data": [[1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY date_of_treatment", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["How many treatments in each day? Return a line chart that groups by date of treatment, order X in ascending order."], "irrelevant_tables": ["Sizes", "Breeds"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1166@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY first_name ORDER BY COUNT(first_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "first_name", "y_name": "COUNT(first_name)", "x_data": [["Danny", "Velva", "Domenica", "Karley", "Ruben", "Sigurd", "Vernice", "Monte"]], "y_data": [[1, 1, 2, 2, 2, 2, 2, 3]], "classify": [], "describe": "GROUP BY first_name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many treatments each professional has operated? Show a bar chart that groups by professional's first name, order y-axis in ascending order.", "List the number of treatments each professional has operated with a bar chart that groups by professional's first name, show in ascending by the y axis."], "irrelevant_tables": ["Owners", "Breeds"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1190@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_arrived) ASC", "binning": "BIN date_arrived BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_arrived) ASC BIN date_arrived BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "date_arrived", "y_name": "COUNT(date_arrived)", "x_data": [["Mon", "Wed", "Sat", "Sun", "Thur", "Tue", "Fri"]], "y_data": [[0, 0, 1, 1, 1, 2, 4]], "classify": [], "describe": "BIN date_arrived BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the number of dogs that received a treatment arrived in each day in a bar chart that bins arrived date by weekday, rank in ascending by the total number please.", "How many dogs who have gone through a treatment arrived in each day? Return a bar chart that bins arrived date by weekday, and rank how many date arrived in asc order."], "irrelevant_tables": ["Treatment_Types", "Professionals"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "1197@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "first_name", "y_name": "COUNT(first_name)", "x_data": [["Cindy", "Emelie", "Gay", "Jaclyn", "Johann", "Kade", "Lorenz", "Melisa", "Nora", "Orlando", "Rachelle", "Rolando"]], "y_data": [[1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1]], "classify": [], "describe": "GROUP BY first_name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["List the number of dogs each owner has in a bar chart that groups by owner's first name, I want to list by the first_name in asc.", "How many dogs each owner has? Return a bar chart that groups by owner's first name, I want to list by the first_name in asc."], "irrelevant_tables": ["Charges", "Treatment_Types"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "1200@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "dog_kennels", "vis_obj": {"chart": "bar", "x_name": "treatment_type_description", "y_name": "AVG(cost_of_treatment)", "x_data": [["Take for a Walk", "Physical examination", "Vaccination"]], "y_data": [[478.4, 485.8, 508.0]], "classify": [], "describe": "GROUP BY treatment_type_description", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["A bar chart about what are the average cost for each treatment type description? Order Y-axis from low to high order.", "List average the cost of each treatment and the corresponding treatment type description in a bar chart, and could you rank by the y-axis in asc?"], "irrelevant_tables": ["Charges", "Breeds"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2075@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "bar", "x_name": "Type_of_Thing_Code", "y_name": "COUNT(Type_of_Thing_Code)", "x_data": [["Commen", "Electronics", "Furniture"]], "y_data": [[7, 5, 1]], "classify": [], "describe": "GROUP BY Type_of_Thing_Code", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Give me a bar chart to show the proportion of each type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21', sort the number of type of thing code in desc order."], "irrelevant_tables": ["Organizations", "Customer_Events"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2088@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY organization_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY organization_details ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "bar", "x_name": "organization_details", "y_name": "COUNT(organization_details)", "x_data": [["Denesik and Sons Party", "Reinger, Hudson and Nolan Group", "Robel-Schulist Group"]], "y_data": [[10, 2, 3]], "classify": [], "describe": "GROUP BY organization_details", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["List the number of items by the details of the organization that owns it using a bar chart, rank in ascending by the organization_details."], "irrelevant_tables": ["Properties", "Timed_Locations_of_Things"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2097@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY YEAR"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "bar", "x_name": "date_moved_in", "y_name": "COUNT(date_moved_in)", "x_data": [["2015", "2016"]], "y_data": [[9, 4]], "classify": [], "describe": "BIN date_moved_in BY YEAR", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Please use a bar chart to compare the number of customers of each customer's move in date, note that you should bin move in date into Year interval, and list total number in descending order."], "irrelevant_tables": ["Residents", "Customer_Event_Notes"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2102@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "local_govt_and_lot", "vis_obj": {"chart": "bar", "x_name": "date_moved_in", "y_name": "COUNT(date_moved_in)", "x_data": [["Fri", "Tue", "Wed", "Thur", "Sun", "Sat", "Mon"]], "y_data": [[9, 4, 0, 0, 0, 0, 0]], "classify": [], "describe": "BIN date_moved_in BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Please use a bar chart to compare the number of customers of each customer's move-in date, note that you should bin move-in date into Day Of Week interval, sort in descending by the Y."], "irrelevant_tables": ["Things", "Timed_Locations_of_Things"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "447@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC"}, "chart": "Bar", "hardness": "Medium", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Title", "y_name": "max(T1.price)", "x_data": [["The Case of the Bermuda Triangle", "The Case of the Mystery Weekend", "The Case of the Piggy Banker", "The Case of the Smart Dummy", "The Case: Off the Record"]], "y_data": [[9.99, 15.99, 12.99, 12.99, 8.99]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Give me the title and highest price for each film Show bar chart, could you display in ascending by the x-axis?", "Return a bar chart on what are the title and maximum price of each film?, display x-axis in asc order.", "Give me the title and highest price for each film in a bar chart, and display x-axis in asc order.", "A bar chart about what are the title and maximum price of each film?, and could you display by the Title in asc?"], "irrelevant_tables": ["cinema"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "453@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM schedule AS T1 JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "AVG(Price)", "x_data": [["Carrowleagh", "Mount Callan", "Codling", "Gortahile", "Oriel"]], "y_data": [[9.99, 9.99, 11.656666666666666, 12.99, 15.99]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["A bar chart showing the average price of each cinema, and list by the the average of price in ascending."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "455@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY COUNT(Title) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY COUNT(Title) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Title", "y_name": "COUNT(Title)", "x_data": [["The Case of the Bermuda Triangle", "The Case of the Piggy Banker", "The Case of the Smart Dummy", "The Case: Off the Record", "The Case of the Mystery Weekend"]], "y_data": [[1, 1, 1, 1, 3]], "classify": [], "describe": "GROUP BY Title", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For each film, return the number of cinemas showing that fim in a bar chart, and I want to order by the the number of title in asc."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "458@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Oriel", "Mount Callan", "Gortahile", "Codling", "Carrowleagh"]], "y_data": [[1, 1, 1, 3, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["A bar chart showing the number of films each cinema has, display names in desc order please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "459@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cinema", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "SUM(Price)", "x_data": [["21 May", "21 Jun", "20 May", "2 Aug", "19 May", "11 July"]], "y_data": [[25.98, 8.99, 9.99, 12.99, 15.99, 9.99]], "classify": [], "describe": "GROUP BY Date", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["For each record in schedule, show sum of price for each day in a bar chart, order by the y in descending."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1437@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "formula_1", "vis_obj": {"chart": "bar", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["2017", "2016", "2015"]], "y_data": [[400, 462, 378]], "classify": [], "describe": "GROUP BY year", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many races with race result are held in each year after 2014? Show me a bar chart, and rank in desc by the year please."], "irrelevant_tables": ["constructorResults", "status"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1448@x_name@ASC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"  ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"  ORDER BY year ASC BIN year BY YEAR"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "formula_1", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "COUNT(year)", "x_data": [["2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017"]], "y_data": [[17, 18, 17, 19, 19, 20, 19, 19, 19, 21, 20]], "classify": [], "describe": "BIN year BY YEAR", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the number of races that had any driver whose forename is Lewis in each year with a line chart, and could you order by the X in asc?", "How many races that had any driver whose forename is Lewis? Show me a line chart, display by the x axis in ascending.", "Show the number of races that had any driver whose forename is Lewis in each year with a line chart, and sort by the X-axis in asc please.", "How many races that had any driver whose forename is Lewis? Show me a line chart, rank by the X in asc please."], "irrelevant_tables": ["circuits", "driverStandings"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "3226@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "wine_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Rosellas Vineyard", "Pinot Noir", "Garys Vineyard", "Chardonnay", "Sleepy Hollow Vineyard", "Sarmento Vineyard", "Metallico Un-Oaked", "Kali Hart"]], "y_data": [[4, 4, 3, 2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Give the names of wines with prices below 50 and with appelations in Monterey county, and count them by a bar chart, sort y-axis from high to low order please.", "A bar chart for what are the number of the wines that have prices lower than 50 and have appelations in Monterey county?, I want to sort by the Y in descending please.", "What are the wines that have prices lower than 50 and have appelations in Monterey county, and count them by a bar chart, and order in desc by the y axis."], "irrelevant_tables": ["grapes"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1516@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "gas_company", "vis_obj": {"chart": "bar", "x_name": "Company", "y_name": "count(*)", "x_data": [["Royal Dutch Shell", "Petrobras", "PetroChina", "ExxonMobil", "BP"]], "y_data": [[1, 1, 1, 2, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the company name with the number of gas station by a bar chart, and could you sort in descending by the X?", "Show the company name with the number of gas station Show bar chart, and order by the names in desc."], "irrelevant_tables": ["gas_station"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2565@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company_name , COUNT(Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY Company_name ORDER BY COUNT(Company_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Company_name , COUNT(Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY Company_name ORDER BY COUNT(Company_name) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "phone_1", "vis_obj": {"chart": "bar", "x_name": "Company_name", "y_name": "COUNT(Company_name)", "x_data": [["Sony Mobile Communications", "Nokia Corporation", "Samsung Electronics Co Ltd"]], "y_data": [[1, 2, 2]], "classify": [], "describe": "GROUP BY Company_name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Compare the number of chips from different company names for the phone whose screen mode type is \"Graphics\" with a bar chart, order in ascending by the how many company name."], "irrelevant_tables": ["chip_model"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2566@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name ORDER BY COUNT(Company_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name ORDER BY COUNT(Company_name) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "phone_1", "vis_obj": {"chart": "bar", "x_name": "Company_name", "y_name": "COUNT(Company_name)", "x_data": [["Nokia Corporation", "Sony Mobile Communications", "Samsung Electronics Co Ltd", "LG Electronics", "Huawei Technologies Co.Ltd.", "HTC Corporation"]], "y_data": [[2, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Company_name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Compute the total number of chips of different company names for all the phones that were launched in year 2002 or have RAM size greater than 32, list y-axis in desc order. Return a bar chart."], "irrelevant_tables": ["screen_mode"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2959@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "tracking_grants_for_research", "vis_obj": {"chart": "bar", "x_name": "outcome_description", "y_name": "COUNT(outcome_description)", "x_data": [["Research Patent", "Published Research Paper"]], "y_data": [[5, 10]], "classify": [], "describe": "GROUP BY outcome_description", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What are the descriptions of all the project outcomes, and count them by a bar chart, I want to rank y axis in ascending order.", "A bar chart for listing the number of the description of the outcomes for all projects, could you sort in ascending by the y axis?", "A bar chart for what are the number of the descriptions of all the project outcomes?, and could you display in ascending by the Y please?", "List the description of the outcomes for all projects, and count them by a bar chart, and list from low to high by the the number of outcome description please."], "irrelevant_tables": ["Organisations", "Organisation_Types"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2509@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "party_people", "vis_obj": {"chart": "bar", "x_name": "Party_name", "y_name": "count(*)", "x_data": [["3", "Convention Peoples Party", "Progress Party"]], "y_data": [[3, 3, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show party names and the number of events for each party in a bar chart, and list by the X-axis in asc."], "irrelevant_tables": ["member", "region"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2513@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "party_people", "vis_obj": {"chart": "bar", "x_name": "Party_name", "y_name": "count(*)", "x_data": [["3", "Convention Peoples Party", "Progress Party"]], "y_data": [[9, 2, 4]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Return a bar chart on how many members are in each party?, rank by the Party_name in asc please."], "irrelevant_tables": ["region", "party_events"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1626@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "JOB_TITLE", "y_name": "AVG(salary)", "x_data": [["Purchasing Clerk", "Stock Clerk", "Shipping Clerk", "Administration Assistant", "Programmer", "Marketing Representative", "Human Resources Representative", "Stock Manager", "Accountant", "Public Accountant", "Sales Representative", "Public Relations Representative", "Purchasing Manager", "Accounting Manager", "Finance Manager", "Sales Manager", "Marketing Manager", "Administration Vice President", "President"]], "y_data": [[2780, 2785, 3215, 4400, 5760, 6000, 6500, 7280, 7920, 8300, 8350, 10000, 11000, 12000, 12000, 12200, 13000, 17000, 24000]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Visualize a bar chart for what is the average salary for each job title?, and rank in ascending by the Y please.", "Display a bar chart for what is the average salary for each job title?, I want to order Y in ascending order please.", "What is the average salary for each job title Show bar chart, order from low to high by the Y-axis please."], "irrelevant_tables": ["regions", "countries"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1632@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "DEPARTMENT_NAME", "y_name": "COUNT(*)", "x_data": [["Administration", "Human Resources", "Public Relations", "Accounting", "Marketing", "Executive", "IT", "Finance", "Purchasing", "Sales", "Shipping"]], "y_data": [[1, 1, 1, 2, 2, 3, 5, 6, 6, 34, 45]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Draw a bar chart for what are the department names and how many employees work in each of them?, sort the total number from low to high order.", "Show me a bar chart for what are the department names and how many employees work in each of them?, could you list from low to high by the Y-axis?", "What are the department names and how many employees work in each of them Visualize by bar chart, rank Y from low to high order."], "irrelevant_tables": ["regions", "countries"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1671@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "chart": "Bar", "hardness": "Medium", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "FIRST_NAME", "y_name": "SALARY", "x_data": [["Pat", "Susan", "Kimberely", "William", "Hermann", "Shelley", "Michael"]], "y_data": [[6000, 6500, 7000, 8300, 10000, 12000, 13000]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and salary , and display by the total number in asc.", "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the first_name by a bar chart, sort from low to high by the Y.", "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and salary , and sort from low to high by the Y."], "irrelevant_tables": ["jobs", "job_history"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1696@x_name@DESC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"}, "chart": "Line", "hardness": "Medium", "db_id": "hr_1", "vis_obj": {"chart": "line", "x_name": "HIRE_DATE", "y_name": "SALARY", "x_data": [["1987-10-01", "1987-09-30", "1987-09-29", "1987-09-28", "1987-09-27", "1987-09-26", "1987-09-03"]], "y_data": [[8300, 12000, 10000, 6500, 6000, 13000, 7000]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["For those employees who do not work in departments with managers that have ids between 100 and 200, show me the trend about salary over hire_date with a line chart, order in asc by the x axis.", "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a line chart about the change of salary over hire_date , show in ascending by the x axis.", "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the trend of salary over hire_date , could you rank x-axis in asc order?", "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a line chart about the change of salary over hire_date , and show in asc by the x axis."], "irrelevant_tables": ["countries", "locations"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1956@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "JOB_TITLE", "y_name": "COUNT(JOB_TITLE)", "x_data": [["Sales Representative", "Sales Manager"]], "y_data": [[29, 5]], "classify": [], "describe": "GROUP BY JOB_TITLE", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Please tell me how many employees in the department 80 on each type of job titles using a bar chart, and show by the Y-axis in descending.", "Compare the total number of different job titles for all those jobs in department 80 using a bar chart, show y-axis in descending order."], "irrelevant_tables": ["regions", "departments"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1963@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "hr_1", "vis_obj": {"chart": "bar", "x_name": "DEPARTMENT_NAME", "y_name": "COUNT(*)", "x_data": [["Shipping", "Sales", "Purchasing", "Finance", "IT", "Executive", "Marketing", "Accounting", "Public Relations", "Human Resources", "Administration"]], "y_data": [[45, 34, 6, 6, 5, 3, 2, 2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Give the name of each department and the number of employees in each Plot them as bar chart, show by the Y-axis in descending please.", "Give the name of each department and the number of employees in each in a bar chart, and could you sort by the y-axis from high to low?"], "irrelevant_tables": ["countries", "regions"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2726@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "scientist_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Juicy: Extracting Apple Juice with Pectinase", "Build Your Own Telescope", "Aerodynamics and Ice Hockey", "A Silver-Cleaning Battery"]], "y_data": [[1, 3, 1, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, list by the x-axis in descending please. Dispaly in a bar chart"], "irrelevant_tables": ["Scientists"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2733@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "scientist_1", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Aerodynamics and Gas Mileage", "Build Your Own Telescope"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the name of the project for which a scientist whose name contains 'Smith' is assigned to, and count them by a bar chart, and I want to rank by the y-axis in asc.", "A bar chart for finding the number of the name of the project for which a scientist whose name contains 'Smith' is assigned to, I want to order in asc by the total number.", "What is the name of the project that has a scientist assigned to it whose name contains 'Smith', and count them by a bar chart, I want to order in asc by the total number."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "748@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY COUNT(Paragraph_Text) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY COUNT(Paragraph_Text) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "cre_Doc_Template_Mgt", "vis_obj": {"chart": "bar", "x_name": "Paragraph_Text", "y_name": "COUNT(Paragraph_Text)", "x_data": [["Korea", "Ukraine"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY Paragraph_Text", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["A bar chart for what are the number of the paragraph texts for the document with the name 'Customer reviews'?, and display Y in desc order.", "What are the paragraph texts for the document with the name 'Customer reviews', and count them by a bar chart, and list by the total number from high to low.", "Show all paragraph texts for the document \"Customer reviews\", and count them by a bar chart, could you display in descending by the y-axis?"], "irrelevant_tables": ["Ref_Template_Types", "Templates"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "609@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , COUNT(building) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY building ORDER BY building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT building , COUNT(building) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY building ORDER BY building ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "building", "y_name": "COUNT(building)", "x_data": [["Chandler", "Fairchild", "Lambeau", "Lamberton", "Main", "Nassau", "Saucon", "Stabler", "Taylor", "Whitman"]], "y_data": [[1, 2, 2, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY building", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Find the number of courses offered by Psychology department in each building with a bar chart, and rank in asc by the X.", "How many courses are in the Psychology department in each building? Draw a bar chart, show by the x-axis in ascending please."], "irrelevant_tables": ["prereq", "instructor"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "630@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T3.id) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T3.id) DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "dept_name", "y_name": "count(DISTINCT T3.id)", "x_data": [["Statistics", "Athletics", "Marketing", "English", "Elec. Eng.", "Cybernetics", "Accounting", "Pol. Sci.", "Languages", "Psychology", "Physics", "Mech. Eng.", "Comp. Sci.", "Biology", "Geology", "Finance", "Astronomy"]], "y_data": [[6, 5, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the total number of instructors for each department with a bar chart, and could you sort by the y axis in desc?", "How many instructors are in each department? Show me a bar chart, and show by the y axis from high to low."], "irrelevant_tables": ["teaches", "course"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "633@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "dept_name", "y_name": "AVG(credits)", "x_data": [["Pol. Sci.", "Comp. Sci.", "Astronomy", "Finance", "Physics", "Civil Eng.", "English", "Elec. Eng.", "Biology", "Math", "Cybernetics", "Athletics", "Statistics", "Mech. Eng.", "Marketing", "Geology", "Psychology", "History", "Accounting"]], "y_data": [[4.0, 4.0, 4.0, 3.8, 3.75, 3.5714285714285716, 3.5, 3.5, 3.4, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.25, 3.2222222222222223, 3.2, 3.2, 3.111111111111111, 3.0, 3.0]], "classify": [], "describe": "GROUP BY dept_name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the average of credits of courses that have more than one prerequisite for each department with a bar chart, and sort in desc by the Y please."], "irrelevant_tables": ["teaches", "department"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "636@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "AVG(credits)", "x_data": [["World History", "Groups and Rings", "Game Programming", "Embedded Systems", "International Practicum", "Rock and Roll", "Ponzi Schemes", "Operating Systems", "Immunology", "Graph Theory", "Fiction Writing", "Electron Microscopy", "Elastic Structures", "Differential Geometry", "Cat Herding", "Aquatic Chemistry"]], "y_data": [[4, 4, 4, 4, 3.5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "classify": [], "describe": "GROUP BY title", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the average of credits of courses that have more than one prerequisite for each title with a bar chart, I want to order in descending by the y-axis."], "irrelevant_tables": ["advisor", "teaches"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "652@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Ullman ", "Mingoz", "Mahmoud", "Jaekel", "Dale", "DAgostino", "Bietzk"]], "y_data": [[1, 2, 1, 1, 2, 2, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["List the number of courses in year 2008 for each instructor in a bar chart, and order X in desc order."], "irrelevant_tables": ["section", "time_slot"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "653@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_2", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "COUNT(title)", "x_data": [["World History", "Transaction Processing", "Surfing", "Race Car Driving", "Networking", "Marine Mammals", "Embedded Systems", "Elastic Structures", "Animal Behavior"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 1]], "classify": [], "describe": "GROUP BY title", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["List the number of instructors for each course in year 2008 with a bar chart, and sort by the X-axis in descending please."], "irrelevant_tables": ["classroom", "prereq"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "713@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "course_teach", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Anne Walker", "Vicente Carretero", "Lucy Wong", "Kearsley Brown", "Gustaaf Deloor"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show names of teachers and the number of courses they teach Visualize by bar chart, I want to sort in desc by the y axis.", "What are the names of the teachers and how many courses do they teach Plot them as bar chart, order from high to low by the Y-axis.", "Show names of teachers and the number of courses they teach with a bar chart, and order from high to low by the Y-axis.", "Show me a bar chart for what are the names of the teachers and how many courses do they teach?, could you show Y-axis in descending order?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "715@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY COUNT(Name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "course_teach", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Anne Walker", "Vicente Carretero", "Lucy Wong", "Kearsley Brown", "Gustaaf Deloor"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of courses each teacher teaches in a bar chart, I want to list total number in desc order.", "What is the number of courses each teacher teaches? Visualze with a bar chart, and I want to list total number in desc order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "719@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "course_teach", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Vicente Carretero", "Lucy Wong", "Kearsley Brown", "Gustaaf Deloor", "Anne Walker"]], "y_data": [[1, 1, 1, 1, 2]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the number of courses each teacher teaches in a bar chart, rank Name in desc order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "723@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Doc_Control_Systems", "vis_obj": {"chart": "bar", "x_name": "role_description", "y_name": "count(*)", "x_data": [["Manager", "Proof Manager", "Editor", "Photo"]], "y_data": [[1, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show a bar chart about how many employees does each role have?, and I want to display Y in ascending order please."], "irrelevant_tables": ["Ref_Shipping_Agents", "Documents_Mailed"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "725@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Doc_Control_Systems", "vis_obj": {"chart": "bar", "x_name": "role_code", "y_name": "count(*)", "x_data": [["PT", "PR", "MG", "ED"]], "y_data": [[2, 1, 1, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many employees does each role have? Plot a bar chart listing role id and number of employees, display by the role_code in descending please."], "irrelevant_tables": ["Ref_Document_Status", "Addresses"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2072@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "loan_1", "vis_obj": {"chart": "bar", "x_name": "bname", "y_name": "sum(amount)", "x_data": [["morningside", "downtown", "broadway"]], "y_data": [[2050, 3000, 5000]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What are the names of the different bank branches, and what are their total loan amounts Show bar chart, and I want to sort by the Y-axis from low to high.", "Return a bar chart on what are the names of the different bank branches, and what are their total loan amounts?, display y-axis from low to high order."], "irrelevant_tables": ["customer"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2691@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "sakila_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Action", "Animation", "Children", "Classics", "Comedy", "Documentary", "Drama", "Family", "Foreign", "Games", "Horror", "Music", "New", "Sci-Fi", "Sports", "Travel"]], "y_data": [[64, 66, 60, 57, 58, 68, 62, 69, 73, 61, 56, 51, 63, 61, 74, 57]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What are the names of the different categories, and how many films are in each? Show me the bar graph, could you rank X-axis in asc order please?"], "irrelevant_tables": ["address", "payment"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2360@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "director", "y_name": "count(*)", "x_data": [["Steven Spielberg", "Victor Fleming", "Robert Wise", "James Cameron"]], "y_data": [[5, 3, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["For each director, how many reviews have they received Visualize by bar chart, and could you rank from high to low by the Y-axis?", "Show me a bar chart for how many movie reviews does each director get?, and I want to display by the y axis in descending please.", "How many movie reviews does each director get Show bar chart, sort y-axis in desc order please.", "Return a bar chart on how many movie reviews does each director get?, order Y-axis from high to low order."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2369@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "AVG(stars)", "x_data": [["Snow White", "Avatar", "Raiders of the Lost Ark", "Gone with the Wind", "The Sound of Music", "E.T."]], "y_data": [[4.5, 4.0, 3.3333333333333335, 3.0, 2.5, 2.5]], "classify": [], "describe": "GROUP BY title", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["What are the average star ratings of each movie title? Could you return me a bar chart?, rank in desc by the Y please.", "Please tell me the average star ratings of each movie title using a bar chart, rank in desc by the Y please.", "Visualize the title and and the average star rating of the movie using a bar chart, and could you display y axis in descending order?"], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2383@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title ASC"}, "chart": "Bar", "hardness": "Medium", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "min(T1.stars)", "x_data": [["Avatar", "E.T.", "Gone with the Wind", "Raiders of the Lost Ark", "Snow White", "The Sound of Music"]], "y_data": [[3, 2, 2, 2, 4, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the title and the lowest rating among all movies in a bar chart, list in ascending by title."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2398@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "director", "y_name": "max(T1.stars)", "x_data": [["James Cameron", "Victor Fleming", "Steven Spielberg", "Robert Wise"]], "y_data": [[5, 4, 4, 3]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, order by the y axis from high to low."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2402@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "avg(T1.stars)", "x_data": [["Brittany Harris", "Ashley White", "Chris Jackson", "Mike Anderson", "Sarah Martinez", "Daniel Lewis", "Elizabeth Thomas", "James Cameron"]], "y_data": [[2.6666666666666665, 3, 3, 3, 3, 4, 4, 5]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, rank in ascending by the y-axis.", "What is the average number of stars that each reviewer awards for a movie Show bar chart, and rank in ascending by the y-axis.", "Draw a bar chart for what is the average rating star for each reviewer?, order by the stars in ascending."], "irrelevant_tables": ["Movie"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2405@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "movie_1", "vis_obj": {"chart": "bar", "x_name": "title", "y_name": "COUNT(title)", "x_data": [["Snow White", "Raiders of the Lost Ark", "Gone with the Wind", "Avatar", "The Sound of Music", "E.T."]], "y_data": [[2, 2, 2, 2, 1, 1]], "classify": [], "describe": "GROUP BY title", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["What are the titles of all movies that have rating star is between 3 and 5, and count them by a bar chart, and could you display by the y axis in descending?", "A bar chart for what are the number of the titles of all movies that have between 3 and 5 stars?, and list by the y axis in desc.", "What are the titles of all movies that have between 3 and 5 stars, and count them by a bar chart, and could you display by the y axis in descending?", "A bar chart for what are the number of the titles of all movies that have rating star is between 3 and 5?, list by the y axis in desc."], "irrelevant_tables": ["Reviewer"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1432@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY COUNT(Type) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY COUNT(Type) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "flight_company", "vis_obj": {"chart": "bar", "x_name": "Type", "y_name": "COUNT(Type)", "x_data": [["Subsidiary", "Joint Venture", "Corporate"]], "y_data": [[9, 3, 1]], "classify": [], "describe": "GROUP BY Type", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many companies that have ever operated a flight for each type? Draw a bar chart, and display in desc by the total number."], "irrelevant_tables": ["airport"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "420@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "car_1", "vis_obj": {"chart": "bar", "x_name": "Continent", "y_name": "count(*)", "x_data": [["africa", "america", "asia", "australia", "europe"]], "y_data": [[2, 3, 2, 2, 6]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["For each continent, list its name, and how many countries it has with a bar chart, display x axis in asc order please.", "How many countries does each continent have? Return a bar chart listing the continent name and the number of countries, display x axis in asc order please."], "irrelevant_tables": ["car_makers", "car_names"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "434@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "car_1", "vis_obj": {"chart": "bar", "x_name": "Continent", "y_name": "count(*)", "x_data": [["europe", "asia", "america"]], "y_data": [[11, 7, 4]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Display a bar chart for what is the name of each continent and how many car makers are there in each one?, and sort by the the total number in desc.", "What is the name of each continent and how many car makers are there in each one Plot them as bar chart, and show from high to low by the y-axis please.", "A bar chart about what is the name of each continent and how many car makers are there in each one?, and show from high to low by the y-axis please.", "How many car makers are there in each continents? List the continent name and the count by a bar chart, and could you sort from high to low by the y axis?", "How many car makers are there in each continents? List the continent name and the count Visualize by bar chart, sort y axis in descending order.", "Draw a bar chart for how many car makers are there in each continents? List the continent name and the count, and sort y axis in descending order."], "irrelevant_tables": ["cars_data", "model_list"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1060@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_card_transactions", "vis_obj": {"chart": "bar", "x_name": "card_type_code", "y_name": "count(*)", "x_data": [["Debit", "Credit"]], "y_data": [[8, 7]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the card type codes and the number of transactions Visualize by bar chart, display by the y axis in desc.", "Show the card type codes and the number of transactions with a bar chart, and show in descending by the total number please.", "What are the different card types, and how many transactions have been made with each Visualize by bar chart, I want to order in desc by the Y-axis.", "Return a bar chart on what are the different card types, and how many transactions have been made with each?, and I want to display Y in desc order."], "irrelevant_tables": ["Accounts"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2162@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "machine_repair", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Eddie Collins", "Tony Sewell", "Joe Sewell"]], "y_data": [[1, 1, 5]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["A bar chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, and could you sort how many name from low to high order?", "What are the names of the technicians that are assigned to repair machines with more point values than 70, and count them by a bar chart, order Y-axis in ascending order.", "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a bar chart, could you sort by the y axis in ascending?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2164@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name ORDER BY COUNT(Name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "machine_repair", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Charlie Hollocher", "Eddie Collins", "John Brown", "Tony Sewell", "Joe Sewell"]], "y_data": [[1, 1, 1, 1, 5]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Give me a bar chart that group and count names of technicians with a series of machines they are assigned to repair, order in asc by the y axis please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2766@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "shop_membership", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Brooke Greville", "Cochrane", "Popert", "Taverner", "Zytogorski", "Alexandre"]], "y_data": [[1, 1, 1, 1, 1, 3]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For each branch id, what are the names of the branches that were registered after 2015 Visualize by bar chart, could you order the total number in asc order?", "Show all branch names with the number of members in each branch registered after 2015 with a bar chart, and could you order the total number in asc order?", "Show all branch names with the number of members in each branch registered after 2015 Plot them as bar chart, rank by the total number in asc."], "irrelevant_tables": ["purchase"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2537@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY COUNT(Date) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY COUNT(Date) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "performance_attendance", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "COUNT(Date)", "x_data": [["February 2", "February 5", "February 11"]], "y_data": [[2, 1, 1]], "classify": [], "describe": "GROUP BY Date", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the dates of performances with attending members whose roles are \"Violin\", and count them by a bar chart, and order in desc by the how many date.", "A bar chart for showing the number of the dates of performances with attending members whose roles are \"Violin\", show by the total number in descending please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "1078@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "debate", "vis_obj": {"chart": "bar", "x_name": "Venue", "y_name": "COUNT(Venue)", "x_data": [["Abu Dhabi , UAE", "Dubai , UAE", "Manama , Bahrain"]], "y_data": [[1, 1, 3]], "classify": [], "describe": "GROUP BY Venue", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["A bar chart showing the number of debates in each venue for those on the affirmative side, I want to list X-axis in asc order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1080@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "debate", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["William B. Maclay", "Thomas J. Barr", "Luther C. Carter", "James Humphrey"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the number of debates for each person on the affirmative side in a bar chart, and rank X in desc order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1083@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "debate", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["William B. Maclay", "Thomas J. Barr", "Luther C. Carter", "James Humphrey"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the names of people and the number of times they have been on the affirmative side of debates by a bar chart, sort in descending by the x-axis."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1250@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "e_learning", "vis_obj": {"chart": "bar", "x_name": "date_of_completion", "y_name": "COUNT(date_of_completion)", "x_data": [["2018-03-22", "2018-03-07", "2018-03-06", "2018-03-04", "2018-03-02", "2018-02-26"]], "y_data": [[2, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY date_of_completion", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["A bar chart for what are the number of the completion dates of all the tests that have result \"Fail\"?, and list from high to low by the Y-axis.", "A bar chart for returning the number of the completion date for all the tests that have \"Fail\" result, and list from high to low by the Y-axis.", "What are the completion dates of all the tests that have result \"Fail\", and count them by a bar chart, list from high to low by the Y-axis.", "Return the completion date for all the tests that have \"Fail\" result, and count them by a bar chart, list from high to low by the Y-axis."], "irrelevant_tables": ["Students", "Course_Authors_and_Tutors"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1254@x_name@ASC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment ASC"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "e_learning", "vis_obj": {"chart": "line", "x_name": "date_of_enrolment", "y_name": "COUNT(date_of_enrolment)", "x_data": [["2017-08-02", "2017-09-06", "2017-09-21", "2017-10-10", "2017-10-23", "2017-10-29", "2017-11-13"]], "y_data": [[1, 1, 2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY date_of_enrolment", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Find the enrollment date for all the tests that have \"Pass\" result, and count them by a line chart, and I want to display x axis in ascending order.", "A line chart for finding the number of the enrollment date for all the tests that have \"Pass\" result, and list date_of_enrolment in ascending order please."], "irrelevant_tables": ["Course_Authors_and_Tutors", "Courses"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "field"}]}, "1273@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "e_learning", "vis_obj": {"chart": "bar", "x_name": "course_name", "y_name": "COUNT(*)", "x_data": [["modern Arts", "database", "advanced database", "Writing in French", "Spanish", "Japanese", "French", "Chinese Painting", "Art history", "AI"]], "y_data": [[2, 2, 2, 2, 2, 2, 3, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["What is the name of each course and the corresponding number of student enrollment Show bar chart, I want to display course_name in desc order.", "Display a bar chart for what is the name of each course and the corresponding number of student enrollment?, show by the names in descending please.", "List the name and the number of enrolled student for each course in a bar chart, and could you show in desc by the X-axis?", "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, could you list in desc by the x axis?"], "irrelevant_tables": ["Course_Authors_and_Tutors", "Students"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1278@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "e_learning", "vis_obj": {"chart": "bar", "x_name": "subject_name", "y_name": "COUNT(*)", "x_data": [["Arts", "Language", "Computer Science"]], "y_data": [[4, 5, 6]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the number of courses for each subject in a bar chart, and could you show in asc by the y axis?", "How many courses for each subject? Plot a bar chart, sort from low to high by the Y."], "irrelevant_tables": ["Student_Course_Enrolment", "Students"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1289@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "e_learning", "vis_obj": {"chart": "bar", "x_name": "subject_name", "y_name": "COUNT(*)", "x_data": [["Computer Science", "Language", "Arts"]], "y_data": [[6, 5, 4]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the number of courses for each subject in a bar chart, and order total number in desc order.", "How many courses for each subject? Plot a bar chart, and display by the y-axis in descending."], "irrelevant_tables": ["Students", "Course_Authors_and_Tutors"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "1293@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "e_learning", "vis_obj": {"chart": "bar", "x_name": "date_of_enrolment", "y_name": "COUNT(date_of_enrolment)", "x_data": [["Dec", "Aug", "Sept", "Oct", "Nov"]], "y_data": [[1, 1, 0, 0, 0]], "classify": [], "describe": "BIN date_of_enrolment BY MONTH", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the the date of enrollment of the \"Spanish\" course, bin date by month and count them by a bar chart, rank in descending by the Y-axis."], "irrelevant_tables": ["Subjects", "Student_Tests_Taken"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1137@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "department_store", "vis_obj": {"chart": "bar", "x_name": "product_type_code", "y_name": "COUNT(product_type_code)", "x_data": [["Clothes", "Hardware"]], "y_data": [[2, 1]], "classify": [], "describe": "GROUP BY product_type_code", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Give me a bar chart showing the number of products supplied by supplier id 3 for different product type code, rank in desc by the Y please."], "irrelevant_tables": ["Customer_Addresses", "Staff_Department_Assignments"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1138@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY SUM(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY SUM(product_price) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "department_store", "vis_obj": {"chart": "bar", "x_name": "product_type_code", "y_name": "SUM(product_price)", "x_data": [["Hardware", "Clothes"]], "y_data": [[803.74, 1634.73]], "classify": [], "describe": "GROUP BY product_type_code", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the sum of price supplied by supplier id 3 for different product type code in a bar chart, sort in asc by the total number of product price."], "irrelevant_tables": ["Departments", "Department_Store_Chain"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1139@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "department_store", "vis_obj": {"chart": "bar", "x_name": "product_type_code", "y_name": "AVG(product_price)", "x_data": [["Hardware", "Clothes"]], "y_data": [[803.74, 817.365]], "classify": [], "describe": "GROUP BY product_type_code", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the average of price supplied by supplier id 3 for different product type code in a bar chart, and order by the y axis in ascending."], "irrelevant_tables": ["Staff", "Supplier_Addresses"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1142@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 ORDER BY product_price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 ORDER BY product_price ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "department_store", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "product_price", "x_data": [["black jeans", "mouse", "blue jeans"]], "y_data": [[695.16, 803.74, 939.57]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the price of each product supplied by supplier id 3 in a bar chart, and list from low to high by the y axis.", "What is the price of each product supplied by supplier id 3? Return a bar chart, and rank y-axis in asc order."], "irrelevant_tables": ["Addresses", "Staff_Department_Assignments"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "997@x_name@DESC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id ORDER BY date_from DESC", "binning": "BIN date_from BY YEAR"}, "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id ORDER BY date_from DESC BIN date_from BY YEAR"}, "chart": "Line", "hardness": "Hard", "db_id": "customers_and_products_contacts", "vis_obj": {"chart": "line", "x_name": "date_from", "y_name": "COUNT(date_from)", "x_data": [["2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008"]], "y_data": [[1, 2, 2, 1, 1, 4, 4, 1, 2, 2]], "classify": [], "describe": "BIN date_from BY YEAR", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the number of customer address history in each year and bin date from by year interval with a line chart, and list in descending by the x axis."], "irrelevant_tables": ["Contacts", "Products"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2683@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "roller_coaster", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "avg(T2.Speed)", "x_data": [["Austria", "Finland", "Sweden"]], "y_data": [[58.66666666666666, 47.45, 67]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the names of countries and the average speed of roller coasters from each country with a bar chart, sort in asc by the names of countries."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2051@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Date , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID ORDER BY T1.Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Date , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID ORDER BY T1.Date ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "journal_committee", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "Sales", "x_data": [["December 16, 2001", "December 22, 2001", "December 30, 2001", "November 12, 2001", "November 18, 2001", "November 4, 2001", "October 14, 2001", "October 29, 2001", "September 9, 2001"]], "y_data": [[2804, 1934, 3798, 6532, 3421, 1232, 4798, 1763, 798]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the date and the corresponding sales of the journal which did not have any of the listed editors serving on the committee by a bar chart, and rank X-axis in ascending order."], "irrelevant_tables": ["editor"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2052@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Theme , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID ORDER BY T1.Sales ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Theme , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID ORDER BY T1.Sales ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "journal_committee", "vis_obj": {"chart": "bar", "x_name": "Theme", "y_name": "Sales", "x_data": [["Miami Dolphins", "Jacksonville Jaguars", "at Pittsburgh Steelers", "at Oakland Raiders", "Green Bay Packers", "at Cincinnati Bengals", "Cleveland Browns", "Tampa Bay Buccaneers", "Baltimore Ravens"]], "y_data": [[798, 1232, 1763, 1934, 2804, 3421, 3798, 4798, 6532]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Give me a bar chart to show the theme and their sales of the journal which did not have any of the listed editors serving on the committee, and I want to order by the total number in ascending."], "irrelevant_tables": ["editor"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2060@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "journal_committee", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Gra\u017cyna Wolszczak", "W\u0142adys\u0142aw Grzywna", "Maria G\u00f3ralczyk", "Kamila Porczyk"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a bar chart, and I want to list by the Y in desc.", "A bar chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000, and could you rank by the y axis in descending?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2063@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "journal_committee", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(*)", "x_data": [["Kamila Porczyk", "Marek Siudym", "Maria G\u00f3ralczyk", "Piotr Pr\u0119gowski", "W\u0142adys\u0142aw Grzywna", "Gra\u017cyna Wolszczak"]], "y_data": [[1, 1, 1, 1, 1, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the name of each editor and the number of journal committees they are on using a bar chart, show by the total number in ascending please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1380@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "epinions_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "avg(trust)", "x_data": [["Rosie", "Mark", "Terry", "Nancy", "Roxi"]], "y_data": [[4.5, 4.666666666666667, 5, 8, 10]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find each target user's name and average trust score Visualize by bar chart, rank y axis from low to high order."], "irrelevant_tables": ["review", "item"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1382@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "epinions_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "avg(T2.rating)", "x_data": [["Mark", "Helen"]], "y_data": [[7, 7.333333333333332]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For each user, return the name and the average rating of reviews given by them Plot them as bar chart, could you display y-axis in ascending order?"], "irrelevant_tables": ["trust", "item"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1087@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY COUNT(College_Location) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY COUNT(College_Location) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "decoration_competition", "vis_obj": {"chart": "bar", "x_name": "College_Location", "y_name": "COUNT(College_Location)", "x_data": [["McGill", "Western Ontario", "St. Francis Xavier", "Ottawa", "Minnesota"]], "y_data": [[3, 2, 2, 2, 1]], "classify": [], "describe": "GROUP BY College_Location", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Return a bar chart showing how many members have visited for each college location, show from high to low by the y axis."], "irrelevant_tables": ["round"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "38@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "AllergyType", "y_name": "count(*)", "x_data": [["food", "environmental", "animal"]], "y_data": [[28, 23, 8]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["A bar chart about how many students are affected by each allergy type? Could you rank in descending by the allergy type?"], "irrelevant_tables": ["Student"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "49@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "LName", "y_name": "COUNT(LName)", "x_data": [["Adams", "Andreou", "Brody", "Brown", "Cheng", "Davis", "Epp", "Goldman", "Jones", "Nelson", "Prater", "Rugh", "Schmidt", "Simms", "Smith", "Tai", "Thornton", "Wilson", "Pang"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]], "classify": [], "describe": "GROUP BY LName", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["List the last name of the students who do not have any food type allergy and count them in a bart chart, show Y-axis from low to high order.", "What is the last name of each student who is not allergic to any type of food? Count them with a bar chart, sort total number in asc order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "53@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "LName", "y_name": "Age", "x_data": [["Apap", "Lee"]], "y_data": [[18, 17]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What are the last names and ages of the students who are allergic to milk and cat? Plot them as bar chart, I want to display LName in ascending order."], "irrelevant_tables": ["Allergy_Type"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "56@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "Allergy", "y_name": "COUNT(Allergy)", "x_data": [["Anchovies", "Cat", "Dog", "Eggs", "Milk", "Ragweed", "Shellfish", "Tree Pollen", "Grass Pollen"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 1, 2]], "classify": [], "describe": "GROUP BY Allergy", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What is the number of each allergie the girl named Lisa has? Plot them as bar chart, and sort by the total number in asc."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1017@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT address_type_code , COUNT(address_type_code) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ORDER BY COUNT(address_type_code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT address_type_code , COUNT(address_type_code) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ORDER BY COUNT(address_type_code) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_campaigns_ecommerce", "vis_obj": {"chart": "bar", "x_name": "address_type_code", "y_name": "COUNT(address_type_code)", "x_data": [["Shipping", "Billing"]], "y_data": [[7, 8]], "classify": [], "describe": "GROUP BY address_type_code", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show how many customer addresses in each address type code with a bar chart, show y-axis in ascending order."], "irrelevant_tables": ["Mailshot_Customers", "Mailshot_Campaigns"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1019@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "customers_campaigns_ecommerce", "vis_obj": {"chart": "bar", "x_name": "premises_type", "y_name": "COUNT(premises_type)", "x_data": [["Warehouse", "Residence", "Office"]], "y_data": [[6, 3, 6]], "classify": [], "describe": "GROUP BY premises_type", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Give me a bar chart about the number of customer addresses in each premises type, display x-axis in descending order."], "irrelevant_tables": ["Mailshot_Customers", "Products"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "911@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "customer_complaints", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "count(*)", "x_data": [["Chocolate", "The Great Gatsby", "Mouse", "Keyboard"]], "y_data": [[6, 4, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["What are all the different product names, and how many complains has each received Show bar chart, and rank Y-axis in descending order.", "Draw a bar chart for what are all the different product names, and how many complains has each received?, show from high to low by the Y-axis.", "List the name of all products along with the number of complaints that they have received with a bar chart, and show from high to low by the Y-axis."], "irrelevant_tables": ["Staff", "Customers"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "692@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name ORDER BY Name ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "concert_singer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["John Nizinik", "Justin Brown", "Rose White", "Timbaland", "Tribal King"]], "y_data": [[1, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What are the names of the singers who performed in a concert in 2014, and count them by a bar chart, display X-axis in ascending order."], "irrelevant_tables": ["stadium"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "700@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "concert_singer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Tribal King", "Timbaland", "Rose White", "Justin Brown", "John Nizinik"]], "y_data": [[2, 2, 1, 3, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["A bar chart about what are the names of the singers and number of concerts for each person?, and show names in desc order.", "List singer names and number of concerts for each singer with a bar chart, and I want to sort by the Name in desc.", "Give me a histogram for what are the names of the singers and number of concerts for each person?, and list by the Name in descending please."], "irrelevant_tables": ["stadium"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "816@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , SUM(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY SUM(Account_Details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , SUM(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY SUM(Account_Details) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Statement_Details", "y_name": "SUM(Account_Details)", "x_data": [["Private Project", "Open Project"]], "y_data": [[21335, 20316]], "classify": [], "describe": "GROUP BY Statement_Details", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the sum of account details for different statement details in a bar chart, and order in descending by the total number."], "irrelevant_tables": ["Projects", "Documents"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "833@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Budget_Type_Description", "y_name": "COUNT(Budget_Type_Description)", "x_data": [["Government", "Self founded", "Organisation"]], "y_data": [[6, 2, 2]], "classify": [], "describe": "GROUP BY Budget_Type_Description", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of documents for different budget type description in a bar chart, sort by the total number in descending please.", "Return a bar chart to show how many documents for different budget type description, rank in descending by the Y."], "irrelevant_tables": ["Statements", "Ref_Document_Types"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "847@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Document_Date", "y_name": "COUNT(Document_Date)", "x_data": [["Wed", "Fri", "Thur", "Sun", "Sat", "Mon", "Tue"]], "y_data": [[5, 3, 2, 2, 2, 1, 0]], "classify": [], "describe": "BIN Document_Date BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of documents created in each day and bin document date by weekday with a bar chart, list by the y axis in desc.", "How many documents are created in each day? Bin the document date by weekday with a bar chart, and could you list y axis in desc order?"], "irrelevant_tables": ["Ref_Budget_Codes", "Accounts"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "851@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Document_Date", "y_name": "COUNT(Document_Date)", "x_data": [["Wed", "Fri", "Thur", "Sat", "Sun", "Mon", "Tue"]], "y_data": [[3, 1, 1, 1, 2, 1, 0], [1, 0, 0, 0, 0, 0, 0], [1, 2, 1, 1, 0, 0, 0]], "classify": ["excellent", "fun", "good"], "describe": "GROUP BY Document_Type_Description, BIN Document_Date BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many documents are created in each day? Bin the document date by weekday and group by document type description with a stacked bar chart, I want to sort Y in desc order.", "Show the number of documents created in each day and bin document date by weekday and group by document type description with a stacked bar chart, could you rank by the Y-axis in descending please?"], "irrelevant_tables": ["Ref_Budget_Codes", "Projects"], "query_meta": [{"channel_specified": ["classify"], "sort_by": "axis", "stacked_bar": true}, {"channel_specified": ["classify"], "sort_by": "axis", "stacked_bar": true}]}, "853@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) DESC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "cre_Docs_and_Epenses", "vis_obj": {"chart": "bar", "x_name": "Document_Date", "y_name": "COUNT(Document_Date)", "x_data": [["Wed", "Thur", "Sun", "Tue", "Sat", "Mon", "Fri"]], "y_data": [[2, 2, 1, 0, 0, 0, 0]], "classify": [], "describe": "BIN Document_Date BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by weekday with a bar chart, and display by the Y from high to low."], "irrelevant_tables": ["Documents_with_Expenses", "Accounts"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "2454@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "network_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Jordan", "Gabriel", "Tiffany", "Logan", "Kyle", "Kris", "Jessica", "Haley", "Cassandra", "Austin", "Andrew", "Alexis"]], "y_data": [[2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of names of high school students with a bar chart, and sort by the total number in desc."], "irrelevant_tables": ["Likes"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2455@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "network_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "SUM(count(*))", "x_data": [["Alexis", "Andrew", "Austin", "Cassandra", "Gabriel", "Haley", "Jessica", "Jordan", "Kris", "Kyle", "Logan", "Tiffany"]], "y_data": [[2, 3, 1, 1, 3, 1, 1, 3, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["What are the names of the high schoolers and how many friends does each have Visualize by bar chart, list in asc by the name please.", "Draw a bar chart for what are the names of the high schoolers and how many friends does each have?, could you list in ascending by the X-axis?", "A bar chart about what are the names of the high schoolers and how many friends does each have?, and could you list in ascending by the X-axis?"], "irrelevant_tables": ["Likes"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2456@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "network_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Austin", "Cassandra", "Haley", "Jessica", "Kyle", "Logan", "Tiffany", "Alexis", "Kris", "Andrew", "Gabriel", "Jordan"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What are the names of the high schoolers and how many friends does each have Show bar chart, and rank by the Y-axis in asc please.", "Display a bar chart for what are the names of the high schoolers and how many friends does each have?, and order in ascending by the total number.", "Show the names of high school students and their corresponding number of friends Plot them as bar chart, rank in ascending by the y axis.", "Show the names of high school students and their corresponding number of friends in a bar chart, rank in ascending by the y axis.", "A bar chart about what are the names of the high schoolers and how many friends does each have?, show in ascending by the Y."], "irrelevant_tables": ["Likes"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "486@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "climbing", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "Height", "x_data": [["Klaus Enders", "Siegfried Schauzu", "Hans Luthringhauser", "Jean Claude Castella", "Horst Owesle", "Georg Auerbacher", "Arseneus Butscher", "Charlie Freedman", "L Currie", "Mick Horsepole"]], "y_data": [[5895, 5895, 5199, 5199, 5199, 5148, 4985, 4985, 4890, 4890]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the names of climbers and the heights of mountains they climb by a bar chart, and could you show by the Height in desc please?", "Display a bar chart for what are the names of climbers and the corresponding heights of the mountains that they climb?, and show by the Height in descending.", "What are the names of climbers and the corresponding heights of the mountains that they climb Show bar chart, display by the Y-axis from high to low please.", "A bar chart about what are the names of climbers and the corresponding heights of the mountains that they climb?, and I want to show in descending by the y-axis."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2931@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "swimming", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Nou Mestalla", "Yubileyniy Stadium", "Gazprom Arena", "Baku Olympic Stadium"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the names of stadiums that some Australian swimmers have been to, and count them by a bar chart, I want to show by the y-axis from high to low.", "A bar chart for finding the number of the names of stadiums that some Australian swimmers have been to, could you list by the total number from high to low?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "920@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC", "binning": "BIN active_from_date BY YEAR"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "customers_and_addresses", "vis_obj": {"chart": "bar", "x_name": "active_from_date", "y_name": "COUNT(active_from_date)", "x_data": [["2018", "2017"]], "y_data": [[1, 3]], "classify": [], "describe": "BIN active_from_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the number of customers that use email as the contact channel for each year Visualize with a bar chart, and order in ascending by the y axis.", "Return a bar chart showing how many customers whose contact channel code is email for each year, could you sort from low to high by the y-axis?"], "irrelevant_tables": ["Products", "Order_Items"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "921@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC", "binning": "BIN active_from_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY WEEKDAY"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "customers_and_addresses", "vis_obj": {"chart": "bar", "x_name": "active_from_date", "y_name": "COUNT(active_from_date)", "x_data": [["Cash", "Cheque", "Credit Card"]], "y_data": [[1, 2, 1], [1, 0, 1], [2, 4, 2], [0, 1, 0], [0, 2, 0]], "classify": ["Cell", "Fax", "Handheld", "Mobile", "Email"], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the number of customers with different contact channel and pay method in a stacked bar chart, sort in descending by the y-axis please."], "irrelevant_tables": ["Customer_Orders", "Customer_Addresses"], "query_meta": [{"channel_specified": [], "sort_by": "field", "stacked_bar": true}]}, "2985@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.date_of_transaction , COUNT(T2.date_of_transaction) FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10 GROUP BY transaction_type_description ORDER BY COUNT(date_of_transaction) DESC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT T2.date_of_transaction , COUNT(T2.date_of_transaction) FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count GROUP BY transaction_type_description ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "bar", "x_name": "date_of_transaction", "y_name": "COUNT(date_of_transaction)", "x_data": [["Sun", "Sat", "Wed", "Tue", "Thur", "Mon", "Fri"]], "y_data": [[2, 0, 2, 2, 0, 0, 1], [1, 0, 1, 1, 0, 1, 2]], "classify": ["Purchase", "Sale"], "describe": "GROUP BY transaction_type_description, BIN date_of_transaction BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the transaction type descriptions and dates if the share count is recored, group by transaction type, count the date of transaction, and bin the date into the weekday interval, show in a bar chart, I want to display y axis from high to low order."], "irrelevant_tables": ["Lots", "Investors"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "sort_by": "axis", "stacked_bar": true}]}, "3001@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "bar", "x_name": "lot_details", "y_name": "COUNT(lot_details)", "x_data": [["h", "m", "s", "z"]], "y_data": [[1, 2, 1, 1]], "classify": [], "describe": "GROUP BY lot_details", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Return the lot details of lots that belong to investors with details \"l\", and count them by a bar chart, order by the lot_details in ascending.", "A bar chart for returning the number of the lot details of lots that belong to investors with details \"l\"?, display by the X in asc."], "irrelevant_tables": ["Purchases", "Transactions"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "3014@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000  ORDER BY COUNT(date_of_transaction) ASC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "bar", "x_name": "date_of_transaction", "y_name": "COUNT(date_of_transaction)", "x_data": [["Sat", "Thur", "Fri", "Mon", "Tue", "Sun", "Wed"]], "y_data": [[0, 0, 1, 1, 2, 3, 3]], "classify": [], "describe": "BIN date_of_transaction BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the data about the sale details and dates of transactions with amount smaller than 3000? Bin the date of the transaction into a weekday interval and compute the total number of each day with a bar chart, and display Y in ascending order."], "irrelevant_tables": ["Lots", "Purchases"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "3015@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT sales_details , COUNT(sales_details) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000 GROUP BY sales_details ORDER BY sales_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT sales_details , COUNT(sales_details) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000 GROUP BY sales_details ORDER BY sales_details DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "bar", "x_name": "sales_details", "y_name": "COUNT(sales_details)", "x_data": [["y", "t", "s", "p", "o", "n", "f", "e"]], "y_data": [[1, 1, 2, 2, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY sales_details", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, and sort names in descending order."], "irrelevant_tables": ["Purchases", "Lots"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "field"}]}, "3022@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY purchase_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY purchase_details DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "tracking_share_transactions", "vis_obj": {"chart": "bar", "x_name": "purchase_details", "y_name": "COUNT(purchase_details)", "x_data": [["r", "i", "c", "a"]], "y_data": [[1, 1, 1, 2]], "classify": [], "describe": "GROUP BY purchase_details", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["What are the number of the purchase details of transactions with amount bigger than 10000? Plot a bar chart, and I want to list by the X-axis in desc please."], "irrelevant_tables": ["Ref_Transaction_Types", "Lots"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1470@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY COUNT(LName) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY COUNT(LName) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "game_1", "vis_obj": {"chart": "bar", "x_name": "LName", "y_name": "COUNT(LName)", "x_data": [["Jones", "Kim", "Lee", "Simms", "Pang", "Shieber"]], "y_data": [[1, 1, 1, 1, 2, 2]], "classify": [], "describe": "GROUP BY LName", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What are the last names for all scholarship students, and count them by a bar chart, and rank by the y axis from low to high please.", "A bar chart for what are the number of the last names for all scholarship students?, rank y-axis in asc order please.", "Show last names for all student who are on scholarship, and count them by a bar chart, I want to sort total number in ascending order."], "irrelevant_tables": ["Video_Games", "Plays_Games"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "857@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name ORDER BY Store_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name ORDER BY Store_Name DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "bar", "x_name": "Store_Name", "y_name": "COUNT(Store_Name)", "x_data": [["Warino Photo", "Queen Art", "Kling Workshop", "Bednar Film"]], "y_data": [[2, 1, 1, 1]], "classify": [], "describe": "GROUP BY Store_Name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["A bar chart for what are the number of the names of the workshop groups that have bookings with status code \"stop\"?, display x-axis in descending order.", "What are the names of the workshop groups that have bookings with status code \"stop\", and count them by a bar chart, sort Store_Name in desc order.", "Which workshop groups have bookings with status code \"stop\"? Give me the names, and count them by a bar chart, and show in descending by the x axis please."], "irrelevant_tables": ["Addresses", "Marketing_Regions"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "882@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town DESC", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "bar", "x_name": "City_Town", "y_name": "count(*)", "x_data": [["West Sherwoodstad", "South Eugenia", "Rueckermouth", "Purdyville", "Port Maximeview", "New Lonzoville", "Nataliamouth", "Monahanshire", "Macejkovicchester", "Jasthaven", "Feliciaberg", "Chrisside"]], "y_data": [[1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many drama workshop groups are there in each city? Return both the city and the count with a bar chart, and I want to rank by the City_Town in descending.", "Show all cities along with the number of drama workshop groups in each city Visualize by bar chart, could you order by the x axis in descending?", "Give me a histogram for how many drama workshop groups are there in each city? Return both the city and the count, could you order by the x axis in descending?"], "irrelevant_tables": ["Ref_Service_Types", "Bookings_Services"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "884@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY Service_Type_Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY Service_Type_Description DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "cre_Drama_Workshop_Groups", "vis_obj": {"chart": "bar", "x_name": "Service_Type_Description", "y_name": "COUNT(Service_Type_Description)", "x_data": [["provide photo service", "provide filming service", "provide dinning service", "provide adv promoting service"]], "y_data": [[5, 3, 5, 2]], "classify": [], "describe": "GROUP BY Service_Type_Description", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["What are the descriptions of the service types with product price above 100, and count them by a bar chart, and I want to order in desc by the names.", "A bar chart for what are the number of the descriptions of the service types with product price above 100?, and order by the x axis in descending."], "irrelevant_tables": ["Performers_in_Bookings", "Invoice_Items"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "1302@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "County_name", "y_name": "COUNT(County_name)", "x_data": [["Baltimore County", "Colony", "Howard", "Mansfield"]], "y_data": [[2, 2, 3, 1]], "classify": [], "describe": "GROUP BY County_name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show how many delegates in each county with a bar chart, order in asc by the x axis."], "irrelevant_tables": ["party"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1307@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "Party", "y_name": "SUM(COUNT(*))", "x_data": [["Democratic", "Liberal", "Working Families", "Independence"]], "y_data": [[4, 2, 1, 1]], "classify": [], "describe": "GROUP BY Party", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["For each party, return the name of the party and the number of delegates from that party Plot them as bar chart, and show total number in desc order.", "Show the name of each party and the corresponding number of delegates from that party Plot them as bar chart, sort by the y-axis in descending.", "Show the name of each party and the corresponding number of delegates from that party with a bar chart, and list by the total number in desc."], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1311@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "Party", "y_name": "COUNT(Party)", "x_data": [["Independence", "Working Families", "Liberal", "Democratic"]], "y_data": [[1, 1, 2, 4]], "classify": [], "describe": "GROUP BY Party", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show how many delegates in each party with a bar chart, and sort in ascending by the Y-axis."], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1315@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "County_name", "y_name": "COUNT(*)", "x_data": [["Mansfield", "Baltimore County", "Colony", "Howard"]], "y_data": [[1, 2, 2, 3]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the name of each county along with the corresponding number of delegates from that county with a bar chart, and order by the the total number in ascending."], "irrelevant_tables": ["party"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1322@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY Comptroller ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY Comptroller ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "election", "vis_obj": {"chart": "bar", "x_name": "Comptroller", "y_name": "COUNT(Comptroller)", "x_data": [["Alan Hevesi", "Carl McCall", "John Faso"]], "y_data": [[1, 3, 1]], "classify": [], "describe": "GROUP BY Comptroller", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Who were the comptrollers of the parties associated with the delegates from district 1 or district 2, and count them by a bar chart, and display in ascending by the X-axis.", "Find the parties associated with the delegates from district 1 or 2 Who served as comptrollers of the parties, and count them by a bar chart, and rank in asc by the x axis."], "irrelevant_tables": ["county"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2143@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "local_govt_in_alabama", "vis_obj": {"chart": "bar", "x_name": "Participant_Type_Code", "y_name": "SUM(count(*))", "x_data": [["Participant", "Organizer"]], "y_data": [[12, 6]], "classify": [], "describe": "GROUP BY Participant_Type_Code", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many events have each participants attended? Show their total number by each participant type code using a bar chart, and sort y-axis in desc order."], "irrelevant_tables": ["Services"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2823@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "sports_competition", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["AIB", "ASC", "BK Slide", "HGS2", "IFG"]], "y_data": [[2, 4, 6, 2, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["For the names and the players of clubs, count the names by names in a bar chart, and order in ascending by the x-axis."], "irrelevant_tables": ["club_rank", "competition_result"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "3266@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC"}, "chart": "Bar", "hardness": "Medium", "db_id": "workshop_paper", "vis_obj": {"chart": "bar", "x_name": "Author", "y_name": "COUNT(DISTINCT T1.workshop_id)", "x_data": [["Steve Raible", "Steve Niehaus", "Sherman Smith", "Sammy Green", "Jeff Lloyd"]], "y_data": [[1, 1, 1, 2, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show each author and the number of workshops they submitted to Show bar chart, and I want to order x-axis in descending order.", "How many workshops did each author submit to? Return the author name and the number of workshops in a bar chart, could you order names in desc order?", "Visualize a bar chart for how many workshops did each author submit to? Return the author name and the number of workshops, and could you order names in desc order?", "Show each author and the number of workshops they submitted to with a bar chart, and could you rank by the X-axis in desc?", "Give me a histogram for how many workshops did each author submit to? Return the author name and the number of workshops, and could you rank by the X-axis in desc?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "2626@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "protein_institute", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["100 North Tampa", "Floridan Hotel", "Park Tower", "Citizens Bank Building", "Franklin Exchange Building", "One Tampa City Center", "Tampa City Hall"]], "y_data": [[1, 1, 1, 2, 2, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For each building, show the name of the building and the number of institutions in it Plot them as bar chart, rank by the the total number in asc please."], "irrelevant_tables": ["protein"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "26@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "activity_1", "vis_obj": {"chart": "bar", "x_name": "Fname", "y_name": "count(*)", "x_data": [["Ellie", "Leslie", "Robert", "Alan", "Cheng", "Joanne", "Lawrence", "Louis", "Luigi", "Russell", "Steven", "Daniel", "David", "Mark", "Michael", "Scott", "Stacey", "Yair"]], "y_data": [[1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What is the first name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in with a bar chart, list by the Y in asc.", "A bar chart showing the first name of all the faculty members who participated in some activity, together with the number of activities they participated in, display y-axis from low to high order."], "irrelevant_tables": ["Activity", "Student"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "30@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "activity_1", "vis_obj": {"chart": "bar", "x_name": "activity_name", "y_name": "count(*)", "x_data": [["Baseball", "Kayaking", "Soccer", "Spelunking", "Square Dancing", "Volleyball", "Canasta", "Extreme Canasta", "Football", "Canoeing", "Chess", "Mountain Climbing", "Crossword Puzzles"]], "y_data": [[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many faculty members participate in each activity? Return the activity names and the number of faculty members by a bar chart, and display Y-axis in asc order.", "Show all the activity names and the number of faculty involved in each activity Show bar chart, and could you order in ascending by the the total number ?", "Display a bar chart for how many faculty members participate in each activity? Return the activity names and the number of faculty members, and rank in ascending by the y axis please.", "Show all the activity names and the number of faculty involved in each activity in a bar chart, and could you rank total number from low to high order?", "How many faculty members participate in each activity? Return the activity names and the number of faculty members Show bar chart, and could you order in ascending by the the total number ?"], "irrelevant_tables": ["Student"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2575@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "phone_market", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "sum(T1.Num_of_stock)", "x_data": [["IPhone 7", "IPhone X", "IPhone 5s", "IPhone 6s"]], "y_data": [[874, 2540, 2914, 4324]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["For each phone, show its names and total number of stocks Visualize by bar chart, rank by the Y-axis in ascending please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2581@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "phone_market", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["IPhone X", "IPhone 5s", "IPhone 7", "IPhone 6s"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Compare the number of market each phone is sold in by a bar chart, and could you show the number of market in descending order?", "I want to compare the number of the names of phones by a bar chart, could you rank by the the number of market in desc?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "2582@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District ORDER BY COUNT(District) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District ORDER BY COUNT(District) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "phone_market", "vis_obj": {"chart": "bar", "x_name": "District", "y_name": "COUNT(District)", "x_data": [["British Columbia", "Alberta", "Quebec", "Ontario"]], "y_data": [[2, 2, 1, 1]], "classify": [], "describe": "GROUP BY District", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Give me a bar chart to visualize the number of the districts of markets they are on, and list by the total number from high to low."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1375@x_name@ASC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC BIN Date_of_Birth BY YEAR"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "entrepreneur", "vis_obj": {"chart": "line", "x_name": "Date_of_Birth", "y_name": "COUNT(Date_of_Birth)", "x_data": [[1972, 1975, 1977, 1981]], "y_data": [[2, 1, 1, 2]], "classify": [], "describe": "BIN Date_of_Birth BY YEAR", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Line graphs showing trends of year of birth of entrepreneurs, could you list x axis in ascending order please?", "A line chart for returning the number of the dates(bin by year) of birth for entrepreneurs, sort X in ascending order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "66@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2017", "2016"]], "y_data": [[3, 6]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each year with a bar chart, and list by the y axis in asc.", "What are the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each year? Draw a bar chart, I want to rank in asc by the y axis."], "irrelevant_tables": ["View_Unit_Status", "Apartment_Buildings"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "67@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Sun", "Fri", "Thur", "Wed", "Mon", "Sat", "Tue"]], "y_data": [[0, 1, 1, 1, 2, 2, 2]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Use a bar chart to show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each weekday, display Y from low to high order.", "A bar chart showing the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each weekday, and could you show total number in asc order?"], "irrelevant_tables": ["Apartment_Buildings", "Apartments"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "70@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2017", "2016"]], "y_data": [[6, 9]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What is the number of booking start dates of the apartments with more than 2 bedrooms for each year? Return a bar chart, and order Y in ascending order.", "Find the number of booking start date for the apartments that have more than two bedrooms for each year with a bar chart, could you show in ascending by the total number please?"], "irrelevant_tables": ["Apartment_Buildings", "Guests"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "71@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Sun", "Thur", "Wed", "Fri", "Tue", "Mon", "Sat"]], "y_data": [[1, 1, 1, 2, 2, 4, 4]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the number of booking start date for the apartments that have more than two bedrooms for each weekday with a bar chart, and order total number in asc order.", "What is the number of booking start dates of the apartments with more than 2 bedrooms for each weekday? Show me a bar chart, and display by the total number in ascending please."], "irrelevant_tables": ["Apartment_Buildings", "Apartment_Facilities"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "75@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2017", "2016"]], "y_data": [[1, 6]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["What is the number of booking start dates of the apartments with type code \"Duplex\" in each year? Return a bar chart, show y axis in ascending order.", "Return the number of booking start date for the apartments that have type code \"Duplex\" for each year in a bar chart, and could you rank y axis in asc order?"], "irrelevant_tables": ["View_Unit_Status", "Apartment_Buildings"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "76@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2016", "2017"]], "y_data": [[6, 1]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Return the number of booking end dates for the apartments that have type code \"Duplex\" for each year in a bar chart, and sort in descending by the the number of booking start date please."], "irrelevant_tables": ["Guests", "Apartment_Buildings"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "82@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "facility_code", "y_name": "COUNT(facility_code)", "x_data": [["Cable TV", "Gym"]], "y_data": [[1, 2]], "classify": [], "describe": "GROUP BY facility_code", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["A bar chart for showing the number of the facility codes of apartments with more than 4 bedrooms, and I want to display in ascending by the facility_code.", "What are the facility codes of the apartments with more than four bedrooms, and count them by a bar chart, and I want to display in ascending by the facility_code."], "irrelevant_tables": ["Apartment_Buildings", "Guests"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "88@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2017", "2016"]], "y_data": [[6, 9]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many apartment bookings for each year? Draw a bar chart binning booking start date by year interval, sort by the Y-axis in ascending.", "How many apartment bookings for each year? Draw a bar chart binning booking start date by year interval, and list from low to high by the y axis.", "Show the number of apartment bookings for each year and bin booking start date by year interval in a bar chart, list from low to high by the y axis."], "irrelevant_tables": ["Apartments", "Apartment_Facilities"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "89@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2017", "2016"]], "y_data": [[6, 9]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the number of apartment bookings for each year and bin booking start date by year interval in a bar chart, and show y-axis from low to high order.", "How many apartment bookings for each year? Draw a bar chart binning booking start date by year interval, and list in ascending by the Y please."], "irrelevant_tables": ["Apartment_Buildings", "Apartment_Facilities"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "90@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Sat", "Mon", "Tue", "Fri", "Wed", "Thur", "Sun"]], "y_data": [[4, 4, 2, 2, 1, 1, 1]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of apartment bookings for each weekday and bin booking start date by weekday interval in a bar chart, and sort y axis in desc order.", "How many apartment bookings for each weekday? Draw a bar chart binning booking start date by weekday interval, and rank by the y-axis from high to low please."], "irrelevant_tables": ["Apartment_Facilities", "Apartments"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "91@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Sun", "Thur", "Wed", "Fri", "Tue", "Mon", "Sat"]], "y_data": [[1, 1, 1, 2, 2, 4, 4]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Show the number of apartment bookings for each weekday and bin booking start date by weekday interval in a bar chart, and rank in ascending by the Y-axis please.", "How many apartment bookings for each weekday? Draw a bar chart binning booking start date by weekday interval, rank in ascending by the y axis."], "irrelevant_tables": ["Apartments", "Apartment_Facilities"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "92@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT guest_first_name , COUNT(guest_first_name) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id GROUP BY guest_first_name ORDER BY COUNT(guest_first_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT guest_first_name , COUNT(guest_first_name) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id GROUP BY guest_first_name ORDER BY COUNT(guest_first_name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "guest_first_name", "y_name": "COUNT(guest_first_name)", "x_data": [["Else", "Gabe", "Juvenal", "Keith", "Louvenia", "Mozell", "Tamia", "Keon", "Lou", "Rebeca"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 2, 4]], "classify": [], "describe": "GROUP BY guest_first_name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many bookings for different guests? Show me a bar chart grouping by guest first name, display by the the number of guest first name in ascending.", "Show the number of bookings for different guests and group by guest first name in a bar chart, rank by the total number from low to high."], "irrelevant_tables": ["Apartment_Facilities", "View_Unit_Status"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "99@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["2016", "2017"]], "y_data": [[9, 6]], "classify": [], "describe": "BIN booking_start_date BY YEAR", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of start dates of all the apartment bookings for each year with a bar chart, display y-axis from high to low order.", "What is the number of start date of each apartment booking for each year? Return a bar chart, and I want to list by the y axis in desc please."], "irrelevant_tables": ["Apartment_Buildings", "Guests"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "100@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "booking_start_date", "y_name": "COUNT(booking_start_date)", "x_data": [["Sat", "Mon", "Tue", "Fri", "Wed", "Thur", "Sun"]], "y_data": [[4, 4, 2, 2, 1, 1, 1]], "classify": [], "describe": "BIN booking_start_date BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["What is the number of start date of each apartment booking for each weekday? Return a bar chart, and show by the y-axis in descending please.", "Show the number of start dates of all the apartment bookings for each weekday with a bar chart, show in descending by the total number please."], "irrelevant_tables": ["Apartment_Facilities", "Apartment_Buildings"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "102@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "apt_number", "y_name": "COUNT(apt_number)", "x_data": [["Apt. 187", "Apt. 477", "Apt. 585", "Apt. 794", "Apt. 940", "Suite 088", "Suite 634", "Suite 749", "Apt. 859", "Suite 693"]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 3, 3]], "classify": [], "describe": "GROUP BY apt_number", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Return a bar chart about the number bookings for each apartment number, I want to list y axis in ascending order.", "How many bookings for each apartment number? Plot a bar chart, display y axis in asc order."], "irrelevant_tables": ["View_Unit_Status", "Guests"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "104@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code ORDER BY COUNT(apt_type_code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code ORDER BY COUNT(apt_type_code) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "apartment_rentals", "vis_obj": {"chart": "bar", "x_name": "apt_type_code", "y_name": "COUNT(apt_type_code)", "x_data": [["Flat", "Studio", "Duplex"]], "y_data": [[1, 1, 2]], "classify": [], "describe": "GROUP BY apt_type_code", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many buildings are managed by \"Kyle\"? Return a bar chart grouping by apartment type codes, list y-axis in asc order.", "Give me a bar chart showing the number of buildings managed by \"Kyle\" and group by apartment type codes, and could you rank from low to high by the total number?"], "irrelevant_tables": ["View_Unit_Status", "Apartment_Facilities"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "1521@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "gymnast", "vis_obj": {"chart": "bar", "x_name": "Hometown", "y_name": "COUNT(*)", "x_data": [["Bonao", "Los Alcarrizos", "Santiago de los Caballeros", "Santo Domingo"]], "y_data": [[1, 1, 1, 4]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Return a bar chart on how many gymnasts are from each hometown?, and rank by the Y from low to high.", "How many gymnasts are from each hometown Plot them as bar chart, rank in asc by the total number please.", "Show me a bar chart for how many gymnasts are from each hometown?, and I want to show from low to high by the total number.", "Draw a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, and rank by the Y from low to high.", "Display a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, and rank y-axis in ascending order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1329@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "employee_hire_evaluation", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["FC Haka", "HJK", "FF Jaro", "FC Lahti", "FC KooTeePee", "FC Inter"]], "y_data": [[2, 1, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the number of employees hired in each shop; show the shop name as well Plot them as bar chart, show Y in descending order.", "For each shop, return the number of employees working there and the name of the shop Plot them as bar chart, list the total number in desc order."], "irrelevant_tables": ["evaluation", "employee"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "522@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Peter", "Gerald", "Ismael", "Carlos", "Arnelle", "Robert"]], "y_data": [[0, 0, 0, 0, 2, 1], [0, 0, 2, 0, 0, 0], [0, 1, 0, 2, 0, 0], [1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0]], "classify": ["ACCT-211", "ACCT-212", "CIS-220", "CIS-420", "QM-261", "QM-362"], "describe": "GROUP BY CRS_CODE, GROUP BY EMP_FNAME", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many courses each teacher taught? Show me a stacked bar chart The x-axis is the instructor's first name and group by course code, could you sort the number of emp fname in descending order please?"], "irrelevant_tables": ["STUDENT", "ENROLL"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "sort_by": "field", "stacked_bar": true}]}, "523@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Arnelle", "Carlos", "Gerald", "Ismael", "Peter", "Robert"]], "y_data": [[2, 2, 3, 2, 3, 1]], "classify": [], "describe": "GROUP BY EMP_FNAME", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["How many courses each teacher taught? Show me a bar chart grouping by instructor's first name, and rank by the names in ascending."], "irrelevant_tables": ["COURSE", "DEPARTMENT"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "544@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "PROF_OFFICE", "y_name": "COUNT(PROF_OFFICE)", "x_data": [["KLR 409B", "KLR 333", "KLR 300", "KLR 284", "KLR 244", "KLR 229D", "KLR 211", "KLR 203E", "KLR 126", "DRE 208", "DRE 156", "DRE 102", "BBG 208", "BBG 185", "AAK 297", "AAK 230", "AAK 201", "AAK 194", "AAK 160"]], "y_data": [[1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY PROF_OFFICE", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Find the number of professors in each office with a bar chart, could you display in descending by office?"], "irrelevant_tables": ["CLASS", "STUDENT"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "545@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Willa", "Van", "Ross", "Ronald", "Robert", "Ralph", "Preston", "Peter", "Melanie", "James", "Ismael", "Hermine", "Herman", "Gerald", "George", "Doreen", "Carlos", "Arnelle", "Annelise", "Anne"]], "y_data": [[1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY EMP_FNAME", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many professors for each first name? Show me a bar chart, could you sort by the names in desc please?"], "irrelevant_tables": ["CLASS", "DEPARTMENT"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "548@x_name@ASC": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT EMP_DOB , T2.EMP_NUM, COUNT(EMP_DOB) FROM employee AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM group by T2.EMP_NUM ORDER BY EMP_DOB ASC", "binning": "BIN EMP_DOB BY YEAR"}, "VQL": "Visualize LINE SELECT EMP_DOB , T2.EMP_NUM, COUNT(EMP_DOB) FROM employee AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM group by T2.EMP_NUM ORDER BY EMP_DOB ASC"}, "chart": "Line", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "line", "x_name": "EMP_DOB", "y_name": "COUNT(EMP_DOB)", "x_data": [[1937, 1939, 1940, 1941, 1944, 1945, 1946, 1948, 1949, 1950, 1951, 1952, 1953, 1955, 1957, 1960, 1963, 1973]], "y_data": [[1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1]], "classify": [], "describe": "BIN EMP_DOB BY YEAR", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show birthdates of the professors and bin the date by year interval in a line chart, display X-axis in asc order.", "What is the date of birth of professors teaching course ACCT-211? Bin the date by year interval in a line chart, and sort by the year in asc please."], "irrelevant_tables": ["PROFESSOR", "DEPARTMENT"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "field"}]}, "550@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC", "binning": "BIN EMP_HIREDATE BY MONTH"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY MONTH"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_HIREDATE", "y_name": "COUNT(EMP_HIREDATE)", "x_data": [["May", "Aug", "June", "July"]], "y_data": [[1, 1, 0, 0]], "classify": [], "describe": "BIN EMP_HIREDATE BY MONTH", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Show the number of professors who is in office DRE 102 hired in each month with a bar chart, show y-axis in desc order.", "How many professors whose office is located in DRE 102 are hired in each month? Return a bar chart, and show y-axis in desc order."], "irrelevant_tables": ["DEPARTMENT", "CLASS"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "552@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC", "binning": "BIN EMP_HIREDATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_HIREDATE", "y_name": "COUNT(EMP_HIREDATE)", "x_data": [["Mon", "Sun", "Thur", "Tue", "Wed", "Fri", "Sat"]], "y_data": [[0, 0, 0, 0, 0, 1, 1]], "classify": [], "describe": "BIN EMP_HIREDATE BY WEEKDAY", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many professors whose office is located in DRE 102 are hired in each weekday? Return a bar chart, and could you sort in ascending by the Y-axis?", "Show the number of professors who is in office DRE 102 hired in each weekday with a bar chart, and I want to list from low to high by the Y."], "irrelevant_tables": ["CLASS", "COURSE"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "555@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "DEPT_CODE", "y_name": "count(*)", "x_data": [["CIS", "ACCT"]], "y_data": [[8, 5]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many classes are held in each department Visualize by bar chart, and list by the total number from high to low.", "Find the number of classes in each department Visualize by bar chart, and I want to rank Y-axis in desc order.", "A bar chart about how many classes are held in each department?, could you sort in desc by the Y?", "Return a bar chart on how many classes are held in each department?, and I want to sort in desc by the Y-axis."], "irrelevant_tables": ["STUDENT", "EMPLOYEE"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "558@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "EMP_FNAME", "y_name": "COUNT(EMP_FNAME)", "x_data": [["Arnelle", "Carlos", "Gerald", "Ismael", "Peter", "Robert"]], "y_data": [[2, 0, 0, 0, 0, 1], [0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 1, 0], [0, 2, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0]], "classify": ["Accounting I", "Accounting II", "Database Design and Implementation", "Intro. to Microcomputing", "Intro. to Statistics", "Statistical Applications"], "describe": "GROUP BY CRS_DESCRIPTION, GROUP BY EMP_FNAME", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the number of courses for each instructor in a stacked bar chart The x-axis is instructor's first name and group by course description, and I want to display in asc by the x-axis.", "How many courses for each teacher? Show me a stacked bar chart The x-axis is teacher's first name and group by course description, and display by the X in ascending."], "irrelevant_tables": ["ENROLL", "DEPARTMENT"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "sort_by": "axis", "stacked_bar": true}, {"channel_specified": ["x", "y", "classify"], "sort_by": "axis", "stacked_bar": true}]}, "576@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "STU_FNAME", "y_name": "COUNT(STU_FNAME)", "x_data": [["William", "Anne"]], "y_data": [[3, 1]], "classify": [], "describe": "GROUP BY STU_FNAME", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many students taking a course who received an A or C? Group by students' first name with a bar chart, and display in desc by the total number.", "Find the number of students who took some course and got A or C and group by first name in a bar chart, rank by the Y-axis in desc."], "irrelevant_tables": ["CLASS", "PROFESSOR"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "578@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "college_1", "vis_obj": {"chart": "bar", "x_name": "STU_LNAME", "y_name": "COUNT(STU_LNAME)", "x_data": [["Smithson", "Bowser"]], "y_data": [[1, 3]], "classify": [], "describe": "GROUP BY STU_LNAME", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the number of students who took some course and got A or C and group by last name in a bar chart, show by the y-axis from low to high.", "How many students taking a course who received an A or C? Group by students' last name with a bar chart, display in ascending by the the number of stu lname."], "irrelevant_tables": ["CLASS", "EMPLOYEE"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2156@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cmi_details , COUNT(cmi_details) FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax' GROUP BY cmi_details ORDER BY COUNT(cmi_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cmi_details , COUNT(cmi_details) FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax' GROUP BY cmi_details ORDER BY COUNT(cmi_details) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "local_govt_mdm", "vis_obj": {"chart": "bar", "x_name": "cmi_details", "y_name": "COUNT(cmi_details)", "x_data": [["Volkman, Mills and Ferry", "Schmitt-Lang", "Schmidt, Kertzmann and Lubowitz", "Reynolds-McClure"]], "y_data": [[3, 1, 1, 1]], "classify": [], "describe": "GROUP BY cmi_details", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["what are the details of the cmi masters that have the cross reference code 'Tax', and count them by a bar chart, and rank by the y-axis in desc."], "irrelevant_tables": ["Benefits_Overpayments", "Electoral_Register"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "686@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.name , COUNT(T3.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T3.name ORDER BY COUNT(T3.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T3.name ORDER BY COUNT(T3.name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "company_office", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Petrobras", "HSBC", "General Electric", "ExxonMobil", "BNP Paribas", "Total", "Royal Dutch Shell", "JPMorgan Chase", "Industrial and Commercial Bank of China", "Citigroup"]], "y_data": [[3, 2, 2, 2, 2, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Return a bar chart showing the number of each company whose office is located in the building, and sort total number from high to low order.", "List the number of each company whose office is in the building in a bar chart, and sort by the how many name in desc."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "field"}]}, "687@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "company_office", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "COUNT(name)", "x_data": [["Punto Chapultepec", "Torre Mitikah", "Corporativo BBVA Bancomer", "Torre Reforma", "Torre New York Life", "Torre KOI", "Residencial Vidalta Torre Altaire 3", "Residencial Vidalta Torre Altaire 2", "Reforma 90", "Reforma 432", "LIU East"]], "y_data": [[4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]], "classify": [], "describe": "GROUP BY name", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Return a bar chart showing the number of companies in each building, show in descending by the y-axis please."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1217@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "dorm_1", "vis_obj": {"chart": "bar", "x_name": "Fname", "y_name": "COUNT(Fname)", "x_data": [["Tracy", "Stacy", "Shiela", "Sarah", "Michael"]], "y_data": [[1, 1, 1, 2, 1]], "classify": [], "describe": "GROUP BY Fname", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Find the first name of students who are living in the Smith Hall, and count them by a bar chart, I want to display by the X in descending.", "What are the first names of all students in Smith Hall, and count them by a bar chart, order by the X-axis in descending."], "irrelevant_tables": ["Dorm_amenity", "Has_amenity"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1222@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "dorm_1", "vis_obj": {"chart": "bar", "x_name": "dorm_name", "y_name": "avg(T1.age)", "x_data": [["Smith Hall", "Bud Jones Hall", "Fawlty Towers", "Anonymous Donor Hall", "Dorm-plex 2000", "University Hovels", "Grad Student Asylum"]], "y_data": [[20.166666666666668, 20, 19.777777777777782, 19.666666666666668, 19.6, 18, 18]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the average age of students living in each dorm and the name of dorm Plot them as bar chart, I want to show by the y axis in descending.", "What is the average age for each dorm and what are the names of each dorm Plot them as bar chart, and I want to display by the y axis in descending.", "Visualize a bar chart for what is the average age for each dorm and what are the names of each dorm?, and could you show Y-axis from high to low order please?"], "irrelevant_tables": ["Dorm_amenity", "Has_amenity"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "1224@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "dorm_1", "vis_obj": {"chart": "bar", "x_name": "dorm_name", "y_name": "count(*)", "x_data": [["Smith Hall", "Fawlty Towers", "Dorm-plex 2000", "Anonymous Donor Hall"]], "y_data": [[2, 2, 2, 1]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Find the number of students who is older than 20 in each dorm Plot them as bar chart, show from high to low by the total number.", "How many students are older than 20 in each dorm Visualize by bar chart, and could you display by the y axis in descending please?", "Return a bar chart on how many students are older than 20 in each dorm?, and I want to display by the y-axis from high to low.", "Give me a histogram for how many students are older than 20 in each dorm?, and could you display by the y axis in descending please?"], "irrelevant_tables": ["Dorm_amenity", "Has_amenity"], "query_meta": [{"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "1227@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname ORDER BY Fname DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "dorm_1", "vis_obj": {"chart": "bar", "x_name": "Fname", "y_name": "COUNT(Fname)", "x_data": [["Susan", "Steven", "Paul", "Michael", "Mark", "Lisa", "Linda", "Jun", "Jandy", "Ian", "George", "Eric", "Dinesh", "Derek", "David", "Bruce"]], "y_data": [[1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1]], "classify": [], "describe": "GROUP BY Fname", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show the number of students who are living in a dorm with a TV Lounge and group by first name in a bar chart, and show in desc by the names."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2614@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "products_for_hire", "vis_obj": {"chart": "bar", "x_name": "first_name", "y_name": "count(*)", "x_data": [["Rosalee", "Maximilian", "Marilou", "Layne", "Jamir", "German", "Elinore"]], "y_data": [[4, 1, 3, 2, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart, and show by the x axis in desc."], "irrelevant_tables": ["Payments", "Discount_Coupons"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2771@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "singer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "sum(T2.Sales)", "x_data": [["Christy Walton", "Gina Rinehart", "Iris Fontbona", "Jacqueline Mars", "Liliane Bettencourt", "Susanne Klatten"]], "y_data": [[651421, 292000, 335000, 275000, 1646407, 261000]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Show the names of singers and the total sales of their songs Visualize by bar chart, and order in ascending by the Name."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "2772@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY COUNT(Name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "singer", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "COUNT(Name)", "x_data": [["Gina Rinehart", "Iris Fontbona", "Jacqueline Mars", "Susanne Klatten", "Christy Walton", "Liliane Bettencourt"]], "y_data": [[1, 1, 1, 1, 2, 2]], "classify": [], "describe": "GROUP BY Name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Compare the number of songs each singer has using a bar chart, list Y in ascending order."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2596@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name ORDER BY attribute_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name ORDER BY attribute_name ASC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "product_catalog", "vis_obj": {"chart": "bar", "x_name": "attribute_name", "y_name": "COUNT(attribute_name)", "x_data": [["Black", "Sweet", "Yellow"]], "y_data": [[3, 3, 2]], "classify": [], "describe": "GROUP BY attribute_name", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Compute how many attributes in each name of the attribute definitions with attribute value 0 Show the result with a bar chart, sort in ascending by the x axis."], "irrelevant_tables": ["Catalog_Structure", "Catalogs"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2600@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_publication , COUNT(date_of_publication) FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5 GROUP BY catalog_name ORDER BY COUNT(date_of_publication) ASC", "binning": "BIN date_of_publication BY YEAR"}, "VQL": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5 GROUP BY catalog_name ORDER BY COUNT(date_of_publication) ASC BIN date_of_publication BY YEAR"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "product_catalog", "vis_obj": {"chart": "bar", "x_name": "date_of_publication", "y_name": "COUNT(date_of_publication)", "x_data": [["2012", "2011"]], "y_data": [[1, 0], [0, 1]], "classify": ["Coffee Bean", "Jam"], "describe": "GROUP BY catalog_name, BIN date_of_publication BY YEAR", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Find the names and publication dates of all catalogs that have catalog level number greater than 5. Bin publication dates into Year interval, and count catalog and group by catalog name, order the number of date of publication from low to high order, and show in a stacked bar chart."], "irrelevant_tables": ["Catalog_Contents", "Attribute_Definitions"], "query_meta": [{"channel_specified": ["classify"], "sort_by": "field", "stacked_bar": false}]}, "2933@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY Name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "theme_gallery", "vis_obj": {"chart": "bar", "x_name": "Name", "y_name": "count(*)", "x_data": [["Vijay Singh", "Paul Azinger", "Nick Price", "John Daly", "Jeff Sluman"]], "y_data": [[2, 1, 1, 1, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["Show all artist names and the number of exhibitions for each artist in a bar chart, and list x axis in desc order."], "irrelevant_tables": ["exhibition_record"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "2935@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "theme_gallery", "vis_obj": {"chart": "bar", "x_name": "Date", "y_name": "Attendance", "x_data": [["December 2", "December 5", "December 7"]], "y_data": [[965, 1098, 2983]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart, and rank in ascending by the X-axis."], "irrelevant_tables": ["artist"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "1989@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) DESC", "binning": "BIN Date_Opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) DESC BIN Date_Opened BY WEEKDAY"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "insurance_fnol", "vis_obj": {"chart": "bar", "x_name": "Date_Opened", "y_name": "COUNT(Date_Opened)", "x_data": [["Mon", "Fri", "Wed", "Tue", "Thur", "Sun", "Sat"]], "y_data": [[1, 1, 0, 0, 0, 0, 0]], "classify": [], "describe": "BIN Date_Opened BY WEEKDAY", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Retrieve the open dates of all the policies associated with the customer whose name contains \"Diana\", bin the open dates into the day of week interval and count them for a bar chart, list total number from high to low order."], "irrelevant_tables": ["Services", "Settlements"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "1981@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) DESC"}, "chart": "Bar", "hardness": "Extra Hard", "db_id": "inn_1", "vis_obj": {"chart": "bar", "x_name": "roomName", "y_name": "COUNT(roomName)", "x_data": [["Harbinger but bequest", "Frugal not apropos", "Thrift and accolade", "Convoke and sanguine"]], "y_data": [[3, 2, 1, 1]], "classify": [], "describe": "GROUP BY roomName", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["A bar chart for what are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?, list by the Y-axis in descending.", "A bar chart for finding the number of the name of rooms booked by some customers whose first name contains ROY, and rank from high to low by the y-axis.", "What are the name of rooms booked by customers whose first name has \"ROY\" in part, and count them by a bar chart, I want to show total number from high to low order.", "Find the name of rooms booked by some customers whose first name contains ROY, and count them by a bar chart, list by the Y-axis in descending."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}, {"channel_specified": [], "sort_by": "axis"}]}, "1984@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "inn_1", "vis_obj": {"chart": "bar", "x_name": "roomName", "y_name": "count(*)", "x_data": [["Convoke and sanguine", "Frugal not apropos", "Immutable before decorum", "Recluse and defiance", "Harbinger but bequest", "Thrift and accolade", "Interim but salutary", "Mendicant with cryptic", "Riddle to exculpate", "Abscond or bolster"]], "y_data": [[69, 66, 63, 62, 60, 59, 59, 56, 55, 51]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["Return the name of rooms and the number of reservations made for each of the rooms to draw a bar chart, list by the y axis in descending please.", "For each room, find its name and the number of times reservations were made for it, you can use the data to draw a bar chart, could you display by the the total number in desc please?"], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "field"}]}, "2886@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "student_assessment", "vis_obj": {"chart": "bar", "x_name": "course_name", "y_name": "count(*)", "x_data": [["statistics", "data structure", "French", "English"]], "y_data": [[4, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many registed students do each course have? List course name and the number of their registered students in a bar graph, display X in descending order."], "irrelevant_tables": ["Candidate_Assessments", "Candidates"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "116@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "staff_name", "y_name": "count(*)", "x_data": [["Rodger", "Oren", "Kadin", "Edmond", "Cyrus", "Christophe", "Bernice", "Berneice"]], "y_data": [[1, 1, 1, 3, 1, 1, 2, 2]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["How many unique engineers did each staff contact? List both the contact staff name and number of engineers contacted in a bar chart, and rank y-axis in descending order please.", "Return a bar chart on how many different engineers did each staff contact? List both the contact staff name and number of engineers contacted, and show in descending by the X."], "irrelevant_tables": ["Asset_Parts", "Maintenance_Contracts"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": [], "sort_by": "axis"}]}, "123@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status ORDER BY COUNT(fault_status) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status ORDER BY COUNT(fault_status) DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "fault_status", "y_name": "COUNT(fault_status)", "x_data": [["Reported", "Fixed", "Waiting", "Return"]], "y_data": [[5, 5, 3, 2]], "classify": [], "describe": "GROUP BY fault_status", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["A bar chart about the number of faults for different fault status of all the faults recoreded in the logs, sort by the Y-axis in desc."], "irrelevant_tables": ["Part_Faults", "Engineer_Skills"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "127@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY first_name ORDER BY COUNT(first_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "first_name", "y_name": "COUNT(first_name)", "x_data": [["Alexys", "Courtney", "Cullen", "Etha", "Nellie", "Lorine", "Naomi", "Archibald"]], "y_data": [[1, 1, 1, 1, 1, 2, 2, 6]], "classify": [], "describe": "GROUP BY first_name", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["How many staffs have contacted with each engineer? Give me a bar chart grouping by each engineer's first name, and could you display by the y-axis from low to high?"], "irrelevant_tables": ["Part_Faults", "Maintenance_Contracts"], "query_meta": [{"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "128@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY last_name ORDER BY last_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY last_name ORDER BY last_name DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "last_name", "y_name": "COUNT(last_name)", "x_data": [["Streich", "Simonis", "Reinger", "Price", "Morar", "Kunde", "Hirthe", "Adams"]], "y_data": [[6, 1, 1, 2, 2, 1, 1, 1]], "classify": [], "describe": "GROUP BY last_name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["How many staffs have contacted with each engineer? Give me a bar chart grouping by each engineer's last name, rank by the names in desc."], "irrelevant_tables": ["Skills_Required_To_Fix", "Maintenance_Contracts"], "query_meta": [{"channel_specified": [], "sort_by": "field"}]}, "134@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name ORDER BY last_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name ORDER BY last_name DESC"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "last_name", "y_name": "COUNT(last_name)", "x_data": [["Streich", "Stamm", "Simonis", "Price", "Orn", "Morar", "Kunde", "Hirthe", "Hauck", "Harvey", "Hahn", "Grady", "Adams"]], "y_data": [[1, 0, 0, 2, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]], "classify": ["Electrical", "Mechanical", "TV, Video"], "describe": "GROUP BY skill_description, GROUP BY last_name", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["List the number of enginners in a stacked bar chart The x-axis is last name and group by skill description, rank last_name in descending order."], "irrelevant_tables": ["Engineer_Visits", "Staff"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "sort_by": "field", "stacked_bar": true}]}, "139@y_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "part_name", "y_name": "count(*)", "x_data": [["top", "middle", "package"]], "y_data": [[4, 5, 6]], "classify": [], "describe": "", "sort": {"channel": "y", "order": "ascending"}}, "nl_queries": ["Visualize a bar chart for how many assets can each parts be used in? List the part name and the number, and display by the Y in ascending.", "How many assets can each parts be used in? List the part name and the number with a bar chart, and show by the y axis from low to high."], "irrelevant_tables": ["Staff", "Engineer_Visits"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}, {"channel_specified": ["x", "y"], "sort_by": "axis"}]}, "145@y_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY fault_short_name ,  skill_description ORDER BY COUNT(skill_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY fault_short_name ,  skill_description ORDER BY COUNT(skill_description) DESC"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "skill_description", "y_name": "COUNT(skill_description)", "x_data": [["TV, Video", "Mechanical", "Electrical"]], "y_data": [[4, 1, 0], [2, 2, 3], [1, 2, 0]], "classify": ["MW", "PW", "TW"], "describe": "GROUP BY fault_short_name, GROUP BY skill_description", "sort": {"channel": "y", "order": "descending"}}, "nl_queries": ["A stacked bar chart showing the number of faults for different fault short name and skills required to fix them The x-axis is skill description and group by fault short name, display by the y axis in descending."], "irrelevant_tables": ["Maintenance_Engineers", "Fault_Log_Parts"], "query_meta": [{"channel_specified": ["x", "y", "classify"], "sort_by": "axis", "stacked_bar": true}]}, "149@x_name@DESC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description DESC"}, "chart": "Bar", "hardness": "Hard", "db_id": "assets_maintenance", "vis_obj": {"chart": "bar", "x_name": "skill_description", "y_name": "COUNT(skill_description)", "x_data": [["TV, Video", "Mechanical", "Electrical"]], "y_data": [[7, 5, 3]], "classify": [], "describe": "GROUP BY skill_description", "sort": {"channel": "x", "order": "descending"}}, "nl_queries": ["A bar chart listing the number of faults for different description of skills required to fix them, and sort x axis in descending order."], "irrelevant_tables": ["Engineer_Visits", "Fault_Log_Parts"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "3069@x_name@ASC": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name ASC"}, "chart": "Bar", "hardness": "Hard", "db_id": "twitter_1", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(*)", "x_data": [["Black Widow\n", "Celine Dion", "Iron Man", "Susan", "Tyler Swift"]], "y_data": [[1, 2, 2, 2, 1]], "classify": [], "describe": "", "sort": {"channel": "x", "order": "ascending"}}, "nl_queries": ["Find the name of each user and number of tweets tweeted by each of them Visualize by bar chart, could you order X-axis in asc order?"], "irrelevant_tables": ["follows"], "query_meta": [{"channel_specified": [], "sort_by": "axis"}]}, "4001": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COUNT(DISTINCT a.FacID), COUNT(DISTINCT b.stuid), a.actid FROM Faculty_Participates_in a FULL JOIN Participates_in b ON a.actid = b.actid GROUP BY a.actid", "binning": ""}, "VQL": "Visualize SCATTER SELECT COUNT(DISTINCT a.FacID), COUNT(DISTINCT b.stuid), a.actid FROM Faculty_Participates_in a FULL JOIN Participates_in b ON a.actid = b.actid GROUP BY a.actid"}, "chart": "Scatter", "hardness": "Hard", "db_id": "activity_1", "vis_obj": {"chart": "scatter", "x_name": "count(FacID)", "y_name": "count(stuid)", "x_data": [[0, 5, 4, 1, 2, 3, 1, 1, 3, 2, 3, 5, 7, 2]], "y_data": [[2, 6, 4, 5, 3, 2, 9, 5, 14, 4, 3, 6, 7, 0]], "classify": [], "describe": "", "sort": null}, "nl_queries": ["Use scatter plot to show the relationship between the number of faculties and students in each activity."], "irrelevant_tables": ["Activity", "Faculty"], "query_meta": [{"channel_specified": []}]}, "4004": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT c.Major,COUNT(DISTINCT c.StuID), a.AllergyType FROM Allergy_Type a JOIN Has_Allergy b ON a.Allergy = b.Allergy JOIN Student c ON b.StuID = c.StuID GROUP BY c.Major, a.AllergyType", "binning": ""}, "VQL": "Visualize BAR SELECT c.Major,COUNT(DISTINCT c.StuID), a.AllergyType FROM Allergy_Type a JOIN Has_Allergy b ON a.Allergy = b.Allergy JOIN Student c ON b.StuID = c.StuID GROUP BY c.Major, a.AllergyType"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "allergy_1", "vis_obj": {"chart": "bar", "x_name": "Major", "y_name": "count(StuID)", "x_data": [[100, 520, 540, 550, 600]], "y_data": [[1, 1, 1, 1, 10], [0, 5, 1, 2, 9], [0, 1, 0, 0, 4]], "classify": ["food", "environmental", "animal"], "describe": "", "sort": null}, "nl_queries": ["A bar chart showing the number of students allergic to different types of allergens among different majors."], "irrelevant_tables": [], "query_meta": [{"channel_specified": [], "stacked_bar": false}]}, "4007": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT b.name, count(DISTINCT b.name), c.name FROM accelerator_compatible_browser a JOIN browser b ON a.browser_id = b.id JOIN Web_client_accelerator c ON a.accelerator_id = c.id GROUP BY b.name, c.name", "binning": ""}, "VQL": "Visualize BAR SELECT b.name, count(DISTINCT b.name), c.name FROM accelerator_compatible_browser a JOIN browser b ON a.browser_id = b.id JOIN Web_client_accelerator c ON a.accelerator_id = c.id GROUP BY b.name, c.name"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "browser_web", "vis_obj": {"chart": "bar", "x_name": "name", "y_name": "count(name)", "x_data": [["Firefox", "Internet Explorer", "Opera", "Safari"]], "y_data": [[1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0]], "classify": ["CACHEbox", "CProxy", "Fasterfox", "Nitro", "fasTun"], "describe": "", "sort": null}, "nl_queries": ["Use a stacked bar chart to display the number of accelerators compatible with each browser, with colors representing different accelerators."], "irrelevant_tables": [], "query_meta": [{"channel_specified": ["classify"], "stacked_bar": true}]}, "4010": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT c.Continent, count(distinct a.id), CountryName FROM car_makers a JOIN countries b ON a.Country = b.CountryId JOIN continents c on b.Continent=c.ContId GROUP BY b.CountryName, c.Continent", "binning": ""}, "VQL": "Visualize BAR SELECT c.Continent, count(distinct a.id), CountryName FROM car_makers a JOIN countries b ON a.Country = b.CountryId JOIN continents c on b.Continent=c.ContId GROUP BY b.CountryName, c.Continent"}, "chart": "Stacked Bar", "hardness": "Hard", "db_id": "car_1", "vis_obj": {"chart": "bar", "x_name": "Continent", "y_name": "count(id)", "x_data": [["america", "asia", "europe"]], "y_data": [[0, 0, 3], [0, 0, 4], [0, 0, 1], [0, 5, 0], [0, 2, 0], [0, 0, 2], [0, 0, 1], [4, 0, 0]], "classify": ["france", "germany", "italy", "japan", "korea", "sweden", "uk", "usa"], "describe": "", "sort": null}, "nl_queries": ["A stacked bar chart to show the number of car makers in each continent, colored by country."], "irrelevant_tables": ["car_names", "model_list"], "query_meta": [{"channel_specified": ["classify"], "stacked_bar": true}]}, "4011": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT a.Cylinders, avg(a.Accelerate), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId GROUP BY a.Cylinders, e.CountryName", "binning": ""}, "VQL": "Visualize BAR SELECT a.Cylinders, avg(a.Accelerate), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId GROUP BY a.Cylinders, e.CountryName"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "car_1", "vis_obj": {"chart": "bar", "x_name": "Cylinders", "y_name": "avg(a.Accelerate)", "x_data": [["3", "4", "5", "6", "8"]], "y_data": [[0, 18.700000000000003, 0, 15.8, 0], [0, 16.805882352941175, 18.633333333333333, 16.7, 0], [0, 15.65, 0, 0, 0], [13.25, 16.569565217391304, 0, 13.549999999999999, 0], [0, 15.144444444444446, 0, 16.6, 0], [0, 15.1, 0, 0, 0], [0, 16.52638888888889, 0, 16.474324324324325, 12.784112149532717]], "classify": ["france", "germany", "italy", "japan", "sweden", "uk", "usa"], "describe": "", "sort": null}, "nl_queries": ["Please show me the average accelerations of cars in a bar chart aggregated by the number of cylinders. Different colors represent different country."], "irrelevant_tables": ["continents"], "query_meta": [{"channel_specified": ["classify"], "stacked_bar": false}]}, "4012": {"vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT a.Horsepower, a.Accelerate, e.CountryName,a.Id FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId where a.Horsepower != 'null' GROUP BY a.Id, a.Cylinders, e.CountryName", "binning": ""}, "VQL": "Visualize SCATTER SELECT a.Horsepower, a.Accelerate, e.CountryName,a.Id FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId where a.Horsepower != 'null' GROUP BY a.Id, a.Cylinders, e.CountryName"}, "chart": "Grouping Scatter", "hardness": "Extra Hard", "db_id": "car_1", "vis_obj": {"chart": "scatter", "x_name": "Horsepower", "y_name": "Accelerate", "x_data": [[115, 87, 70, 87, 69, 88, 83, 88, 58, 133, 71, 80], [46, 90, 113, 48, 90, 60, 54, 76, 46, 75, 91, 83, 67, 78, 71, 70, 95, 81, 70, 71, 120, 78, 78, 110, 48, 103, 71, 71, 77, 76, 78, 48, 48, 67, 67, 74, 74, 52], [76, 90, 49, 75, 75, 67, 86, 69], [95, 88, 88, 95, 65, 69, 95, 97, 92, 97, 88, 88, 94, 90, 122, 67, 65, 52, 61, 97, 93, 75, 96, 97, 53, 53, 70, 75, 108, 68, 70, 75, 67, 97, 110, 52, 70, 60, 95, 97, 95, 97, 68, 65, 65, 60, 65, 90, 75, 92, 75, 65, 65, 67, 67, 132, 100, 72, 58, 60, 67, 65, 62, 68, 75, 75, 100, 74, 116, 120, 68, 68, 88, 75, 70, 67, 67, 67, 96], [95, 112, 112, 110, 98, 115, 102, 125, 115, 110, 76], [88], [130, 165, 150, 150, 140, 198, 220, 215, 225, 190, 165, 153, 175, 175, 170, 160, 140, 150, 225, 95, 97, 85, 90, 215, 200, 210, 90, 100, 105, 100, 88, 100, 165, 175, 153, 150, 180, 170, 175, 110, 72, 100, 88, 86, 70, 80, 90, 86, 165, 175, 150, 153, 150, 208, 155, 160, 190, 150, 130, 140, 150, 86, 80, 175, 150, 145, 137, 150, 198, 150, 158, 150, 215, 225, 175, 105, 100, 100, 88, 95, 150, 167, 170, 180, 100, 72, 85, 107, 145, 230, 150, 180, 95, 100, 100, 80, 75, 100, 110, 105, 140, 150, 150, 140, 150, 75, 95, 105, 72, 72, 170, 145, 150, 148, 110, 105, 110, 95, 110, 110, 129, 83, 100, 78, 97, 90, 92, 79, 140, 150, 120, 152, 100, 105, 81, 90, 52, 60, 100, 78, 110, 95, 72, 150, 180, 145, 130, 150, 80, 96, 145, 110, 145, 130, 110, 105, 100, 98, 180, 170, 190, 149, 88, 89, 63, 83, 66, 110, 140, 139, 105, 95, 85, 88, 100, 90, 105, 85, 110, 120, 145, 165, 139, 140, 68, 75, 105, 85, 115, 85, 88, 90, 110, 130, 129, 138, 135, 155, 142, 125, 150, 80, 80, 125, 90, 70, 70, 90, 115, 115, 90, 70, 90, 88, 90, 90, 105, 84, 84, 92, 110, 84, 64, 63, 65, 65, 110, 105, 88, 85, 88, 88, 88, 85, 84, 90, 92, 63, 70, 110, 85, 92, 112, 84, 90, 86, 84, 79, 82]], "y_data": [[17.5, 17.5, 19.5, 19.5, 18.0, 17.0, 15.3, 21.9, 18.6, 15.8, 24.8, 20.4], [20.5, 14.5, 12.5, 20.0, 14.0, 19.0, 23.5, 18.0, 21.0, 15.5, 14.0, 16.5, 15.5, 14.5, 16.5, 14.0, 15.0, 16.9, 14.2, 12.2, 16.7, 14.5, 14.1, 12.8, 21.5, 15.9, 14.9, 14.0, 20.1, 14.7, 15.8, 21.7, 23.7, 19.9, 21.8, 14.2, 15.3, 24.6], [14.5, 15.5, 19.5, 15.5, 14.0, 16.0, 15.5, 14.7], [15.0, 14.5, 14.5, 14.0, 19.0, 18.0, 15.5, 13.5, 17.0, 14.5, 16.5, 19.0, 16.5, 13.5, 13.5, 19.0, 21.0, 16.5, 19.0, 15.0, 15.5, 16.0, 13.5, 17.0, 17.5, 17.4, 17.0, 16.4, 15.5, 18.5, 16.8, 18.2, 16.4, 14.5, 13.5, 19.4, 18.6, 16.4, 14.2, 14.7, 14.8, 14.9, 16.6, 15.2, 19.2, 18.8, 16.4, 15.5, 17.5, 15.0, 15.2, 17.9, 19.2, 13.8, 18.0, 11.4, 12.5, 17.0, 16.9, 16.1, 17.8, 19.4, 17.3, 16.0, 14.4, 16.8, 14.8, 18.3, 12.6, 13.8, 18.2, 17.6, 14.5, 14.5, 16.9, 15.0, 15.7, 16.2, 13.9], [17.5, 14.5, 15.5, 14.0, 14.5, 13.5, 15.7, 13.6, 15.7, 15.4, 19.6], [15.1], [12.0, 11.5, 11.0, 12.0, 10.5, 10.0, 9.0, 8.5, 10.0, 8.5, 11.5, 11.0, 10.5, 11.0, 10.0, 8.0, 8.0, 9.5, 10.0, 15.5, 15.5, 16.0, 15.0, 14.0, 15.0, 13.5, 15.5, 13.0, 15.5, 15.5, 15.5, 15.5, 12.0, 11.5, 13.5, 13.0, 11.5, 12.0, 12.0, 13.5, 19.0, 15.0, 14.5, 14.0, 20.5, 17.0, 19.5, 16.5, 12.0, 12.0, 13.5, 13.0, 11.5, 11.0, 13.5, 13.5, 12.5, 12.5, 14.0, 16.0, 14.0, 16.0, 15.0, 13.0, 11.5, 13.0, 14.5, 12.5, 11.5, 12.0, 13.0, 14.5, 11.0, 11.0, 11.0, 16.5, 18.0, 16.0, 16.5, 16.0, 14.0, 12.5, 13.0, 12.5, 15.0, 19.5, 18.5, 14.0, 13.0, 9.5, 11.0, 11.0, 16.5, 16.0, 17.0, 16.5, 17.0, 17.0, 18.0, 16.5, 14.0, 14.5, 13.5, 16.0, 15.5, 14.5, 16.0, 16.0, 21.0, 19.5, 11.5, 14.0, 14.5, 13.5, 21.0, 18.5, 19.0, 19.0, 15.0, 13.5, 12.0, 17.0, 16.0, 18.5, 14.5, 17.0, 14.9, 17.7, 13.0, 13.0, 13.9, 12.8, 15.4, 14.5, 17.6, 17.6, 22.2, 22.1, 17.7, 21.0, 16.2, 17.8, 13.6, 13.2, 12.1, 12.0, 15.0, 14.0, 14.8, 15.5, 12.5, 19.0, 13.7, 14.9, 16.4, 16.9, 17.7, 19.0, 11.1, 11.4, 12.2, 14.5, 16.0, 15.8, 17.0, 15.9, 14.4, 15.5, 13.2, 12.8, 19.2, 18.2, 15.8, 15.4, 17.2, 17.2, 15.8, 16.7, 18.7, 15.1, 13.2, 13.4, 11.2, 13.7, 16.5, 14.5, 16.7, 17.6, 15.4, 18.2, 17.3, 18.2, 16.6, 15.4, 13.4, 13.2, 15.2, 14.9, 14.3, 15.0, 13.0, 14.4, 15.0, 17.4, 22.2, 13.2, 14.9, 16.0, 11.3, 12.9, 13.2, 15.5, 16.5, 18.1, 20.1, 18.7, 14.4, 15.7, 16.4, 14.4, 12.6, 12.9, 16.4, 14.9, 16.2, 20.7, 15.8, 19.0, 17.1, 16.6, 19.6, 18.6, 18.0, 16.2, 16.0, 18.0, 16.4, 14.7, 17.3, 16.4, 17.0, 14.5, 14.7, 13.0, 17.3, 15.6, 11.6, 18.6, 19.4]], "classify": ["france", "germany", "italy", "japan", "sweden", "uk", "usa"], "describe": "", "sort": null}, "nl_queries": ["Scatter plot shows the correlation of horsepower and accelerate. x axis Horsepower, Y axis Accelerate, Color by CountryName."], "irrelevant_tables": ["continents"], "query_meta": [{"channel_specified": ["x", "y", "classify"]}]}, "4013": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT a.Cylinders, avg(a.Accelerate), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId GROUP BY a.Cylinders, e.CountryName", "binning": ""}, "VQL": "Visualize BAR SELECT a.Cylinders, avg(a.Accelerate), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId GROUP BY a.Cylinders, e.CountryName"}, "chart": "Stacked Bar", "hardness": "Extra Hard", "db_id": "car_1", "vis_obj": {"chart": "bar", "x_name": "Cylinders", "y_name": "count(id)", "x_data": [["3", "4", "5", "6", "8"]], "y_data": [[0, 11, 0, 1, 0], [0, 34, 3, 1, 0], [0, 8, 0, 0, 0], [4, 69, 0, 6, 0], [0, 9, 0, 2, 0], [0, 1, 0, 0, 0], [0, 69, 0, 73, 107]], "classify": ["france", "germany", "italy", "japan", "sweden", "uk", "usa"], "describe": "", "sort": null}, "nl_queries": ["Stacked bar chart show cars produced by different country in various cylinders"], "irrelevant_tables": ["continents"], "query_meta": [{"channel_specified": [], "stacked_bar": true}]}, "4014": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT a.year, avg(a.horsepower), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId where a.Horsepower != 'null' and e.CountryName in ('japan', 'usa') GROUP BY a.year, e.CountryName", "binning": ""}, "VQL": "Visualize LINE SELECT a.year, avg(a.horsepower), e.CountryName FROM cars_data a JOIN car_names b ON a.Id = b.MakeId JOIN model_list c ON b.Model = c.Model JOIN car_makers d ON c.Maker = d.Id JOIN countries e ON d.Country = e.CountryId where a.Horsepower != 'null' and e.CountryName in ('japan', 'usa') GROUP BY a.year, e.CountryName"}, "chart": "Grouping Line", "hardness": "Extra Hard", "db_id": "car_1", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "avg(a.horsepower)", "x_data": [[1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982]], "y_data": [[91.5, 79.25, 93.8, 98.5, 72.5, 80.25, 76.5, 81.16666666666667, 79.25, 65.0, 78.84615384615384, 78.33333333333333, 74.0], [164.92307692307693, 119.84210526315789, 138.77777777777777, 146.6206896551724, 112.14285714285714, 108.7, 110.5, 118.38888888888889, 107.27272727272727, 109.43478260869566, 88.83333333333333, 84.53846153846153, 86.94736842105263]], "classify": ["japan", "usa"], "describe": "", "sort": null}, "nl_queries": ["Line graph of year versus average horsepower by country. Only show the trend of japan and usa. "], "irrelevant_tables": ["continents"], "query_meta": [{"channel_specified": ["x", "y", "classify"]}]}, "4018": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT b.product_category_code, count(*), a.complaint_status_code FROM Complaints a JOIN Products b ON a.product_id=b.product_id GROUP BY b.product_category_code, a.complaint_status_code", "binning": ""}, "VQL": "Visualize BAR SELECT b.product_category_code, count(*), a.complaint_status_code FROM Complaints a JOIN Products b ON a.product_id=b.product_id GROUP BY b.product_category_code, a.complaint_status_code"}, "chart": "Stacked Bar", "hardness": "Medium", "db_id": "customer_complaints", "vis_obj": {"chart": "bar", "x_name": "product_category_code", "y_name": "count(*)", "x_data": [["Book", "Food", "Hardware"]], "y_data": [[2, 3, 1], [2, 2, 0], [0, 1, 1]], "classify": ["New", "Open", "Closed"], "describe": "", "sort": null}, "nl_queries": ["Display the count of complaints for each product category, and represent the distribution of complaints across different statuses using a stacked bar chart."], "irrelevant_tables": ["Customers", "Staff"], "query_meta": [{"channel_specified": [], "stacked_bar": true}]}, "4019": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT a.product_name, count(*),c.order_status_code FROM Products a JOIN Actual_Order_Products b ON a.product_id=b.product_id JOIN Actual_Orders c ON b.actual_order_id = c.actual_order_id GROUP BY a.product_name, c.order_status_code ", "binning": ""}, "VQL": "Visualize BAR SELECT a.product_name, count(*),c.order_status_code FROM Products a JOIN Actual_Order_Products b ON a.product_id=b.product_id JOIN Actual_Orders c ON b.actual_order_id = c.actual_order_id GROUP BY a.product_name, c.order_status_code"}, "chart": "Stacked Bar", "hardness": "Medium", "db_id": "customer_deliveries", "vis_obj": {"chart": "bar", "x_name": "product_name", "y_name": "count(*)", "x_data": [["books", "cloth", "dvds", "electronics", "food", "gift"]], "y_data": [[1, 2, 3, 2, 2, 1], [0, 1, 0, 2, 0, 1]], "classify": ["Cancel", "Success"], "describe": "", "sort": null}, "nl_queries": ["How many orders are there for each product? Show the number of deliveries in different status by stacked bar chart."], "irrelevant_tables": ["Addresses", "Employees"], "query_meta": [{"channel_specified": [], "stacked_bar": true}]}, "4022": {"vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT a.payment_method_code, sum(amount_payment), b.customer_status_code from Customer_Payments a JOIN Customers b ON a.customer_id = b.customer_id group by a.payment_method_code, b.customer_status_code", "binning": ""}, "VQL": "Visualize BAR SELECT a.payment_method_code, sum(amount_payment), b.customer_status_code from Customer_Payments a JOIN Customers b ON a.customer_id = b.customer_id group by a.payment_method_code, b.customer_status_code"}, "chart": "Stacked Bar", "hardness": "Medium", "db_id": "driving_school", "vis_obj": {"chart": "bar", "x_name": "payment_method_code", "y_name": "sum(amount_payment)", "x_data": [["Credit Card", "Direct Debit"]], "y_data": [[9414.74, 31331.060000000005], [18272.42, 30000.15]], "classify": ["Bad Customer", "Good Customer"], "describe": "", "sort": null}, "nl_queries": ["Display the total payment amounts for each method, and use a stacked bar chart to illustrate how payments are distributed among different customer statuses."], "irrelevant_tables": ["Lessons", "Staff"], "query_meta": [{"channel_specified": [], "stacked_bar": true}]}, "4029": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT a.birthday, count(distinct a.player_api_id),  b.preferred_foot from Player a JOIN player_attributes b ON a.player_api_id = b.player_api_id WHERE a.birthday >= '1980-01-01 00:00:00'and a.birthday <'1990-01-01 00:00:00' GROUP BY birthday, preferred_foot", "binning": "bin by year"}, "VQL": "Visualize LINE SELECT a.birthday, count(distinct a.player_api_id),  b.preferred_foot from Player a JOIN player_attributes b ON a.player_api_id = b.player_api_id WHERE a.birthday >= '1980-01-01 00:00:00'and a.birthday <'1990-01-01 00:00:00' GROUP BY birthday, preferred_foot"}, "chart": "Grouping Line", "hardness": "Hard", "db_id": "soccer_1", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "count(a.player_api_id)", "x_data": [[1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989]], "y_data": [[129, 148, 140, 164, 181, 188, 236, 223, 240, 201], [345, 370, 399, 452, 509, 487, 571, 602, 657, 599]], "classify": ["left", "right"], "describe": "", "sort": null}, "nl_queries": ["A line chart depicting the count of players born from 1980 to 1989 (including 1980, excluding 1990), categorized by their preferred foot. Bin the birthday by year."], "irrelevant_tables": ["League", "Team"], "query_meta": [{"channel_specified": ["x", "y", "classify"]}]}, "4035": {"vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year, count(*), semester from section a JOIN course b ON a.course_id = b.course_id where credits = 4 GROUP BY year, semester", "binning": ""}, "VQL": "Visualize LINE SELECT year, count(*), semester from section a JOIN course b ON a.course_id = b.course_id where credits = 4 GROUP BY year, semester"}, "chart": "Grouping Line", "hardness": "Medium", "db_id": "college_2", "vis_obj": {"chart": "line", "x_name": "year", "y_name": "semester", "x_data": [[2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010]], "y_data": [[4, 4, 1, 3, 6, 2, 0, 1, 2], [2, 2, 2, 2, 1, 3, 5, 2, 2]], "classify": ["Fall", "Spring"], "describe": "", "sort": null}, "nl_queries": ["How many 4-credit courses are there in each semester each year? Line chart."], "irrelevant_tables": ["advisor", "prereq"], "query_meta": [{"channel_specified": ["x", "y", "classify"]}]}}