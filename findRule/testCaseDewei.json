{
   "1563":{
      "0":{
         "belong":"Dewei",
         "question":"For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the average of salary , and group by attribute job_id in a bar chart.",
         "hardness":"Extra Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":"use the same color for data display",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.contains('D|S')]\ngrouped_df = filtered_df.groupby('JOB_ID').agg({'SALARY': 'mean'}).reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(grouped_df['JOB_ID'], grouped_df['SALARY'])\nplt.xlabel('Job ID')\nplt.ylabel('Average Salary')\nplt.title('Distribution of Average Salary by Job ID (Names with D or S)')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "1574":{
      "0":{
         "belong":"Dewei",
         "question":"For all employees who have the letters D or S in their first name, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":"nvBench data were wrong",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.contains('D|S', regex=True)]\nplt.figure()\nplt.scatter(filtered_df['SALARY'], filtered_df['COMMISSION_PCT'])\nplt.title('Correlation Between Salary and Commission Percentage')\nplt.xlabel('Salary')\nplt.ylabel('Commission Percentage')\nplt.suptitle('')\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "1580":{
      "0":{
         "belong":"Dewei",
         "question":"For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by month.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"the axis shows year and month but the query only asks about month",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_data = df[(df['SALARY'].between(8000, 12000)) & (df['COMMISSION_PCT'].notna() | (df['DEPARTMENT_ID'] != 40))]\nhire_date_counts = filtered_data['HIRE_DATE'].dt.to_period('M').value_counts().sort_index()\nplt.figure(figsize=(10, 6))\nhire_date_counts.plot(kind='bar')\nplt.xlabel('Hire Date (Month and Year)')\nplt.ylabel('Number of Hires')\nplt.title('Distribution of Hire Dates for Selected Employees')\nplt.tight_layout()\nplt.suptitle('')\nplt.show()\n",
         "addRule":"Only keep month figures when the dates are in the same year",
         "addExample":null
      }
   },
   "1807":{
      "0":{
         "belong":"Dewei",
         "question":"For employees with first names that end with the letter 'm', groups and counts the first name to visualize a pie graph.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"overlap",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.endswith('m')]\ncount_series = filtered_df['FIRST_NAME'].value_counts()\ncount_series.plot(kind='pie', autopct='%1.1f%%', startangle=90)\nplt.title('Distribution of First Names Ending with m')\nplt.ylabel('Count of Employees')\nplt.xlabel('First Names')\nplt.gca().set_aspect('equal')\nplt.gcf().suptitle('')\nplt.show()\n",
         "addRule":"make sure the labels do not overlap with any axis",
         "addExample":null
      }
   },
   "1831":{
      "0":{
         "belong":"Dewei",
         "question":"For those employees whose first name does not contain the letter M, sum their salary by binning the hire date into the day of week interval for visualizing a bar chart.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":null,
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_df = df[~df['FIRST_NAME'].str.contains('M')]\nfiltered_df['HIRE_DAY'] = filtered_df['HIRE_DATE'].dt.day_name()\nsalary_sum_by_day = filtered_df.groupby('HIRE_DAY')['SALARY'].sum().reindex(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n)\nplt.figure(figsize=(10,6))\nsalary_sum_by_day.plot(kind='bar')\nplt.title('Total Salary of Employees Hired by Day of the Week (Excluding First Name with M)')\nplt.xlabel('Day of the Week')\nplt.ylabel('Total Salary')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "2615":{
      "0":{
         "belong":"Dewei",
         "question":"What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check', bin the payment date by month and count them by a bar chart",
         "hardness":"Hard",
         "isDataCorrect":false,
         "isStyleCorrect":true,
         "evaluation":"ax is not defined in the code",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/products_for_hire/payments.csv')\n# The following codes are generated by LLM:\ndf['payment_date'] = pd.to_datetime(df['payment_date'])\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\nfiltered_df['payment_month'] = filtered_df['payment_date'].dt.to_period('M')\nmonthly_counts = filtered_df.groupby('payment_month').size()\nmonthly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Payment Month')\nax.set_ylabel('Number of Payments')\nax.set_title('Payments Higher Than $300 or Check by Month')\nplt.suptitle('')\nplt.show()\n",
         "addRule":"define ax if you use ax variable",
         "addExample":null
      }
   },
   "2617":{
      "0":{
         "belong":"Dewei",
         "question":"What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"integer number was treated as float number",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/products_for_hire/payments.csv')\n# The following codes are generated by LLM:\ndf['payment_date'] = pd.to_datetime(df['payment_date'], errors='coerce')\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\ncount_by_date = filtered_df['payment_date'].dt.date.value_counts().sort_index()\nplt.figure(figsize=(10, 6))\nplt.plot(count_by_date.index, count_by_date.values, marker='o', linestyle='-')\nplt.xlabel('Payment Date')\nplt.ylabel('Number of Payments')\nplt.title('Number of Payments Over 300 or Payment Type Check by Date')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":"If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
         "addExample":null
      }
   },
   "2656":{
      "0":{
         "belong":"Dewei",
         "question":"Show the countries that have managers of age above 50 or below 46, and count them by a pie chart",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":null,
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/railway/manager.csv')\n# The following codes are generated by LLM:\ncondition = (df['Age'] > 50) | (df['Age'] < 46)\nfiltered_df = df[condition]\ncountry_counts = filtered_df['Country'].value_counts()\nplt.figure(figsize=(8, 8))\nplt.pie(country_counts, labels=country_counts.index, autopct='%1.1f%%', startangle=140)\nplt.title('Distribution of Managers from Different Countries (Age > 50 or < 46)')\nplt.xlabel('Countries')\nplt.ylabel('Manager Count')\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "2657":{
      "0":{
         "belong":"Dewei",
         "question":"Show the countries that have managers of age above 50 or below 46, and count them by a bar chart",
         "hardness":"Hard",
         "isDataCorrect":false,
         "isStyleCorrect":false,
         "evaluation":"name 'fig' is not defined",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/railway/manager.csv')\n# The following codes are generated by LLM:\nage_filtered_df = df[(df['Age'] > 50) | (df['Age'] < 46)]\ncountry_counts = age_filtered_df['Country'].value_counts()\nfig.suptitle('')\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Managers')\nax.set_title('Count of Managers by Country for Ages >50 or <46')\nplt.show()\n",
         "addRule":"define fig if you use fig variable",
         "addExample":null
      }
   },
   "2750":{
      "0":{
         "belong":"Dewei",
         "question":"What is the total number of captains in each rank and class? Let class as X-axis, and categorize by rank with a stacked bar chart.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"integer number was treated as float number",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/ship_1/captain.csv')\n# The following codes are generated by LLM:\ndf['Rank'] = df['Rank'].astype('category')\ndf['Class'] = df['Class'].astype('category')\nrank_class_counts = df.groupby(['Class', 'Rank']).size().unstack(fill_value=0)\nrank_class_counts.plot(kind='bar', stacked=True, figsize=(10, 6))\nplt.title('Total Number of Captains by Rank and Class')\nplt.xlabel('Class')\nplt.ylabel('Number of Captains')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":"If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
         "addExample":null
      }
   },
   "2850":{
      "0":{
         "belong":"Dewei",
         "question":"What are the top 5 countries by number of invoices and how many do they have. Plot them as bar chart.",
         "hardness":"Hard",
         "isDataCorrect":false,
         "isStyleCorrect":true,
         "evaluation":"order is misinterpreted",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ntop_countries = df['billing_country'].value_counts().head(5)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue')\nplt.xlabel('Country')\nplt.ylabel('Number of Invoices')\nplt.title('Top 5 Countries by Number of Invoices')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":"identify and sort by the exact tag mentioned by the user",
         "addExample":null
      }
   },
   "2851":{
      "0":{
         "belong":"Dewei",
         "question":"Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size?",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":null,
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ndf['invoice_date'] = pd.to_datetime(df['invoice_date'])\ntop_countries = df.groupby('billing_country')['total'].mean().nlargest().reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(top_countries['billing_country'], top_countries['total'], color='skyblue')\nplt.xlabel('Country')\nplt.ylabel('Average Invoice Size')\nplt.title('Top Countries by Average Invoice Size')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "2857":{
      "0":{
         "belong":"Dewei",
         "question":"Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes?",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"make no sense to have a subtitle {}",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ncountry_totals = df.groupby('billing_country')['total'].sum()\ntop_countries = country_totals.nlargest(8)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue')\nplt.title('Top 8 Countries by Total Invoice Size')\nplt.xlabel('Country')\nplt.ylabel('Total Invoice Size')\nplt.suptitle('{}')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":"add subtitle only if necessary, make sure it is right subtitle",
         "addExample":null
      }
   },
   "2998":{
      "0":{
         "belong":"Dewei",
         "question":"A bar chart for what are the number of the dates of transactions with at least 100 share count or amount bigger than 100? Bin date by weekday.",
         "hardness":"Hard",
         "isDataCorrect":false,
         "isStyleCorrect":false,
         "evaluation":"ax is not defined",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/tracking_share_transactions/TRANSACTIONS.csv')\n# The following codes are generated by LLM:\ndf['date_of_transaction'] = pd.to_datetime(df['date_of_transaction'])\ncondition = (df['share_count'] >= 100) | (df['amount_of_transaction'] > 100)\nfiltered_df = df[condition]\nfiltered_df['weekday'] = filtered_df['date_of_transaction'].dt.day_name()\nweekday_counts = filtered_df['weekday'].value_counts()\nweekday_counts.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']).plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Number of Transactions')\nax.set_title('Number of Transactions by Weekday')\nfig.suptitle('')\nplt.show()\n",
         "addRule":"define ax if you use ax variable",
         "addExample":null
      }
   },
   "3222":{
      "0":{
         "belong":"Dewei",
         "question":"A bar chart shows the number of appellations whose score is higher than 93, and ordered by Name.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":"nvBench result was wrong",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['Score'] > 93]\nappellation_counts = filtered_df['Appelation'].value_counts().sort_index()\nplt.figure(figsize=(12, 6))\nappellation_counts.plot(kind='bar')\nplt.xlabel('Appellation')\nplt.ylabel('Number of Wines')\nplt.title('Number of Appellations with Score Higher Than 93')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   },
   "3227":{
      "0":{
         "belong":"Dewei",
         "question":"For those wines whose price is bigger than 100, group by grape, count their total number of each year and sort by year in asc in a bar chart.",
         "hardness":"Extra Hard",
         "isDataCorrect":false,
         "isStyleCorrect":true,
         "evaluation":"wrong chart type, should be several bars instead of one single bar",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['Price'] > 100]\ngrouped = filtered_df.groupby(['Grape', 'Year']).size().unstack().fillna(0)\ngrouped = grouped.sort_index(axis=1)\nax = grouped.plot(kind='bar', stacked=True, figsize=(12, 8))\nax.set_xlabel('Grape Variety')\nax.set_ylabel('Number of Wines')\nax.set_title('Wine Counts by Grape Variety and Year for Wines Priced Over $100')\nplt.suptitle('')\nplt.show()\n",
         "addRule":"choose right chart type which can show sorting order",
         "addExample":null
      }
   },
   "3229":{
      "0":{
         "belong":"Dewei",
         "question":"A bar chart listing the number of wines whose price is bigger than 100 ordered by year.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"the x-axis labels do not need roation",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\ndf_filtered = df[df['Price'] > 100]\ndf_grouped = df_filtered.groupby('Year').size()\ndf_grouped.plot(kind='bar', title='Number of Wines with Price > 100 by Year')\nplt.xlabel('Year')\nplt.ylabel('Number of Wines')\nplt.suptitle('')\nplt.show()\n",
         "addRule":"Only rotate labels when there is no enough space",
         "addExample":null
      }
   },
   "1484@x_name@ASC":{
      "0":{
         "belong":"Dewei",
         "question":"List the number of games in each season and group by away team in a group line chart, and order in asc by the X-axis please.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"integer number are treated as float-point number",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\ndf['Season'] = df['Season'].astype('int64')\n# Group by Season and Away_team, and count the number of games\ngrouped_df = df.groupby(['Season', 'Away_team']).size().reset_index(name='Game_Count')\n# Pivot the table to have Seasons on the x-axis and Away_team as columns\npivot_df = grouped_df.pivot(index='Season', columns='Away_team', values='Game_Count').fillna(0)\npivot_df.sort_index(inplace=True)\npivot_df.plot(kind='line', marker='o')\nplt.xlabel('Season')\nplt.ylabel('Number of Games')\nplt.title('Number of Games per Season by Away Team')\nplt.suptitle('')\nplt.show()\n",
         "addRule":"If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
         "addExample":null
      }
   },
   "1487@y_name@ASC":{
      "0":{
         "belong":"Dewei",
         "question":"Stacked bar chart of how many away team for with each Home_team in each away team, rank from low to high by the y-axis.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"x-axis and y-axis are switched",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\nhome_team_count = df.groupby(['Home_team', 'Away_team']).size().unstack(fill_value=0)\nhome_team_count.sort_values(by=home_team_count.columns.tolist(), inplace=True)\nhome_team_count.plot(kind='barh', stacked=True)\nplt.xlabel('Number of Matches')\nplt.ylabel('Home Teams')\nplt.title('Number of Matches by Home and Away Teams')\nplt.suptitle('')\nplt.show()\n",
         "addRule":"for bar plot, put bars on x-axis",
         "addExample":null
      }
   },
   "1488@x_name@DESC":{
      "0":{
         "belong":"Dewei",
         "question":"List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team, and I want to list x-axis in descending order.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":false,
         "evaluation":"the x-axis labels do not need roation",
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\nhome_team_counts = df.groupby(['Home_team', 'Away_team']).size().unstack()\nhome_team_counts = home_team_counts.loc[['Quruvchi', 'Pakhtakor', 'Bunyodkor']]\nax = home_team_counts.plot(kind='bar', stacked=True)\nax.set_xlabel('Home Team')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games for Each Home Team Grouped by Away Team')\nplt.gcf().suptitle(\"\")\nplt.show()\n",
         "addRule":"Only rotate labels when there is no enough space",
         "addExample":null
      }
   },
   "1413@y_name@ASC":{
      "0":{
         "belong":"Dewei",
         "question":"How many flights with price higher than 300 for each destination city? Return a bar chart, and order in ascending by the total number.",
         "hardness":"Hard",
         "isDataCorrect":true,
         "isStyleCorrect":true,
         "evaluation":null,
         "code":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/flight_1/Flight.csv')\n# The following codes are generated by LLM:\ndf['departure_date'] = pd.to_datetime(df['departure_date'], format='%m/%d/%Y %H:%M')\ndf['arrival_date'] = pd.to_datetime(df['arrival_date'], format='%m/%d/%Y %H:%M')\nhigh_price_flights = df[df['price'] > 300]\nflight_counts = high_price_flights['destination'].value_counts().sort_values()\nplt.bar(flight_counts.index, flight_counts.values)\nplt.xlabel('Destination City')\nplt.ylabel('Number of Flights')\nplt.title('Number of Flights with Price Higher than 300 by Destination')\nplt.show()\n",
         "addRule":null,
         "addExample":null
      }
   }
}