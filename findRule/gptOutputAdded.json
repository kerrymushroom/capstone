{
    "189": {
        "0": {
            "belong": "Kerry",
            "question": "Show me about the distribution of date_address_to and the amount of date_address_to, and group by attribute other_details and bin date_address_to by month in a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "2018-02",
                        "2018-03"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        12
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Feb",
                        "Mar"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        12
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": false,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\n\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['month_year'] = df['date_address_to'].dt.to_period('M')\ngrouped_df = df.groupby(['month_year', 'other_details']).size().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\ngrouped_df.plot(kind='bar', ax=ax)\n\nax.set_xlabel(\"Month-Year\")\nax.set_ylabel(\"Number of Addresses\")\nax.set_title(\"Distribution and Count of 'date_address_to' by Month and Other Details\")\nplt.suptitle(\"\")\nplt.show()",
            "addRule": "If chart has enough space, rotate xtick to 0 using \"plt.xticks(rotation=0)\"",
            "addExample": null
        }
    },
    "194": {
        "0": {
            "belong": "Kerry",
            "question": "Show me about the distribution of date_address_to and the sum of monthly_rental, and group by attribute other_details and bin date_address_to by month in a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "apartment",
                        "house"
                    ]
                ],
                "y_data": [
                    [
                        1297.3186,
                        747.5312
                    ],
                    [
                        6052.6934,
                        10726.4778
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Feb",
                        "Mar"
                    ]
                ],
                "y_data": [
                    [
                        1297.3186,
                        6052.69338
                    ],
                    [
                        747.5312,
                        10726.4778
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": false,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv', parse_dates=['date_address_to'])\n\ndf['year_month'] = df['date_address_to'].dt.to_period('M')\nmonthly_rental_sum = df.groupby(['other_details', 'year_month'])['monthly_rental'].sum().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nmonthly_rental_sum.plot(kind='bar', ax=ax)\nax.set_title('Distribution of Date Address To and Sum of Monthly Rental')\nax.set_xlabel('Month')\nax.set_ylabel('Sum of Monthly Rental')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "195": {
        "0": {
            "belong": "Kerry",
            "question": "Give me the comparison about the average of monthly_rental over the  date_address_to , and group by attribute other_details and bin date_address_to by month by a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; Used key as legend name, not the specific data meaning",
            "fig_data": {
                "x_data": [
                    [
                        "2018-02",
                        "2018-03"
                    ]
                ],
                "y_data": [
                    [
                        1297.3186,
                        1008.7822333333334
                    ],
                    [
                        747.5312,
                        893.87315
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Feb",
                        "Mar"
                    ]
                ],
                "y_data": [
                    [
                        1297.3186,
                        1008.78223
                    ],
                    [
                        747.5312,
                        893.87315
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": false,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['month'] = df['date_address_to'].dt.to_period('M')\ngrouped = df.groupby(['month', 'other_details'])['monthly_rental'].mean().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\ngrouped.plot(kind='bar', ax=ax)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.set_xlabel('Month')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Average Monthly Rental Comparison by Property Type')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": "If you know the specific data meaning of the column name, use the meaning as legend name",
            "addExample": null
        }
    },
    "196": {
        "0": {
            "belong": "Kerry",
            "question": "A bar chart shows the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "X-axis label overflowed. Missing part of X-axis data (2018) because of \"ax.xaxis.set_major_locator(mdates.YearLocator())\"",
            "fig_data": {
                "x_data": [
                    [
                        2017,
                        2018
                    ]
                ],
                "y_data": [
                    [
                        5,
                        2
                    ],
                    [
                        9,
                        4
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2017",
                        "2018"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        2
                    ],
                    [
                        9,
                        4
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year'] = df['date_address_from'].dt.year\n\ndf_grouped = df.groupby(['year', 'other_details']).size().unstack(fill_value=0)\n\nfig, ax = plt.subplots(figsize=(10, 4))\ndf_grouped.plot(kind='bar', stacked=True, ax=ax)\n\nax.set_xlabel('Year')\nax.set_ylabel('Count of Address Changes')\nax.set_title('Distribution of Address Changes Over Time by Type')\n\nplt.suptitle('')\nax.xaxis.set_major_locator(mdates.YearLocator())\nplt.xticks(rotation=45, ha='right') \n\nplt.show()",
            "addRule": "Don't use plt.xticks(ha) when not necessary. \nIf you already dealt with the data format, don't need to use set_major_locator() again.",
            "addExample": null
        }
    },
    "201": {
        "0": {
            "belong": "Kerry",
            "question": "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by year by a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        2017,
                        2018
                    ]
                ],
                "y_data": [
                    [
                        5019.3333,
                        2330.6787
                    ],
                    [
                        8296.2672,
                        3177.7418
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2017",
                        "2018"
                    ]
                ],
                "y_data": [
                    [
                        5019.3333,
                        2330.6787
                    ],
                    [
                        8296.2672,
                        3177.7418
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year'] = df['date_address_from'].dt.year\n\ngrouped = df.groupby(['year', 'other_details'])['monthly_rental'].sum().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\ngrouped.plot(kind='bar', ax=ax, width=0.7)\n\nax.set_xlabel('Year')\nax.set_ylabel('Total Monthly Rental')\nfig.suptitle('')\nax.set_title('Comparison of Total Monthly Rental by Year and Property Type')\n\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "202": {
        "0": {
            "belong": "Kerry",
            "question": "Visualize a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by year.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "apartment",
                        "house"
                    ]
                ],
                "y_data": [
                    [
                        1003.86666,
                        921.8074666666666
                    ],
                    [
                        1165.33935,
                        794.43545
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2017",
                        "2018"
                    ]
                ],
                "y_data": [
                    [
                        1003.86666,
                        1165.33935
                    ],
                    [
                        921.8074667,
                        794.43545
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom dateutil import parser\n\ndf = pd.read_csv(\"./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv\")\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year_address_from'] = df['date_address_from'].dt.year\ngrouped = df.groupby(['other_details', 'year_address_from']).monthly_rental.mean().unstack()\n\nfig, ax = plt.subplots(figsize=(10, 4))\ngrouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Average Monthly Rental ($)')\nax.set_title('Average Monthly Rental by Year and Other Details')\nplt.suptitle('')\nplt.xticks(rotation=0)\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "210": {
        "0": {
            "belong": "Kerry",
            "question": "Find  date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "apartment",
                        "house"
                    ]
                ],
                "y_data": [
                    [
                        2330.7852000000003,
                        679.2988
                    ],
                    [
                        NaN,
                        2835.2129999999997
                    ],
                    [
                        2044.1059,
                        865.2615
                    ],
                    [
                        1032.8717,
                        1894.2702
                    ],
                    [
                        NaN,
                        2007.1954
                    ],
                    [
                        NaN,
                        NaN
                    ],
                    [
                        1942.2492000000002,
                        3192.7700999999997
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        2330.7852,
                        0,
                        2044.1059,
                        1032.8717,
                        0,
                        0,
                        1942.2492
                    ],
                    [
                        679.2988,
                        2835.213,
                        865.2615,
                        1894.2702,
                        2007.1954,
                        0,
                        3192.7701
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndf = pd.read_csv(\"./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv\")\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['weekday'] = df['date_address_to'].dt.day_name()\n\ngrouped = df.groupby(['other_details', 'weekday'])['monthly_rental'].sum().unstack()\ngrouped = grouped.reindex(columns=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n\nax = grouped.plot(kind='bar', stacked=False, figsize=(12, 6))\nax.set_xlabel('Other Details')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Sum of Monthly Rental by Weekday and Other Details')\nplt.suptitle('')\n\nplt.xticks(rotation=0)\nplt.legend(title='Weekday')\nplt.tight_layout()\n\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "211": {
        "0": {
            "belong": "Kerry",
            "question": "Find  date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Wrong order of the weekdays",
            "fig_data": {
                "x_data": [
                    [
                        "apartment",
                        "house"
                    ]
                ],
                "y_data": [
                    [
                        NaN,
                        1003.5977
                    ],
                    [
                        1165.3926000000001,
                        679.2988
                    ],
                    [
                        971.1246000000001,
                        798.1925249999999
                    ],
                    [
                        1032.8717,
                        947.1351
                    ],
                    [
                        NaN,
                        945.0709999999999
                    ],
                    [
                        1022.05295,
                        865.2615
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        1165.3926,
                        0,
                        1022.05295,
                        1032.8717,
                        0,
                        0,
                        971.1246
                    ],
                    [
                        679.2988,
                        945.071,
                        865.2615,
                        947.1351,
                        1003.5977,
                        0,
                        798.1925
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['weekday'] = df['date_address_to'].dt.day_name()\n\nresult = df.groupby(['other_details', 'weekday'])['monthly_rental'].mean().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nresult.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Other Details and Weekday')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Average Monthly Rental by Other Details and Weekday')\nplt.suptitle(\"\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": "If show data by weekday, month or other time series, please follow the order of the time series",
            "addExample": null
        }
    },
    "224": {
        "0": {
            "belong": "Kerry",
            "question": "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Wrong order of the weekdays",
            "fig_data": {
                "x_data": [
                    [
                        "Friday",
                        "Monday",
                        "Saturday",
                        "Sunday",
                        "Thursday",
                        "Tuesday",
                        "Wednesday"
                    ]
                ],
                "y_data": [
                    [
                        1297.807,
                        1032.8717,
                        1032.9782,
                        1007.2597,
                        644.9306,
                        1297.3186,
                        1036.8462
                    ],
                    [
                        2864.7297,
                        2559.8116,
                        1867.9596999999999,
                        2559.572,
                        756.6745,
                        865.2615,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        1032.8717,
                        1297.3186,
                        1036.8462,
                        644.9306,
                        1297.807,
                        1032.9782,
                        1007.2597
                    ],
                    [
                        2559.8116,
                        865.2615,
                        0,
                        756.6745,
                        2864.7297,
                        1867.9597,
                        2559.572
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['weekday'] = df['date_address_from'].dt.day_name()\ngrouped = df.groupby(['weekday', 'other_details']).monthly_rental.sum().unstack()\ngrouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Monthly Rental Sum by Weekday and Details')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "225": {
        "0": {
            "belong": "Kerry",
            "question": "Draw a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Wrong order of the weekdays; Rotated x-axis; X title overflow",
            "fig_data": {
                "x_data": [
                    [
                        "apartment",
                        "house"
                    ]
                ],
                "y_data": [
                    [
                        1297.807,
                        954.9099
                    ],
                    [
                        1032.8717,
                        853.2705333333333
                    ],
                    [
                        1032.9782,
                        933.9798499999999
                    ],
                    [
                        1007.2597,
                        853.1906666666667
                    ],
                    [
                        644.9306,
                        756.6745
                    ],
                    [
                        1297.3186,
                        865.2615
                    ],
                    [
                        1036.8462,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        1032.8717,
                        1297.3186,
                        1036.8462,
                        644.9306,
                        1297.807,
                        1032.9782,
                        1007.2597
                    ],
                    [
                        853.27055,
                        865.2615,
                        0,
                        756.6745,
                        954.9099,
                        933.97985,
                        853.19065
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"./visEval_dataset/databases/behavior_monitoring/Student_Addresses.csv\")\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['weekday'] = df['date_address_from'].dt.day_name()\n\navg_rental = df.groupby(['other_details', 'weekday'])['monthly_rental'].mean().unstack()\n\nfig, ax = plt.subplots(figsize=(10, 4))\navg_rental.plot(kind='bar', ax=ax)\nax.set_xlabel('Other Details')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Average Monthly Rental by Weekday and Other Details')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "291": {
        "0": {
            "belong": "Kerry",
            "question": "For the days with the 3 largest maximum wind speeds, show me the frequency of their corresponding date in the weekdays level using a bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "Thursday",
                        "Tuesday"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Tue",
                        "Thur"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['weekday'] = df['date'].dt.day_name()\ntop_wind_days = df.nlargest(3, 'max_wind_Speed_mph')\nweekday_counts = top_wind_days['weekday'].value_counts()\nweekday_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekdays')\nax.set_ylabel('Frequency')\nax.set_title('Frequency of Weekdays with Top 3 Max Wind Speeds')\nfig.suptitle('')",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis uses integer ticks. ",
            "addExample": null
        }
    },
    "293": {
        "0": {
            "belong": "Kerry",
            "question": "For the top 3 days with the largest max wind speeds, please bin the date into the day of the week and then sum the mean temperature for a bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Wrong order of the weekdays",
            "fig_data": {
                "x_data": [
                    [
                        "Thursday",
                        "Tuesday"
                    ]
                ],
                "y_data": [
                    [
                        143.0,
                        58.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Tue",
                        "Thur"
                    ]
                ],
                "y_data": [
                    [
                        58,
                        143
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['day_of_week'] = df['date'].dt.day_name()\n\ntop_3_days = df.nlargest(3, 'max_wind_Speed_mph')\nsummed_mean_temp = top_3_days.groupby('day_of_week')['mean_temperature_f'].sum()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nsummed_mean_temp.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Summed Mean Temperature (F)')\nax.set_title('Summed Mean Temperature for Top 3 Max Wind Speed Days')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "295": {
        "0": {
            "belong": "Kerry",
            "question": "For the top 3 days with the largest max wind speeds, please bin the date into day of the week and then sum the mean humidity to visualize a bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Wrong order of the weekdays",
            "fig_data": {
                "x_data": [
                    [
                        "Thursday",
                        "Tuesday"
                    ]
                ],
                "y_data": [
                    [
                        118.0,
                        52.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Tue",
                        "Thur"
                    ]
                ],
                "y_data": [
                    [
                        52,
                        118
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\n\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='max_wind_Speed_mph', ascending=False).head(3)\n\ndf['day_of_week'] = df['date'].dt.day_name()\nhumidity_by_day = df.groupby('day_of_week')['mean_humidity'].sum()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(humidity_by_day.index, humidity_by_day.values)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Total Mean Humidity')\nax.set_title('Sum of Mean Humidity for Top 3 Days with Largest Max Wind Speeds')\nfig.suptitle(\"\")\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "296": {
        "0": {
            "belong": "Kerry",
            "question": "For the top 3 days with the largest max wind speeds, please bin the date into the of the week and then compute the average of mean humidity to visualize a bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "Wrong order of the weekdays",
            "fig_data": {
                "x_data": [
                    [
                        "Thursday",
                        "Tuesday"
                    ]
                ],
                "y_data": [
                    [
                        59.0,
                        52.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Thur"
                    ]
                ],
                "y_data": [
                    [
                        52,
                        59
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['day_of_week'] = df['date'].dt.day_name()\ntop_3_days = df.nlargest(3, 'max_wind_Speed_mph')\navg_mean_humidity_by_day = top_3_days.groupby('day_of_week')['mean_humidity'].mean()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(avg_mean_humidity_by_day.index, avg_mean_humidity_by_day.values)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Average Mean Humidity')\nax.set_title('Average Mean Humidity for Top 3 Days with Largest Max Wind Speeds')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "312": {
        "0": {
            "belong": "Kerry",
            "question": "Give me the proportion of end stations for the trips with the three oldest id using a pie chart.",
            "hardness": "Hard",
            "chart": "Pie",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "No explicit indication of number limitation",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "Harry Bridges Plaza (Ferry Building)",
                        "San Francisco Caltrain 2 (330 Townsend)"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/trip.csv')\noldest_ids = df.nsmallest(3, 'id')\nend_station_counts = oldest_ids['end_station_name'].value_counts()\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax.pie(end_station_counts, labels=end_station_counts.index, autopct='%1.1f%%')\nplt.title('Proportion of End Stations for Trips with Oldest IDs')\nplt.show()",
            "addRule": "If there is a quantity limitation in the question, you must show it in the title or the chart.",
            "addExample": null
        }
    },
    "516": {
        "0": {
            "belong": "Kerry",
            "question": "What are the first names of all employees that are professors ordered by date of birth, and count them by a bar chart",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "???Sorting by date of birth",
            "fig_data": {
                "x_data": [
                    [
                        "Robert",
                        "Ronald",
                        "Arnelle",
                        "Anne",
                        "Doreen",
                        "Annelise",
                        "Herman",
                        "Willa",
                        "Ismael",
                        "Van",
                        "Hermine",
                        "Gerald",
                        "Carlos",
                        "George",
                        "Preston",
                        "Melanie",
                        "James",
                        "Ross",
                        "Peter",
                        "Ralph"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Anne",
                        "Annelise",
                        "Arnelle",
                        "Carlos",
                        "Doreen",
                        "George",
                        "Gerald",
                        "Herman",
                        "Hermine",
                        "Ismael",
                        "James",
                        "Melanie",
                        "Peter",
                        "Preston",
                        "Ralph",
                        "Robert",
                        "Ronald",
                        "Ross",
                        "Van",
                        "Willa"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2,
                        2,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/college_1/employee.csv')\n\ndf['EMP_DOB'] = pd.to_datetime(df['EMP_DOB'])\nprofessors = df[df['EMP_JOBCODE'] == 'PROF'].sort_values('EMP_DOB')\nprofessor_counts = professors['EMP_FNAME'].value_counts()\n\nprofessor_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('First Names of Professors')\nax.set_ylabel('Count')\nax.set_title('Count of Professors by First Name')\nfig.suptitle('')",
            "addRule": null,
            "addExample": true
        }
    },
    "659": {
        "0": {
            "belong": "Kerry",
            "question": "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless subtitle, Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "Smith",
                        "Schmidt",
                        "Jones",
                        "Cheng",
                        "Nelson",
                        "Kim",
                        "Apap",
                        "Prater",
                        "Lee"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Apap",
                        "Cheng",
                        "Jones",
                        "Kim",
                        "Lee",
                        "Nelson",
                        "Prater",
                        "Schmidt",
                        "Smith"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/college_3/STUDENT.csv')\ndf_female = df[df['Sex'] == 'F'].sort_values(by='Age', ascending=False)\ncount_last_name = df_female['LName'].value_counts()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ncount_last_name.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Count')\nax.set_title('Count of Female Students by Last Name in Descending Order of Age')\nfig.suptitle('{}')\n\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": "If subtitle is meaningless, remove it.",
            "addExample": null
        }
    },
    "778": {
        "0": {
            "belong": "Kerry",
            "question": "Give me a group line chart showing the number of days with max humidity higher than 80 in different area each year.",
            "hardness": "Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless X axis decimal coordinates",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        2013,
                        2014,
                        2015
                    ]
                ],
                "y_data": [
                    [
                        65,
                        259,
                        182
                    ],
                    [
                        102,
                        310,
                        207
                    ],
                    [
                        76,
                        285,
                        216
                    ],
                    [
                        86,
                        243,
                        209
                    ],
                    [
                        91,
                        289,
                        175
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf_filtered = df[df['max_humidity'] > 80]\ndays_count = df_filtered.groupby(['year', 'zip_code']).size().reset_index(name='count')\n\nplt.figure(figsize=(10, 6))\nfor key, grp in days_count.groupby(['zip_code']):\n    plt.plot(grp['year'], grp['count'], label=f'ZIP {key}')\n\nplt.xlabel('Year')\nplt.ylabel('Number of Days with Max Humidity > 80')\nplt.title('Days with High Humidity by Year and Area')\nplt.legend(title='ZIP Code')\nplt.show()",
            "addRule": "If axis data is year, month, or other indivisible series, make sure uses integer and do not divide them.",
            "addExample": null
        }
    },
    "1007": {
        "0": {
            "belong": "Kerry",
            "question": "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a pie chart.",
            "hardness": "Hard",
            "chart": "Pie",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "show the number of products, not the portion",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "Clothes",
                        "Hardware"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        8
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\n\nfiltered_df = df[(df['product_price'] > 1000) | (df['product_price'] < 500)]\ncounts = filtered_df['product_type_code'].value_counts()\n\nfig, ax = plt.subplots(figsize=(10, 4))\nax.pie(counts, labels=counts.index, autopct='%1.1f%%')\nax.set_title('Distribution of Products by Type and Price Range')\nfig.suptitle('')\nplt.show()",
            "addRule": "If the question asks for the number or count in a pie chart, show exact number, not the portion.",
            "addExample": null
        }
    },
    "1008": {
        "0": {
            "belong": "Kerry",
            "question": "Show the number of products with price higher than 1000 or lower than 500 for each product name in a pie chart.",
            "hardness": "Hard",
            "chart": "Pie",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "show the number of products, not the portion",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "Apple",
                        "Sony",
                        "gucci",
                        "jcrew"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        3,
                        2,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\n\nfiltered_df = df[(df['product_price'] > 1000) | (df['product_price'] < 500)]\nproduct_counts = filtered_df['product_name'].value_counts()\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nax.pie(product_counts, labels=product_counts.index, autopct='%1.1f%%', startangle=140)\nax.set_xlabel('Product Name')\nax.set_ylabel('Percentage of Products')\nplt.title('Distribution of Products with Price > 1000 or < 500')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1482": {
        "0": {
            "belong": "Kerry",
            "question": "List the number of games in each season and group by home team in a group line chart.",
            "hardness": "Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Incomplete data display; Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        2007,
                        2008,
                        2009,
                        2010,
                        2011,
                        2012,
                        2013
                    ]
                ],
                "y_data": [
                    [
                        NaN,
                        2.0,
                        1.0,
                        1.0,
                        1.0,
                        3.0,
                        1.0
                    ],
                    [
                        2.0,
                        1.0,
                        2.0,
                        1.0,
                        1.0,
                        2.0,
                        1.0
                    ],
                    [
                        1.0,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2007",
                        "2008",
                        "2009",
                        "2010",
                        "2011",
                        "2012",
                        "2013"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        2,
                        1,
                        1,
                        1,
                        3,
                        1
                    ],
                    [
                        2,
                        1,
                        2,
                        1,
                        1,
                        2,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/game_injury/game.csv')\ngrouped_df = df.groupby(['Season', 'Home_team']).size().unstack()\ngrouped_df.plot(ax=ax)\nax.set_xlabel('Season')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games in Each Season Grouped by Home Team')\nfig.suptitle('')",
            "addRule": "Make sure axis cover whole the data range. If there's a zero in data, The 0 on the coordinate axis should be displayed.",
            "addExample": null
        }
    },
    "1556": {
        "0": {
            "belong": "Kerry",
            "question": "For all employees who have the letters D or S in their first name, visualize a line chart about the change of  salary over  hire_date .",
            "hardness": "Hard",
            "chart": "Line",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "Incorrectly considered the case sensitivity , X label overlapped",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "1987-06-17",
                        "1987-09-30",
                        "1987-08-24",
                        "1987-07-01",
                        "1987-08-04",
                        "1987-08-25",
                        "1987-08-07",
                        "1987-08-19",
                        "1987-06-20",
                        "1987-06-26",
                        "1987-08-31",
                        "1987-07-08",
                        "1987-08-09",
                        "1987-08-15",
                        "1987-06-29",
                        "1987-06-28",
                        "1987-08-16",
                        "1987-08-17",
                        "1987-06-30",
                        "1987-08-21",
                        "1987-07-10",
                        "1987-09-28",
                        "1987-08-22",
                        "1987-09-04",
                        "1987-08-29",
                        "1987-06-22",
                        "1987-06-24",
                        "1987-09-09",
                        "1987-09-10",
                        "1987-09-17",
                        "1987-07-24",
                        "1987-07-20",
                        "1987-07-25",
                        "1987-09-05",
                        "1987-09-19",
                        "1987-07-02",
                        "1987-07-29",
                        "1987-07-03",
                        "1987-07-04",
                        "1987-09-08",
                        "1987-07-30",
                        "1987-09-23",
                        "1987-09-24",
                        "1987-07-18",
                        "1987-07-27",
                        "1987-09-16",
                        "1987-07-14",
                        "1987-07-15"
                    ]
                ],
                "y_data": [
                    [
                        24000,
                        12000,
                        11500,
                        11000,
                        11000,
                        10000,
                        9500,
                        9500,
                        9000,
                        9000,
                        8800,
                        8200,
                        8000,
                        8000,
                        7800,
                        7700,
                        7500,
                        7000,
                        6900,
                        6800,
                        6500,
                        6500,
                        6400,
                        6200,
                        6100,
                        4800,
                        4200,
                        4200,
                        4100,
                        4000,
                        3600,
                        3300,
                        3200,
                        3200,
                        3200,
                        3100,
                        3100,
                        2900,
                        2800,
                        2800,
                        2600,
                        2600,
                        2600,
                        2500,
                        2500,
                        2500,
                        2400,
                        2200
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"./visEval_dataset/databases/hr_1/employees.csv\")\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_df = df[df['FIRST_NAME'].str.contains(\"D|S\")]\nsorted_df = filtered_df.sort_values('HIRE_DATE')\nplt.plot(sorted_df['HIRE_DATE'], sorted_df['SALARY'])\nplt.xlabel('Hire Date')\nplt.ylabel('Salary')\nplt.title('Salary Change Over Time for Employees with D or S in First Name')\nplt.suptitle('')\nplt.show()",
            "addRule": "If axis labels are too crowded, you can rotate the label for a better arrangement.",
            "addExample": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"./visEval_dataset/databases/hr_1/employees.csv\")\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_df = df[df['FIRST_NAME'].str.contains(\"D|S|d|s\")]\nsorted_df = filtered_df.sort_values('HIRE_DATE')\nplt.plot(sorted_df['HIRE_DATE'], sorted_df['SALARY'])\nplt.xlabel('Hire Date')\nplt.ylabel('Salary')\nplt.title('Salary Change Over Time for Employees with D or S in First Name')\nplt.suptitle('')\nplt.show()"
        }
    },
    "1563": {
        "0": {
            "belong": "Dewei",
            "question": "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the average of salary , and group by attribute job_id in a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "use the same color for data display",
            "fig_data": {
                "x_data": [
                    [
                        "AC_MGR",
                        "AD_PRES",
                        "FI_ACCOUNT",
                        "HR_REP",
                        "IT_PROG",
                        "PU_CLERK",
                        "PU_MAN",
                        "SA_REP",
                        "SH_CLERK",
                        "ST_CLERK",
                        "ST_MAN"
                    ]
                ],
                "y_data": [
                    [
                        12000.0,
                        24000.0,
                        9000.0,
                        6500.0,
                        4500.0,
                        2850.0,
                        11000.0,
                        7550.0,
                        3100.0,
                        2700.0,
                        6500.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "AC_MGR",
                        "AD_PRES",
                        "FI_ACCOUNT",
                        "HR_REP",
                        "IT_PROG",
                        "PU_CLERK",
                        "PU_MAN",
                        "SA_MAN",
                        "SA_REP",
                        "SH_CLERK",
                        "ST_CLERK",
                        "ST_MAN"
                    ]
                ],
                "y_data": [
                    [
                        12000,
                        24000,
                        7850,
                        6500,
                        6000,
                        2933.3333333333335,
                        11000,
                        11000,
                        8100,
                        3244.4444444444443,
                        2822.222222222222,
                        7350
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.contains('D|S')]\ngrouped_df = filtered_df.groupby('JOB_ID').agg({'SALARY': 'mean'}).reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(grouped_df['JOB_ID'], grouped_df['SALARY'])\nplt.xlabel('Job ID')\nplt.ylabel('Average Salary')\nplt.title('Distribution of Average Salary by Job ID (Names with D or S)')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "1574": {
        "0": {
            "belong": "Dewei",
            "question": "For all employees who have the letters D or S in their first name, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
            "hardness": "Hard",
            "chart": "Scatter",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "nvBench data were wrong",
            "fig_data": {
                "x_data": [
                    [
                        0,
                        5,
                        7,
                        9,
                        14,
                        16,
                        17,
                        23,
                        28,
                        38,
                        51,
                        61,
                        63,
                        65,
                        66,
                        73,
                        92,
                        94,
                        98,
                        99,
                        103,
                        105
                    ]
                ],
                "y_data": [
                    [
                        100,
                        105,
                        107,
                        109,
                        114,
                        116,
                        117,
                        123,
                        128,
                        138,
                        151,
                        161,
                        163,
                        165,
                        166,
                        173,
                        192,
                        194,
                        198,
                        199,
                        203,
                        205
                    ],
                    [
                        "Steven",
                        "David",
                        "Diana",
                        "Daniel",
                        "Den",
                        "Shelli",
                        "Sigal",
                        "Shanta",
                        "Steven",
                        "Stephen",
                        "David",
                        "Sarath",
                        "Danielle",
                        "David",
                        "Sundar",
                        "Sundita",
                        "Sarah",
                        "Samuel",
                        "Donald",
                        "Douglas",
                        "Susan",
                        "Shelley"
                    ],
                    [
                        "King",
                        "Austin",
                        "Lorentz",
                        "Faviet",
                        "Raphaely",
                        "Baida",
                        "Tobias",
                        "Vollman",
                        "Markle",
                        "Stiles",
                        "Bernstein",
                        "Sewall",
                        "Greene",
                        "Lee",
                        "Ande",
                        "Kumar",
                        "Bell",
                        "McCain",
                        "OConnell",
                        "Grant",
                        "Mavris",
                        "Higgins"
                    ],
                    [
                        "SKING",
                        "DAUSTIN",
                        "DLORENTZ",
                        "DFAVIET",
                        "DRAPHEAL",
                        "SBAIDA",
                        "STOBIAS",
                        "SVOLLMAN",
                        "SMARKLE",
                        "SSTILES",
                        "DBERNSTE",
                        "SSEWALL",
                        "DGREENE",
                        "DLEE",
                        "SANDE",
                        "SKUMAR",
                        "SBELL",
                        "SMCCAIN",
                        "DOCONNEL",
                        "DGRANT",
                        "SMAVRIS",
                        "SHIGGINS"
                    ],
                    [
                        "515.123.4567",
                        "590.423.4569",
                        "590.423.5567",
                        "515.124.4169",
                        "515.127.4561",
                        "515.127.4563",
                        "515.127.4564",
                        "650.123.4234",
                        "650.124.1434",
                        "650.121.2034",
                        "011.44.1344.345268",
                        "011.44.1345.529268",
                        "011.44.1346.229268",
                        "011.44.1346.529268",
                        "011.44.1346.629268",
                        "011.44.1343.329268",
                        "650.501.1876",
                        "650.501.3876",
                        "650.507.9833",
                        "650.507.9844",
                        "515.123.7777",
                        "515.123.8080"
                    ],
                    [
                        "1987-06-17",
                        "1987-06-22",
                        "1987-06-24",
                        "1987-06-26",
                        "1987-07-01",
                        "1987-07-03",
                        "1987-07-04",
                        "1987-07-10",
                        "1987-07-15",
                        "1987-07-25",
                        "1987-08-07",
                        "1987-08-17",
                        "1987-08-19",
                        "1987-08-21",
                        "1987-08-22",
                        "1987-08-29",
                        "1987-09-17",
                        "1987-09-19",
                        "1987-09-23",
                        "1987-09-24",
                        "1987-09-28",
                        "1987-09-30"
                    ],
                    [
                        "AD_PRES",
                        "IT_PROG",
                        "IT_PROG",
                        "FI_ACCOUNT",
                        "PU_MAN",
                        "PU_CLERK",
                        "PU_CLERK",
                        "ST_MAN",
                        "ST_CLERK",
                        "ST_CLERK",
                        "SA_REP",
                        "SA_REP",
                        "SA_REP",
                        "SA_REP",
                        "SA_REP",
                        "SA_REP",
                        "SH_CLERK",
                        "SH_CLERK",
                        "SH_CLERK",
                        "SH_CLERK",
                        "HR_REP",
                        "AC_MGR"
                    ],
                    [
                        24000,
                        4800,
                        4200,
                        9000,
                        11000,
                        2900,
                        2800,
                        6500,
                        2200,
                        3200,
                        9500,
                        7000,
                        9500,
                        6800,
                        6400,
                        6100,
                        4000,
                        3200,
                        2600,
                        2600,
                        6500,
                        12000
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.25,
                        0.25,
                        0.15,
                        0.1,
                        0.1,
                        0.1,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0,
                        103,
                        103,
                        108,
                        100,
                        114,
                        114,
                        100,
                        120,
                        123,
                        145,
                        146,
                        147,
                        147,
                        147,
                        148,
                        123,
                        123,
                        124,
                        124,
                        101,
                        101
                    ],
                    [
                        90,
                        60,
                        60,
                        100,
                        30,
                        30,
                        30,
                        50,
                        50,
                        50,
                        80,
                        80,
                        80,
                        80,
                        80,
                        80,
                        50,
                        50,
                        50,
                        50,
                        40,
                        110
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        24000,
                        12000,
                        11500,
                        11000,
                        11000,
                        10000,
                        9500,
                        9500,
                        9000,
                        9000,
                        8800,
                        8200,
                        8000,
                        8000,
                        7800,
                        7700,
                        7500,
                        7000,
                        6900,
                        6800,
                        6500,
                        6500,
                        6400,
                        6200,
                        6100,
                        4800,
                        4200,
                        4200,
                        4100,
                        4000,
                        3600,
                        3300,
                        3200,
                        3200,
                        3200,
                        3100,
                        3100,
                        2900,
                        2800,
                        2800,
                        2600,
                        2600,
                        2600,
                        2500,
                        2500,
                        2500,
                        2400,
                        2200
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0.25,
                        0,
                        0.3,
                        0.2,
                        0.25,
                        0.15,
                        0,
                        0,
                        0.25,
                        0,
                        0.2,
                        0.3,
                        0,
                        0,
                        0.3,
                        0.25,
                        0,
                        0.1,
                        0,
                        0,
                        0.1,
                        0.1,
                        0.1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.contains('D|S', regex=True)]\nplt.figure()\nplt.scatter(filtered_df['SALARY'], filtered_df['COMMISSION_PCT'])\nplt.title('Correlation Between Salary and Commission Percentage')\nplt.xlabel('Salary')\nplt.ylabel('Commission Percentage')\nplt.suptitle('')\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "1580": {
        "0": {
            "belong": "Dewei",
            "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by month.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "the axis shows year and month but the query only asks about month",
            "fig_data": {
                "x_data": [
                    [
                        "1987-06",
                        "1987-07",
                        "1987-08",
                        "1987-09",
                        "1987-10"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        3,
                        18,
                        4,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "June",
                        "July",
                        "Aug",
                        "Sept",
                        "Oct"
                    ]
                ],
                "y_data": [
                    [
                        14,
                        31,
                        31,
                        29,
                        1
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_data = df[(df['SALARY'].between(8000, 12000)) & (df['COMMISSION_PCT'].notna() | (df['DEPARTMENT_ID'] != 40))]\nhire_date_counts = filtered_data['HIRE_DATE'].dt.to_period('M').value_counts().sort_index()\nplt.figure(figsize=(10, 6))\nhire_date_counts.plot(kind='bar')\nplt.xlabel('Hire Date (Month and Year)')\nplt.ylabel('Number of Hires')\nplt.title('Distribution of Hire Dates for Selected Employees')\nplt.tight_layout()\nplt.suptitle('')\nplt.show()\n",
            "addRule": "Only keep month figures when the dates are in the same year",
            "addExample": null
        }
    },
    "1807": {
        "0": {
            "belong": "Dewei",
            "question": "For employees with first names that end with the letter 'm', groups and counts the first name to visualize a pie graph.",
            "hardness": "Hard",
            "chart": "Pie",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "overlap",
            "fig_data": {
                "x_data": [
                    [
                        "William",
                        "Adam",
                        "Payam"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Adam",
                        "Payam",
                        "William"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['FIRST_NAME'].str.endswith('m')]\ncount_series = filtered_df['FIRST_NAME'].value_counts()\ncount_series.plot(kind='pie', autopct='%1.1f%%', startangle=90)\nplt.title('Distribution of First Names Ending with m')\nplt.ylabel('Count of Employees')\nplt.xlabel('First Names')\nplt.gca().set_aspect('equal')\nplt.gcf().suptitle('')\nplt.show()\n",
            "addRule": "make sure the labels do not overlap with any axis",
            "addExample": null
        }
    },
    "1831": {
        "0": {
            "belong": "Dewei",
            "question": "For those employees whose first name does not contain the letter M, sum their salary by binning the hire date into the day of week interval for visualizing a bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                ],
                "y_data": [
                    [
                        75800,
                        83400,
                        124400,
                        101000,
                        92000,
                        84400,
                        86200
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        75800,
                        68100,
                        116200,
                        70400,
                        92000,
                        78700,
                        72300
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/hr_1/employees.csv')\n# The following codes are generated by LLM:\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_df = df[~df['FIRST_NAME'].str.contains('M')]\nfiltered_df['HIRE_DAY'] = filtered_df['HIRE_DATE'].dt.day_name()\nsalary_sum_by_day = filtered_df.groupby('HIRE_DAY')['SALARY'].sum().reindex(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n)\nplt.figure(figsize=(10,6))\nsalary_sum_by_day.plot(kind='bar')\nplt.title('Total Salary of Employees Hired by Day of the Week (Excluding First Name with M)')\nplt.xlabel('Day of the Week')\nplt.ylabel('Total Salary')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "2615": {
        "0": {
            "belong": "Dewei",
            "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check', bin the payment date by month and count them by a bar chart",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "the axis shows year and month but the query only asks about month",
            "fig_data": {
                "x_data": [
                    [
                        "2018-02",
                        "2018-03"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        13
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Feb",
                        "Mar"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        13
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/products_for_hire/payments.csv')\ndf['payment_date'] = pd.to_datetime(df['payment_date'])\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\nmonthly_counts = filtered_df['payment_date'].dt.to_period('M').value_counts().sort_index()\nmonthly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Month')\nax.set_ylabel('Payment Count')\nax.set_title('Payments with Amount Paid > 300 or Payment Type \"Check\" by Month')\nfig.suptitle('')\nplt.show()",
            "addRule": "Only keep month figures when the dates are in the same year",
            "addExample": null
        }
    },
    "2617": {
        "0": {
            "belong": "Dewei",
            "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart",
            "hardness": "Hard",
            "chart": "Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "integer number was treated as float number",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "2018-02-27",
                        "2018-03-02",
                        "2018-03-03",
                        "2018-03-09",
                        "2018-03-12",
                        "2018-03-17",
                        "2018-03-19",
                        "2018-03-22",
                        "2018-03-23"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        3,
                        1,
                        2,
                        2,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/products_for_hire/payments.csv')\n# The following codes are generated by LLM:\ndf['payment_date'] = pd.to_datetime(df['payment_date'], errors='coerce')\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\ncount_by_date = filtered_df['payment_date'].dt.date.value_counts().sort_index()\nplt.figure(figsize=(10, 6))\nplt.plot(count_by_date.index, count_by_date.values, marker='o', linestyle='-')\nplt.xlabel('Payment Date')\nplt.ylabel('Number of Payments')\nplt.title('Number of Payments Over 300 or Payment Type Check by Date')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
            "addExample": null
        }
    },
    "2656": {
        "0": {
            "belong": "Dewei",
            "question": "Show the countries that have managers of age above 50 or below 46, and count them by a pie chart",
            "hardness": "Hard",
            "chart": "Pie",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "Australia",
                        "England",
                        "United States"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/railway/manager.csv')\n# The following codes are generated by LLM:\ncondition = (df['Age'] > 50) | (df['Age'] < 46)\nfiltered_df = df[condition]\ncountry_counts = filtered_df['Country'].value_counts()\nplt.figure(figsize=(8, 8))\nplt.pie(country_counts, labels=country_counts.index, autopct='%1.1f%%', startangle=140)\nplt.title('Distribution of Managers from Different Countries (Age > 50 or < 46)')\nplt.xlabel('Countries')\nplt.ylabel('Manager Count')\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "2657": {
        "0": {
            "belong": "Dewei",
            "question": "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "integer number was treated as float number",
            "fig_data": {
                "x_data": [
                    [
                        "United States",
                        "England",
                        "Australia"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Australia",
                        "England",
                        "United States"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/railway/manager.csv')\nage_filtered_df = df[(df['Age'] > 50) | (df['Age'] < 46)]\ncountry_counts = age_filtered_df['Country'].value_counts()\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Managers')\nax.set_title('Country-wise Count of Managers (Age > 50 or Age < 46)')\nfig.suptitle('{}')\nplt.show()",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
            "addExample": null
        }
    },
    "2750": {
        "0": {
            "belong": "Dewei",
            "question": "What is the total number of captains in each rank and class? Let class as X-axis, and categorize by rank with a stacked bar chart.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "integer number was treated as float number",
            "fig_data": {
                "x_data": [
                    [
                        "Armed schooner",
                        "Cutter",
                        "Frigate",
                        "Sloop-of-war",
                        "Third-rate ship of the line"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Armed schooner",
                        "Cutter",
                        "Frigate",
                        "Sloop-of-war",
                        "Third-rate ship of the line"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/ship_1/captain.csv')\n# The following codes are generated by LLM:\ndf['Rank'] = df['Rank'].astype('category')\ndf['Class'] = df['Class'].astype('category')\nrank_class_counts = df.groupby(['Class', 'Rank']).size().unstack(fill_value=0)\nrank_class_counts.plot(kind='bar', stacked=True, figsize=(10, 6))\nplt.title('Total Number of Captains by Rank and Class')\nplt.xlabel('Class')\nplt.ylabel('Number of Captains')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
            "addExample": null
        }
    },
    "2850": {
        "0": {
            "belong": "Dewei",
            "question": "What are the top 5 countries by number of invoices and how many do they have. Plot them as bar chart.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": true,
            "evaluation": "order is misinterpreted",
            "fig_data": {
                "x_data": [
                    [
                        "USA",
                        "Canada",
                        "France",
                        "Brazil",
                        "Germany"
                    ]
                ],
                "y_data": [
                    [
                        91,
                        56,
                        35,
                        35,
                        28
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "USA",
                        "Canada",
                        "Brazil",
                        "France",
                        "Germany"
                    ]
                ],
                "y_data": [
                    [
                        91,
                        56,
                        35,
                        35,
                        28
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ntop_countries = df['billing_country'].value_counts().head(5)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue')\nplt.xlabel('Country')\nplt.ylabel('Number of Invoices')\nplt.title('Top 5 Countries by Number of Invoices')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": "identify and sort by the exact tag mentioned by the user",
            "addExample": null
        }
    },
    "2851": {
        "0": {
            "belong": "Dewei",
            "question": "Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Chile",
                        "Hungary",
                        "Ireland",
                        "Czech Republic",
                        "Austria"
                    ]
                ],
                "y_data": [
                    [
                        6.659999999999999,
                        6.517142857142857,
                        6.517142857142857,
                        6.445714285714287,
                        6.088571428571428
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Chile",
                        "Hungary",
                        "Ireland",
                        "Czech Republic",
                        "Austria",
                        "Finland",
                        "Netherlands",
                        "India",
                        "USA",
                        "Norway"
                    ]
                ],
                "y_data": [
                    [
                        6.659999999999998,
                        6.517142857142857,
                        6.517142857142857,
                        6.445714285714287,
                        6.088571428571428,
                        5.945714285714287,
                        5.802857142857143,
                        5.789230769230769,
                        5.747912087912091,
                        5.659999999999998
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ndf['invoice_date'] = pd.to_datetime(df['invoice_date'])\ntop_countries = df.groupby('billing_country')['total'].mean().nlargest().reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(top_countries['billing_country'], top_countries['total'], color='skyblue')\nplt.xlabel('Country')\nplt.ylabel('Average Invoice Size')\nplt.title('Top Countries by Average Invoice Size')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "2857": {
        "0": {
            "belong": "Dewei",
            "question": "Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "make no sense to have a subtitle {}",
            "fig_data": {
                "x_data": [
                    [
                        "USA",
                        "Canada",
                        "France",
                        "Brazil",
                        "Germany",
                        "United Kingdom",
                        "Czech Republic",
                        "Portugal"
                    ]
                ],
                "y_data": [
                    [
                        523.06,
                        303.96,
                        195.1,
                        190.1,
                        156.48,
                        112.86,
                        90.24000000000001,
                        77.24
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "USA",
                        "Canada",
                        "France",
                        "Brazil",
                        "Germany",
                        "United Kingdom",
                        "Czech Republic",
                        "Portugal"
                    ]
                ],
                "y_data": [
                    [
                        523.0600000000003,
                        303.95999999999987,
                        195.09999999999997,
                        190.1,
                        156.48,
                        112.86,
                        90.24,
                        77.23999999999998
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/store_1/invoices.csv')\n# The following codes are generated by LLM:\ncountry_totals = df.groupby('billing_country')['total'].sum()\ntop_countries = country_totals.nlargest(8)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue')\nplt.title('Top 8 Countries by Total Invoice Size')\nplt.xlabel('Country')\nplt.ylabel('Total Invoice Size')\nplt.suptitle('{}')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": "add subtitle only if necessary, make sure it is right subtitle",
            "addExample": null
        }
    },
    "2998": {
        "0": {
            "belong": "Dewei",
            "question": "A bar chart for what are the number of the dates of transactions with at least 100 share count or amount bigger than 100? Bin date by weekday.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "integer number was treated as float number",
            "fig_data": {
                "x_data": [
                    [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        3,
                        3,
                        0,
                        3,
                        1,
                        3
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thur",
                        "Fri",
                        "Sat",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        3,
                        3,
                        0,
                        3,
                        1,
                        3
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/tracking_share_transactions/transactions.csv')\ndf['date_of_transaction'] = pd.to_datetime(df['date_of_transaction'])\nfiltered_df = df[(df['share_count'] >= 100) | (df['amount_of_transaction'] > 100)]\nfiltered_df['weekday'] = filtered_df['date_of_transaction'].dt.day_name()\ncounts = filtered_df['weekday'].value_counts().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], fill_value=0)\ncounts.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of Week')\nax.set_ylabel('Number of Transactions')\nax.set_title('Transactions by Day of Week (Share Count greater than 100 or Amount > 100)')\nplt.suptitle('')\nplt.show()",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
            "addExample": null
        }
    },
    "3222": {
        "0": {
            "belong": "Dewei",
            "question": "A bar chart shows the number of appellations whose score is higher than 93, and ordered by Name.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": "nvBench result was wrong",
            "fig_data": {
                "x_data": [
                    [
                        "Amador County",
                        "Anderson Valley",
                        "Bennett Valley",
                        "Carneros",
                        "Chalk Hill",
                        "Dry Creek Valley",
                        "Napa Valley",
                        "Paso Robles",
                        "Russian River Valley",
                        "Rutherford",
                        "Santa Lucia Highlands",
                        "Santa Maria Valley",
                        "Sonoma Coast",
                        "Sonoma County",
                        "Sonoma Valley",
                        "St. Helena",
                        "Sta. Rita Hills"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        14,
                        2,
                        11,
                        1,
                        6,
                        1,
                        5,
                        6,
                        2,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Amador County",
                        "Anderson Valley",
                        "Bennett Valley",
                        "Carneros",
                        "Chalk Hill",
                        "Dry Creek Valley",
                        "Napa Valley",
                        "Paso Robles",
                        "Russian River Valley",
                        "Rutherford",
                        "Santa Lucia Highlands",
                        "Santa Maria Valley",
                        "Sonoma Coast",
                        "Sonoma County",
                        "Sonoma Valley",
                        "St. Helena",
                        "Sta. Rita Hills"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        14,
                        2,
                        11,
                        1,
                        6,
                        1,
                        5,
                        6,
                        2,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['Score'] > 93]\nappellation_counts = filtered_df['Appelation'].value_counts().sort_index()\nplt.figure(figsize=(12, 6))\nappellation_counts.plot(kind='bar')\nplt.xlabel('Appellation')\nplt.ylabel('Number of Wines')\nplt.title('Number of Appellations with Score Higher Than 93')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "3227": {
        "0": {
            "belong": "Dewei",
            "question": "For those wines whose price is bigger than 100, group by grape, count their total number of each year and sort by year in asc in a bar chart.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": false,
            "isStyleCorrect": true,
            "evaluation": "wrong chart type, should be several bars instead of one single bar",
            "fig_data": {
                "x_data": [
                    [
                        "Cabernet Sauvingnon",
                        "Grenache",
                        "Syrah"
                    ]
                ],
                "y_data": [
                    [
                        4.0,
                        1.0,
                        1.0
                    ],
                    [
                        11.0,
                        1.0,
                        1.0
                    ],
                    [
                        2.0,
                        0.0,
                        0.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2006",
                        "2007",
                        "2008"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        11,
                        2
                    ],
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\nfiltered_df = df[df['Price'] > 100]\ngrouped = filtered_df.groupby(['Grape', 'Year']).size().unstack().fillna(0)\ngrouped = grouped.sort_index(axis=1)\nax = grouped.plot(kind='bar', stacked=True, figsize=(12, 8))\nax.set_xlabel('Grape Variety')\nax.set_ylabel('Number of Wines')\nax.set_title('Wine Counts by Grape Variety and Year for Wines Priced Over $100')\nplt.suptitle('')\nplt.show()\n",
            "addRule": "choose right chart type which can show sorting order",
            "addExample": null
        }
    },
    "3229": {
        "0": {
            "belong": "Dewei",
            "question": "A bar chart listing the number of wines whose price is bigger than 100 ordered by year.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "the x-axis labels do not need roation",
            "fig_data": {
                "x_data": [
                    [
                        2006,
                        2007,
                        2008
                    ]
                ],
                "y_data": [
                    [
                        6,
                        13,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2006",
                        "2007",
                        "2008"
                    ]
                ],
                "y_data": [
                    [
                        6,
                        13,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/wine_1/WINE.csv')\n# The following codes are generated by LLM:\ndf_filtered = df[df['Price'] > 100]\ndf_grouped = df_filtered.groupby('Year').size()\ndf_grouped.plot(kind='bar', title='Number of Wines with Price > 100 by Year')\nplt.xlabel('Year')\nplt.ylabel('Number of Wines')\nplt.suptitle('')\nplt.show()\n",
            "addRule": "Only rotate labels when there is no enough space",
            "addExample": null
        }
    },
    "1484@x_name@ASC": {
        "0": {
            "belong": "Dewei",
            "question": "List the number of games in each season and group by away team in a group line chart, and order in asc by the X-axis please.",
            "hardness": "Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "integer number are treated as float-point number",
            "fig_data": {
                "x_data": [
                    [
                        2007,
                        2008,
                        2009,
                        2010,
                        2011,
                        2012,
                        2013
                    ]
                ],
                "y_data": [
                    [
                        0.0,
                        0.0,
                        2.0,
                        1.0,
                        1.0,
                        2.0,
                        1.0
                    ],
                    [
                        1.0,
                        2.0,
                        1.0,
                        1.0,
                        1.0,
                        3.0,
                        1.0
                    ],
                    [
                        2.0,
                        1.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2007",
                        "2008",
                        "2009",
                        "2010",
                        "2011",
                        "2012",
                        "2013"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        2,
                        1,
                        1,
                        2,
                        1
                    ],
                    [
                        1,
                        2,
                        1,
                        1,
                        1,
                        3,
                        1
                    ],
                    [
                        2,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\ndf['Season'] = df['Season'].astype('int64')\n# Group by Season and Away_team, and count the number of games\ngrouped_df = df.groupby(['Season', 'Away_team']).size().reset_index(name='Game_Count')\n# Pivot the table to have Seasons on the x-axis and Away_team as columns\npivot_df = grouped_df.pivot(index='Season', columns='Away_team', values='Game_Count').fillna(0)\npivot_df.sort_index(inplace=True)\npivot_df.plot(kind='line', marker='o')\nplt.xlabel('Season')\nplt.ylabel('Number of Games')\nplt.title('Number of Games per Season by Away Team')\nplt.suptitle('')\nplt.show()\n",
            "addRule": "If y-axis (or x-axis) data come from a counter column or naturally integer column, make sure that axis  uses integer ticks.",
            "addExample": null
        }
    },
    "1487@y_name@ASC": {
        "0": {
            "belong": "Dewei",
            "question": "Stacked bar chart of how many away team for with each Home_team in each away team, rank from low to high by the y-axis.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "x-axis and y-axis are switched",
            "fig_data": {
                "x_data": [
                    [
                        "Quruvchi",
                        "Bunyodkor",
                        "Pakhtakor"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        7
                    ],
                    [
                        1,
                        9,
                        0
                    ],
                    [
                        0,
                        0,
                        3
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Quruvchi",
                        "Bunyodkor",
                        "Pakhtakor"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        9
                    ],
                    [
                        3,
                        7,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\nhome_team_count = df.groupby(['Home_team', 'Away_team']).size().unstack(fill_value=0)\nhome_team_count.sort_values(by=home_team_count.columns.tolist(), inplace=True)\nhome_team_count.plot(kind='barh', stacked=True)\nplt.xlabel('Number of Matches')\nplt.ylabel('Home Teams')\nplt.title('Number of Matches by Home and Away Teams')\nplt.suptitle('')\nplt.show()\n",
            "addRule": "for bar plot, put bars on x-axis",
            "addExample": null
        }
    },
    "1488@x_name@DESC": {
        "0": {
            "belong": "Dewei",
            "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team, and I want to list x-axis in descending order.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "the x-axis labels do not need roation",
            "fig_data": {
                "x_data": [
                    [
                        "Quruvchi",
                        "Pakhtakor",
                        "Bunyodkor"
                    ]
                ],
                "y_data": [
                    [
                        NaN,
                        7.0,
                        NaN
                    ],
                    [
                        1.0,
                        NaN,
                        9.0
                    ],
                    [
                        NaN,
                        3.0,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Quruvchi",
                        "Pakhtakor",
                        "Bunyodkor"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        7,
                        0
                    ],
                    [
                        1,
                        0,
                        9
                    ],
                    [
                        0,
                        3,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/game_injury/game.csv')\n# The following codes are generated by LLM:\nhome_team_counts = df.groupby(['Home_team', 'Away_team']).size().unstack()\nhome_team_counts = home_team_counts.loc[['Quruvchi', 'Pakhtakor', 'Bunyodkor']]\nax = home_team_counts.plot(kind='bar', stacked=True)\nax.set_xlabel('Home Team')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games for Each Home Team Grouped by Away Team')\nplt.gcf().suptitle(\"\")\nplt.show()\n",
            "addRule": "Only rotate labels when there is no enough space",
            "addExample": null
        }
    },
    "1413@y_name@ASC": {
        "0": {
            "belong": "Dewei",
            "question": "How many flights with price higher than 300 for each destination city? Return a bar chart, and order in ascending by the total number.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Tokyo",
                        "Honolulu"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Tokyo",
                        "Honolulu"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.read_csv(r'./visEval_dataset/databases/flight_1/Flight.csv')\n# The following codes are generated by LLM:\ndf['departure_date'] = pd.to_datetime(df['departure_date'], format='%m/%d/%Y %H:%M')\ndf['arrival_date'] = pd.to_datetime(df['arrival_date'], format='%m/%d/%Y %H:%M')\nhigh_price_flights = df[df['price'] > 300]\nflight_counts = high_price_flights['destination'].value_counts().sort_values()\nplt.bar(flight_counts.index, flight_counts.values)\nplt.xlabel('Destination City')\nplt.ylabel('Number of Flights')\nplt.title('Number of Flights with Price Higher than 300 by Destination')\nplt.show()\n",
            "addRule": null,
            "addExample": null
        }
    },
    "298@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "For those dates with a max temperature greater than or equal to 80, I want to know the number of days on the day of the week interval using a bar chart, could you show from high to low by the Y?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; Y-axis data display error",
            "fig_data": {
                "x_data": [
                    [
                        "Monday",
                        "Thursday",
                        "Wednesday",
                        "Sunday",
                        "Saturday",
                        "Friday",
                        "Tuesday"
                    ]
                ],
                "y_data": [
                    [
                        92,
                        89,
                        81,
                        65,
                        61,
                        59,
                        51
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mon",
                        "Thur",
                        "Wed",
                        "Sun",
                        "Sat",
                        "Fri",
                        "Tue"
                    ]
                ],
                "y_data": [
                    [
                        25,
                        32,
                        28,
                        24,
                        25,
                        25,
                        20
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['day_of_week'] = df['date'].dt.day_name()\nhot_days = df[df['max_temperature_f'] >= 80]\nday_counts = hot_days['day_of_week'].value_counts().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nday_counts.plot(kind='bar', ax=ax)\nax.set_title('Number of Hot Days (Max Temp >= 80\u63b3F) by Day of Week')\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Number of Days')\nfig.suptitle('')\n\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "303@x_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Use a line chart to show the change in maximum temperature among all regions in July 2015, with the x-axis in ascending order,Complete monthly data is required.",
            "hardness": "Hard",
            "chart": "Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The data displayed on the x-axis is incomplete;",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "2015-07-01",
                        "2015-07-02",
                        "2015-07-03",
                        "2015-07-04",
                        "2015-07-05",
                        "2015-07-06",
                        "2015-07-07",
                        "2015-07-08",
                        "2015-07-09",
                        "2015-07-10",
                        "2015-07-11",
                        "2015-07-12",
                        "2015-07-13",
                        "2015-07-14",
                        "2015-07-15",
                        "2015-07-16",
                        "2015-07-17",
                        "2015-07-18",
                        "2015-07-19",
                        "2015-07-20",
                        "2015-07-21",
                        "2015-07-22",
                        "2015-07-23",
                        "2015-07-24",
                        "2015-07-25",
                        "2015-07-26",
                        "2015-07-27",
                        "2015-07-28",
                        "2015-07-29",
                        "2015-07-30",
                        "2015-07-31"
                    ]
                ],
                "y_data": [
                    [
                        91,
                        79,
                        81,
                        80,
                        81,
                        78,
                        78,
                        74,
                        74,
                        73,
                        78,
                        78,
                        80,
                        75,
                        83,
                        85,
                        81,
                        79,
                        89,
                        87,
                        76,
                        77,
                        75,
                        78,
                        75,
                        79,
                        102,
                        94,
                        89,
                        81,
                        78
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\njuly_df = df[df['date'].dt.month == 7]\njuly_df = july_df[july_df['date'].dt.year == 2015]\njuly_df = july_df.sort_values(by='date')\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.plot(july_df['date'], july_df['max_temperature_f'], color='red', label='Max Temperature')\nax.set_xlabel('Date')\nax.set_ylabel('Max Temperature (\u63b3F)')\nax.set_title('Change in Maximum Temperature in July 2015')\nfig.suptitle('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": "If axis labels are too crowded, you can rotate the label for a better arrangement.",
            "addExample": null
        }
    },
    "330@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "Count those days for each year and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, and display the number of date in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The bar chart should not show two data for 2013, because the zip code is not needed.",
            "fig_data": {
                "x_data": [
                    [
                        2013,
                        2014
                    ]
                ],
                "y_data": [
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2014",
                        "2013"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\nmin_dew_point_94107 = df[df['zip_code'] == 94107]['min_dew_point_f'].min()\nfiltered_df = df[df['min_dew_point_f'] < min_dew_point_94107]\nfiltered_df['year'] = pd.to_datetime(filtered_df['date']).dt.year\ncount_by_year_zip = filtered_df.groupby(['year', 'zip_code']).size().unstack().fillna(0)\ncount_by_year_zip = count_by_year_zip.astype(int)\ncount_by_year_zip = count_by_year_zip.sort_index()\ncount_by_year_zip.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Count of Days')\nax.set_title('Days with Min Dew Point Lower than Any in Zip Code 94107')\nplt.suptitle('')\nplt.show()",
            "addRule": "The bar chart should only show the year, not the zip code",
            "addExample": null
        }
    },
    "349@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "On which day has it neither been foggy nor rained in the zip code of 94107, and bin by year, count them by a bar chart, sort by the y axis in desc.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The x-axis should not show decimal years",
            "fig_data": {
                "x_data": [
                    [
                        1,
                        2,
                        0
                    ]
                ],
                "y_data": [
                    [
                        2014,
                        2015,
                        2013
                    ],
                    [
                        267,
                        202,
                        105
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2014",
                        "2015",
                        "2013"
                    ]
                ],
                "y_data": [
                    [
                        275,
                        206,
                        106
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\n\nfiltered_df = df[(df['events'].isna() | ~df['events'].str.contains('Fog|Rain', case=False, na=False)) & (df['zip_code'] == 94107)]\nyearly_counts = filtered_df.groupby('year').size().reset_index(name='count')\n\nyearly_counts_sorted = yearly_counts.sort_values('count', ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(yearly_counts_sorted['year'], yearly_counts_sorted['count'], color='skyblue')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Days')\nax.set_title('Number of Clear Days in Zip Code 94107 by Year')\nfig.suptitle('')\n\nplt.show()",
            "addRule": "If axis data is year, month, or other indivisible series, make sure uses integer and do not divide them.\n",
            "addExample": null
        }
    },
    "927@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "How many accounts are opened in each day? Bin the account open day by weekday and group by other account details in a stacked bar chart, and rank by the y axis in ascending.",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                ],
                "y_data": [
                    [
                        2.0,
                        0.0,
                        1.0,
                        NaN,
                        3.0,
                        2.0,
                        0.0
                    ],
                    [
                        3.0,
                        2.0,
                        0.0,
                        NaN,
                        0.0,
                        0.0,
                        2.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Thur",
                        "Wed",
                        "Sat",
                        "Sun",
                        "Tue",
                        "Fri",
                        "Mon"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        1,
                        2,
                        0,
                        0,
                        3,
                        2
                    ],
                    [
                        0,
                        0,
                        0,
                        2,
                        2,
                        0,
                        3
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_invoices/Accounts.csv')\ndf['date_account_opened'] = pd.to_datetime(df['date_account_opened'])\ndf['weekday'] = df['date_account_opened'].dt.day_name()\n\ngrouped = df.groupby(['weekday', 'other_account_details']).size().unstack(fill_value=0)\nordered_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ngrouped = grouped.reindex(ordered_days)\n\ngrouped.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Number of Accounts Opened')\nax.set_title('Accounts Opened by Weekday and Account Type')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.show()",
            "addRule": "Since the y-axis is sorted and accumulated by quantity, you can make a mark to show the quantity in each bar chart, which looks clearer.",
            "addExample": null
        }
    },
    "942@x_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "How many accounts are opened in each year? Show a group line chart that group by other account details, and could you order by the x axis in asc?",
            "hardness": "Extra Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The x-axis should show the full data.",
            "fig_data": {
                "x_data": [
                    [
                        2008,
                        2009,
                        2010,
                        2011,
                        2012,
                        2014,
                        2015,
                        2016,
                        2017
                    ]
                ],
                "y_data": [
                    [
                        0,
                        1,
                        2,
                        0,
                        1,
                        2,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2008",
                        "2009",
                        "2010",
                        "2011",
                        "2012",
                        "2013",
                        "2014",
                        "2015",
                        "2016",
                        "2017"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        1,
                        2,
                        0,
                        1,
                        0,
                        2,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        1,
                        1,
                        0,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.tseries.offsets import DateOffset\n\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_invoices/Accounts.csv')\ndf['date_account_opened'] = pd.to_datetime(df['date_account_opened'], errors='coerce')\ndf['year_account_opened'] = df['date_account_opened'].dt.year\ndf_grouped = df.groupby(['year_account_opened', 'other_account_details']).size().unstack(fill_value=0)\ndf_grouped = df_grouped.sort_index()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\ndf_grouped.plot(ax=ax)\nax.set_title('Number of Accounts Opened per Year by Account Type')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts')\nfig.suptitle('')\n\nplt.show()",
            "addRule": "Make sure all axis cover whole the data range.",
            "addExample": null
        }
    },
    "2497@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart, I want to rank y axis in desc order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The x-axis should show the full data.",
            "fig_data": {
                "x_data": [
                    [
                        2004,
                        2001
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2004",
                        "2001",
                        "2003",
                        "2002"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/party_host/party.csv')\nfiltered_df = df[df['Party_Theme'].isin(['Spring', 'Teqnology'])]\nlast_year_count = filtered_df['Last_year'].value_counts().sort_index(ascending=False)\nlast_year_count.plot(kind='bar', ax=ax)\nax.set_title('Count of Last Year for Party Themes \"Spring\" or \"Teqnology\"')\nax.set_xlabel('Last Year')\nax.set_ylabel('Count')\nfig.suptitle('')\nplt.show()",
            "addRule": "Make sure all axis cover whole the data range.",
            "addExample": null
        }
    },
    "2737@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Draw a bar chart for how many captains with younger than 50 are in each rank?, and show Y-axis in descending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The text corresponding to each scale of the x-axis cannot be fully displayed.",
            "fig_data": {
                "x_data": [
                    [
                        "Midshipman",
                        "Lieutenant",
                        "Commander, junior captain"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Midshipman",
                        "Lieutenant",
                        "Commander, junior captain"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/ship_1/captain.csv')\ndf_younger_than_50 = df[df['age'] < 50]\nrank_count = df_younger_than_50['Rank'].value_counts().sort_values(ascending=False)\nrank_count.plot(kind='bar', ax=ax)\nax.set_xlabel('Rank')\nax.set_ylabel('Number of Captains')\nax.set_title('Number of Captains Younger Than 50 by Rank')\nfig.suptitle('')\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text",
            "addExample": null
        }
    },
    "2805@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "A bar chart for listing the number of the names of products that are not in any event, sort the number of product name in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": true,
            "evaluation": "The x-axis should not show non-existent data.",
            "fig_data": {
                "x_data": [
                    [
                        "Business Policy",
                        "Business Policy B",
                        "Conference Equipments",
                        "Trading Policy",
                        "Trading Policy B",
                        "Special Dinning",
                        "Men suits",
                        "TV Equipments",
                        "Dinning"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Business Policy",
                        "Business Policy B",
                        "Men suits",
                        "Dinning"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/solvency_ii/Products.csv')\ndf_not_in_any_event = df['Product_Name'].value_counts()\ndf_sorted = df_not_in_any_event.sort_values(ascending=True)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(df_sorted.index, df_sorted.values)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.set_ylabel('Number of Products')\nax.set_xlabel('Product Names')\nax.set_title('Number of Products Not in Any Event')\nplt.suptitle('')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()",
            "addRule": "The data query should be more accurate.",
            "addExample": null
        }
    },
    "3236@x_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank X in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; X title overflow",
            "fig_data": {
                "x_data": [
                    [
                        "Bucella",
                        "Carter",
                        "Casa Piena",
                        "Caymus",
                        "Chappellet",
                        "Chimeney Rock",
                        "Darioush",
                        "David Arthur",
                        "Dos Lagos",
                        "Hourglass",
                        "Janzen",
                        "Lewis",
                        "Morlet",
                        "Paul Hobbs",
                        "Sine Qua Non"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        3,
                        1,
                        1,
                        4
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Bucella",
                        "Carter",
                        "Casa Piena",
                        "Caymus",
                        "Chappellet",
                        "Chimeney Rock",
                        "Darioush",
                        "David Arthur",
                        "Dos Lagos",
                        "Hourglass",
                        "Janzen",
                        "Lewis",
                        "Morlet",
                        "Paul Hobbs",
                        "Sine Qua Non"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        3,
                        1,
                        1,
                        4
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/wine_1/WINE.csv')\nfiltered_df = df[df['Price'] > 100]\nwinery_counts = filtered_df['Winery'].value_counts().sort_index()\nwinery_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Winery')\nax.set_ylabel('Number of Wines')\nax.set_title('Number of Wineries with Wines Priced Over $100')\nfig.suptitle('')",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "1510@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "Show the number of companies without a gas station in each main industry with a bar chart, could you list from low to high by the Y?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; X title overflow",
            "fig_data": {
                "x_data": [
                    [
                        "Conglomerate",
                        "Banking"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        3
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Conglomerate",
                        "Banking"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/gas_company/company.csv')\n\nindustry_counts = df[df['Main_Industry'] != 'Oil and gas']['Main_Industry'].value_counts().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nindustry_counts.plot(kind='bar', ax=ax)\nax.set_title('')\nax.set_xlabel('Main Industry')\nax.set_ylabel('Number of Companies')\nplt.title('Number of Companies without a Gas Station in Each Main Industry')\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "2461@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Draw a bar chart for what is average age of male for different job title?, and show Y in desc order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The scale of the Y-axis needs to be precise so that the corresponding x-axis data can be intuitively identified.;Rotated x-axis; X title overflow",
            "fig_data": {
                "x_data": [
                    [
                        "doctor",
                        "engineer"
                    ]
                ],
                "y_data": [
                    [
                        45.0,
                        35.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "doctor",
                        "engineer"
                    ]
                ],
                "y_data": [
                    [
                        45,
                        35
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/network_2/Person.csv')\nmale_df = df[df['gender'] == 'male']\navg_age_by_job = male_df.groupby('job')['age'].mean().sort_values(ascending=False)\navg_age_by_job.plot(kind='bar', ax=ax)\nax.set_title('Average Age of Males by Job Title')\nax.set_xlabel('Job Title')\nax.set_ylabel('Average Age')\nfig.suptitle('')",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.\n When the data corresponding to the x-axis cannot be read intuitively, the scale corresponding to the y-axis needs to be displayed.",
            "addExample": null
        }
    },
    "2465@x_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Draw a bar chart for how many people are under 40 for each gender?, and rank in desc by the x-axis.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis;The Y-axis scale shows that decimals are meaningless",
            "fig_data": {
                "x_data": [
                    [
                        "female",
                        "male"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "male",
                        "female"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/network_2/Person.csv')\nfiltered_df = df[df['age'] < 40]\ngender_counts = filtered_df['gender'].value_counts()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ngender_counts.sort_index(ascending=False).plot(kind='bar', ax=ax)\nax.set_xlabel('Gender')\nax.set_ylabel('Number of People Under 40')\nax.set_title('Number of People Under 40 by Gender')\nplt.suptitle('')",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.\nWhen the data obtained is an integer, the scale does not need to display decimals.",
            "addExample": null
        }
    },
    "2517@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "Show all ministers who do not belong to Progress Party, and count them by a bar chart, and order in asc by the Y.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis;The Y-axis scale shows that decimals are meaningless",
            "fig_data": {
                "x_data": [
                    [
                        "Dr. Kwame Nkrumah (MP)",
                        "Imoru Egala (MP)",
                        "Ebenezer Ako-Adjei (MP)"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Dr. Kwame Nkrumah (MP)",
                        "Imoru Egala (MP)",
                        "Ebenezer Ako-Adjei (MP)"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/party_people/party.csv')\nfiltered_df = df[df['Party_name'] != 'Progress Party']['Minister'].value_counts().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfiltered_df.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Minister')\nax.set_ylabel('Count')\nax.set_title('Count of Ministers (excluding Progress Party)')\nfig.suptitle('')\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.\nWhen the data obtained is an integer, the scale does not need to display decimals.",
            "addExample": null
        }
    },
    "1551@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, and display from low to high by the y axis.",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Friday",
                        "Monday",
                        "Saturday",
                        "Sunday",
                        "Thursday",
                        "Tuesday",
                        "Wednesday"
                    ]
                ],
                "y_data": [
                    [
                        6357.142857142857,
                        6525.0,
                        4933.333333333333,
                        7733.333333333333,
                        3280.0,
                        6620.0,
                        7590.909090909091
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Thur",
                        "Sat",
                        "Fri",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Sun"
                    ]
                ],
                "y_data": [
                    [
                        3280,
                        4933.333333333333,
                        6357.142857142857,
                        6525,
                        6620,
                        7590.909090909091,
                        7733.333333333333
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"./visEval_dataset/databases/hr_1/employees.csv\")\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf['HIRE_WEEKDAY'] = df['HIRE_DATE'].dt.day_name()\n\ndf_filtered = df[df['FIRST_NAME'].str.contains('D|S', regex=True, case=False)]\nsalary_avg = df_filtered.groupby('HIRE_WEEKDAY')['SALARY'].mean()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 6))\nsalary_avg.sort_values().plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Hire Weekday')\nax.set_ylabel('Average Salary')\nax.set_title('Average Salary Distribution by Hire Weekday for Employees with \"D\" or \"S\" in First Name')\nplt.suptitle('')\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "1622@y_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart, rank from low to high by the Y.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis;The x-axis title now shows the year.",
            "fig_data": {
                "x_data": [
                    [
                        "1987-09",
                        "1987-08"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        30
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Sept",
                        "Aug"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        30
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ndf = pd.read_csv(\"./visEval_dataset/databases/hr_1/employees.csv\")\nclara_department_id = df[df['FIRST_NAME'] == 'Clara']['DEPARTMENT_ID'].iloc[0]\nclara_id = df[df['FIRST_NAME'] == 'Clara']['EMPLOYEE_ID'].iloc[0]\n\nsame_department_df = df[(df['DEPARTMENT_ID'] == clara_department_id) & (df['EMPLOYEE_ID'] != clara_id)]\nsame_department_df['HIRE_DATE'] = pd.to_datetime(same_department_df['HIRE_DATE'])\nsame_department_df['HIRE_MONTH'] = same_department_df['HIRE_DATE'].dt.to_period('M')\nhire_counts = same_department_df['HIRE_MONTH'].value_counts().sort_values()\n\nhire_counts.plot(kind='bar', ax=ax, color='skyblue')\nax.set_xlabel('Hire Date (Month)')\nax.set_ylabel('Number of Employees')\nax.set_title('Employees Hired Per Month in Clara\\'s Department')\nfig.suptitle('')\n\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.\n When there is only one year, after grouping by month, only the month needs to be displayed, not the year.",
            "addExample": null
        }
    },
    "1627@x_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Group and count the job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN for visualizing a bar chart, and rank by the names in desc.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "ST_MAN",
                        "ST_CLERK",
                        "SH_CLERK",
                        "SA_REP",
                        "SA_MAN",
                        "PU_MAN",
                        "PU_CLERK",
                        "PR_REP",
                        "MK_REP",
                        "IT_PROG",
                        "HR_REP",
                        "FI_MGR",
                        "FI_ACCOUNT",
                        "AD_ASST",
                        "AC_MGR",
                        "AC_ACCOUNT"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        20,
                        20,
                        30,
                        3,
                        1,
                        5,
                        1,
                        1,
                        5,
                        1,
                        1,
                        5,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "ST_MAN",
                        "ST_CLERK",
                        "SH_CLERK",
                        "SA_REP",
                        "SA_MAN",
                        "PU_MAN",
                        "PU_CLERK",
                        "PR_REP",
                        "MK_REP",
                        "IT_PROG",
                        "HR_REP",
                        "FI_MGR",
                        "FI_ACCOUNT",
                        "AD_ASST",
                        "AC_MGR",
                        "AC_ACCOUNT"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        20,
                        20,
                        30,
                        3,
                        1,
                        5,
                        1,
                        1,
                        5,
                        1,
                        1,
                        5,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/hr_1/employees.csv')\nmk_man_salary = df[df['JOB_ID'] == 'MK_MAN']['SALARY'].min()\nfiltered_df = df[df['SALARY'] < mk_man_salary]\njob_counts = filtered_df['JOB_ID'].value_counts().sort_index(ascending=False)\njob_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Job ID')\nax.set_ylabel('Number of Employees')\nax.set_title('Job Count for Employees with Salary Less Than MK_MAN')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1703@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "Compute the number of each type of job ids for employees who make more than the highest-earning employee with title PU_MAN, with a bar chart, and show by the the number of job id in desc.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": null,
            "isStyleCorrect": null,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "SA_MAN",
                        "AD_VP",
                        "AD_PRES",
                        "FI_MGR",
                        "SA_REP",
                        "MK_MAN",
                        "AC_MGR"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "SA_MAN",
                        "AD_VP",
                        "SA_REP",
                        "MK_MAN",
                        "FI_MGR",
                        "AD_PRES",
                        "AC_MGR"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"./visEval_dataset/databases/hr_1/employees.csv\")\n\nhighest_pu_man_salary = df[df['JOB_ID'] == 'PU_MAN']['SALARY'].max()\nfiltered_df = df[df['SALARY'] > highest_pu_man_salary]\njob_counts = filtered_df['JOB_ID'].value_counts().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\njob_counts.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Job ID')\nax.set_ylabel('Number of Employees')\nax.set_title('Job ID Count for Employees Earning More than Highest PU_MAN')\nplt.suptitle(\"\")\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "1802@y_name@DESC": {
        "0": {
            "belong": "Lina",
            "question": "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart, list by the y-axis in desc.",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "William",
                        "Adam",
                        "Payam"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "William",
                        "Payam",
                        "Adam"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/hr_1/employees.csv')\ndf_filtered = df[df['FIRST_NAME'].str.endswith('m')]\nname_counts = df_filtered['FIRST_NAME'].value_counts().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nname_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('First Name')\nax.set_ylabel('Frequency')\nax.set_title('Frequency of First Names Ending with \"m\"')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": "When the text title of the x-axis is too long, it can be displayed in a new line or rotated the text.",
            "addExample": null
        }
    },
    "1835@x_name@ASC": {
        "0": {
            "belong": "Lina",
            "question": "For those employees whose first name does not contain the letter M, give me a line chart to show the hire date and the corresponding salaries, show in asc by the x-axis please.",
            "hardness": "Hard",
            "chart": "Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The x-axis data display is incomplete.",
            "fig_data": null,
            "nv_data": {
                "x_data": [
                    [
                        "1987-06-17",
                        "1987-06-18",
                        "1987-06-19",
                        "1987-06-20",
                        "1987-06-21",
                        "1987-06-22",
                        "1987-06-23",
                        "1987-06-24",
                        "1987-06-25",
                        "1987-06-26",
                        "1987-06-27",
                        "1987-06-30",
                        "1987-07-01",
                        "1987-07-02",
                        "1987-07-03",
                        "1987-07-04",
                        "1987-07-05",
                        "1987-07-06",
                        "1987-07-10",
                        "1987-07-11",
                        "1987-07-12",
                        "1987-07-13",
                        "1987-07-15",
                        "1987-07-16",
                        "1987-07-19",
                        "1987-07-20",
                        "1987-07-22",
                        "1987-07-23",
                        "1987-07-24",
                        "1987-07-25",
                        "1987-07-26",
                        "1987-07-27",
                        "1987-07-28",
                        "1987-07-29",
                        "1987-07-30",
                        "1987-07-31",
                        "1987-08-01",
                        "1987-08-02",
                        "1987-08-03",
                        "1987-08-04",
                        "1987-08-05",
                        "1987-08-06",
                        "1987-08-07",
                        "1987-08-08",
                        "1987-08-09",
                        "1987-08-10",
                        "1987-08-11",
                        "1987-08-12",
                        "1987-08-13",
                        "1987-08-14",
                        "1987-08-15",
                        "1987-08-16",
                        "1987-08-17",
                        "1987-08-18",
                        "1987-08-19",
                        "1987-08-21",
                        "1987-08-22",
                        "1987-08-24",
                        "1987-08-25",
                        "1987-08-26",
                        "1987-08-28",
                        "1987-08-29",
                        "1987-08-30",
                        "1987-08-31",
                        "1987-09-01",
                        "1987-09-02",
                        "1987-09-04",
                        "1987-09-05",
                        "1987-09-06",
                        "1987-09-08",
                        "1987-09-09",
                        "1987-09-10",
                        "1987-09-11",
                        "1987-09-12",
                        "1987-09-13",
                        "1987-09-14",
                        "1987-09-16",
                        "1987-09-17",
                        "1987-09-18",
                        "1987-09-20",
                        "1987-09-21",
                        "1987-09-22",
                        "1987-09-23",
                        "1987-09-24",
                        "1987-09-25",
                        "1987-09-27",
                        "1987-09-28",
                        "1987-09-30"
                    ]
                ],
                "y_data": [
                    [
                        24000,
                        17000,
                        17000,
                        9000,
                        6000,
                        4800,
                        4800,
                        4200,
                        12000,
                        9000,
                        8200,
                        6900,
                        11000,
                        3100,
                        2900,
                        2800,
                        2600,
                        2500,
                        6500,
                        5800,
                        3200,
                        2700,
                        2200,
                        3300,
                        2100,
                        3300,
                        2400,
                        2200,
                        3600,
                        3200,
                        2700,
                        2500,
                        3500,
                        3100,
                        2600,
                        2500,
                        14000,
                        13500,
                        12000,
                        11000,
                        10500,
                        10000,
                        9500,
                        9000,
                        8000,
                        7500,
                        7000,
                        10000,
                        9500,
                        9000,
                        8000,
                        7500,
                        7000,
                        10500,
                        9500,
                        6800,
                        6400,
                        11500,
                        10000,
                        9600,
                        7300,
                        6100,
                        11000,
                        8800,
                        8600,
                        8400,
                        6200,
                        3200,
                        3100,
                        2800,
                        4200,
                        4100,
                        3400,
                        3000,
                        3800,
                        3600,
                        2500,
                        4000,
                        3900,
                        2800,
                        3100,
                        3000,
                        2600,
                        2600,
                        4400,
                        6000,
                        6500,
                        12000
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/hr_1/employees.csv')\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\nfiltered_df = df[~df['FIRST_NAME'].str.contains('M')]\nsorted_df = filtered_df.sort_values(by='HIRE_DATE')\nplt.figure(figsize=(12,6))\nplt.plot(sorted_df['HIRE_DATE'], sorted_df['SALARY'], marker='o')\nplt.xlabel('Hire Date')\nplt.ylabel('Salary')\nplt.title('Salaries Over Hire Dates (Excluding First Names with \"M\")')\nplt.suptitle('')\nplt.grid(True)\nplt.tight_layout()\nplt.show()",
            "addRule": "When there is a lot of data, the x-axis scale should be displayed as completely as possible without overlapping.",
            "addExample": null
        }
    },
    "754@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code, and order y-axis in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "PPT",
                        "CV",
                        "PP",
                        "BK",
                        "AD"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2,
                        2,
                        3
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "CV",
                        "PPT",
                        "BK",
                        "PP",
                        "AD"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2,
                        2,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/cre_Doc_Template_Mgt/Templates.csv')\nfiltered_df = df[df['Version_Number'] > 5]\ncount_by_type = filtered_df['Template_Type_Code'].value_counts(ascending=True)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(count_by_type.index, count_by_type.values)\nax.set_xlabel('Template Type Code')\nax.set_ylabel('Number of Templates with Version > 5')\nax.set_title('Number of Templates by Type with Version Number > 5')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfig.suptitle('')\nplt.show()",
            "addRule": "If axis data is number, make sure uses integer",
            "addExample": null
        }
    },
    "620@x_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart, list by the X in ascending.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Garfield",
                        "Gates",
                        "Lambeau",
                        "Nassau",
                        "Painter",
                        "Rathbone",
                        "Saucon",
                        "Stabler",
                        "Taylor",
                        "Whitman"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Garfield",
                        "Gates",
                        "Lambeau",
                        "Nassau",
                        "Painter",
                        "Rathbone",
                        "Saucon",
                        "Stabler",
                        "Taylor",
                        "Whitman"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/college_2/classroom.csv')\nfiltered_df = df[df['capacity'] > 50]\nroom_counts = filtered_df.groupby('building')['room_number'].count().sort_index()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nroom_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Building')\nax.set_ylabel('Number of Rooms with Capacity > 50')\nax.set_title('Rooms with Capacity Over 50 by Building')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "647@x_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "How many courses are provided in each year? Visualize with a group line chart grouping by semester, could you list x axis in asc order?",
            "hardness": "Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        2001,
                        2002,
                        2003,
                        2004,
                        2005,
                        2006,
                        2007,
                        2008,
                        2009,
                        2010
                    ]
                ],
                "y_data": [
                    [
                        2,
                        9,
                        6,
                        3,
                        4,
                        8,
                        6,
                        1,
                        7,
                        5
                    ],
                    [
                        3,
                        4,
                        6,
                        4,
                        4,
                        5,
                        6,
                        9,
                        2,
                        6
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2010",
                        "2009",
                        "2008",
                        "2007",
                        "2006",
                        "2005",
                        "2004",
                        "2003",
                        "2002",
                        "2001"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        7,
                        1,
                        6,
                        8,
                        4,
                        3,
                        6,
                        9,
                        2
                    ],
                    [
                        6,
                        2,
                        9,
                        6,
                        5,
                        4,
                        4,
                        6,
                        4,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/college_2/SECTION.csv')\ngrouped_data = df.groupby(['year', 'semester']).size().unstack()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ngrouped_data.sort_index().plot(kind='line', ax=ax, marker='o')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Courses')\nax.set_title('Number of Courses Provided Each Year by Semester')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "648@x_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "Find the number of courses provided in each year with a group line chart that groups by semester, list the binning year in asc order.",
            "hardness": "Extra Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        2001,
                        2002,
                        2003,
                        2004,
                        2005,
                        2006,
                        2007,
                        2008,
                        2009,
                        2010
                    ]
                ],
                "y_data": [
                    [
                        2,
                        9,
                        6,
                        3,
                        4,
                        8,
                        6,
                        1,
                        7,
                        5
                    ],
                    [
                        3,
                        4,
                        6,
                        4,
                        4,
                        5,
                        6,
                        9,
                        2,
                        6
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2001",
                        "2002",
                        "2003",
                        "2004",
                        "2005",
                        "2006",
                        "2007",
                        "2008",
                        "2009",
                        "2010"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        9,
                        6,
                        3,
                        4,
                        8,
                        6,
                        1,
                        7,
                        5
                    ],
                    [
                        3,
                        4,
                        6,
                        4,
                        4,
                        5,
                        6,
                        9,
                        2,
                        6
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/college_2/SECTION.csv')\ndf_grouped = df.groupby(['year', 'semester']).size().unstack()\ndf_grouped.plot(ax=ax, kind='line', marker='o')\nax.set_title('Number of Courses Provided per Year by Semester')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Courses')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "657@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "How many departments whose budget is more than the average budget in each building? Show me a bar chart, list by the total number in asc.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Candlestick",
                        "Palmer",
                        "Taylor"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Brodhead",
                        "Bronfman",
                        "Linderman",
                        "Mercer",
                        "Palmer",
                        "Thompson",
                        "Whitman",
                        "Wrigley",
                        "Candlestick",
                        "Taylor"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/college_2/department.csv')\navg_budget = df.groupby('building')['budget'].mean().reset_index()\nmerged_df = df.merge(avg_budget, on='building', suffixes=('', '_avg'))\nabove_avg_df = merged_df[merged_df['budget'] > merged_df['budget_avg']]\nbuilding_counts = above_avg_df['building'].value_counts().sort_values()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(building_counts.index, building_counts.values)\nax.set_xlabel('Building')\nax.set_ylabel('Number of Departments')\nax.set_title('Departments with Budget Above Average by Building')\nfig.suptitle('')\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.show()\n",
            "addRule": "Don't use plt.xticks(ha) when not necessary. ",
            "addExample": null
        }
    },
    "3214@x_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "A bar chart about the number of countries for all people whose age is smaller than the average, and could you display in desc by the X-axis?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis;Display in ASC by the x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "United States",
                        "Australia"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "United States",
                        "Australia"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/wedding/people.csv')\naverage_age = df['Age'].mean()\ndf_filtered = df[df['Age'] < average_age]\ncountry_counts = df_filtered['Country'].value_counts().sort_index(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ncountry_counts.sort_values().plot(kind='bar', ax=ax)\nax.set_xlabel(\"Country\")\nax.set_ylabel(\"Number of People\")\nax.set_title(\"Number of People by Country with Age Below Average\")\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "2066@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Find the name and account balance of the customer whose name includes the letter 'a' Visualize them using a bar chart, show y-axis in descending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        1,
                        2
                    ]
                ],
                "y_data": [
                    [
                        "Mary",
                        "Jack"
                    ],
                    [
                        "saving",
                        "checking"
                    ],
                    [
                        2000,
                        1000
                    ],
                    [
                        2,
                        1
                    ],
                    [
                        30,
                        20
                    ],
                    [
                        2,
                        1
                    ],
                    [
                        "Utah",
                        "Texas"
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mary",
                        "Jack"
                    ]
                ],
                "y_data": [
                    [
                        2000,
                        1000
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/loan_1/customer.csv')\nfiltered_df = df[df['cust_name'].str.contains('a', case=False)]\nsorted_df = filtered_df.sort_values(by='acc_bal', ascending=False)\nplt.bar(sorted_df['cust_name'], sorted_df['acc_bal'])\nplt.xlabel('Customer Name')\nplt.ylabel('Account Balance')\nplt.title('Account Balance of Customers with \"a\" in their Name')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "680@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Stack bar chart of the number of headquarters vs Industry based on headquarters, display Y-axis in desc order please.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "USA",
                        "China",
                        "UK",
                        "Brazil",
                        "France",
                        "Germany",
                        "Netherlands",
                        "Russia"
                    ]
                ],
                "y_data": [
                    [
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        1.0,
                        NaN,
                        NaN
                    ],
                    [
                        3.0,
                        3.0,
                        1.0,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN
                    ],
                    [
                        2.0,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN
                    ],
                    [
                        2.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        NaN,
                        1.0,
                        1.0
                    ],
                    [
                        1.0,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "USA",
                        "China",
                        "UK",
                        "Russia",
                        "Netherlands",
                        "Germany",
                        "France",
                        "Brazil"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        3,
                        3,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        2,
                        1,
                        1,
                        1,
                        1,
                        0,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/company_employee/company.csv')\nheadquarters_industry_count = df.groupby(['Headquarters', 'Industry']).size().unstack()\nheadquarters_industry_count = headquarters_industry_count.loc[headquarters_industry_count.sum(axis=1).sort_values(ascending=False).index]\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nheadquarters_industry_count.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Headquarters')\nax.set_ylabel('Number of Companies')\nax.set_title('Number of Headquarters vs Industry Based on Headquarters')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2165@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "What is the name of the technician whose team is not 'NYY', and count them by a bar chart, show by the total number from high to low.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "The problem description is not clear; Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Eddie Collins",
                        "Tony Sewell",
                        "Mark Sewell",
                        "Charlie Hollocher",
                        "Lou Boudreau",
                        "Joe Cochrane",
                        "Mickey Cochrane"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Eddie Collins",
                        "Tony Sewell",
                        "Mickey Cochrane",
                        "Mark Sewell",
                        "Lou Boudreau",
                        "Joe Cochrane",
                        "Charlie Hollocher"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/machine_repair/technician.csv')\ndf_filtered = df[df['Team'] != 'NYY']\nname_counts = df_filtered['Name'].value_counts().sort_values(ascending=False)\nname_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Technician Name')\nax.set_ylabel('Count')\nax.set_title('Number of Technicians by Name (Excluding Team NYY)')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "780@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, could you display in descending by the y axis please?",
            "hardness": "Extra Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Tuesday",
                        "Friday",
                        "Thursday",
                        "Sunday",
                        "Monday",
                        "Wednesday",
                        "Saturday"
                    ]
                ],
                "y_data": [
                    [
                        1.0,
                        1.0,
                        0.0,
                        1.0,
                        0.0,
                        NaN,
                        NaN
                    ],
                    [
                        0.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0,
                        NaN,
                        NaN
                    ],
                    [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        NaN,
                        NaN
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        1.0,
                        NaN,
                        NaN
                    ],
                    [
                        4.0,
                        1.0,
                        0.0,
                        0.0,
                        0.0,
                        NaN,
                        NaN
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Tue",
                        "Fri",
                        "Thur",
                        "Sun",
                        "Mon",
                        "Wed",
                        "Sat"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        4,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/cre_Doc_Tracking_DB/Document_locations.csv')\ndf['Date_in_Locaton_To'] = pd.to_datetime(df['Date_in_Locaton_To'])\ndf['Weekday'] = df['Date_in_Locaton_To'].dt.day_name()\nresult = df.groupby(['Weekday', 'Location_Code'])['Document_ID'].count().unstack().fillna(0)\nweekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nresult = result.reindex(weekday_order)\nresult = result.loc[result.sum(axis=1).sort_values(ascending=False).index]\nfig, ax = plt.subplots(figsize=(10, 4))\nresult.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Weekday of Ending Date')\nax.set_ylabel('Number of Documents')\nax.set_title('Number of Documents by Weekday and Location Code')\nplt.suptitle('')\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1006@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a bar chart, I want to order by the total number in asc please.",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Clothes",
                        "Hardware"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        8
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Clothes",
                        "Hardware"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        8
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\nfiltered_df = df[(df['product_price'] > 1000) | (df['product_price'] < 500)]\nproduct_counts = filtered_df['product_type_code'].value_counts(ascending=True)\nproduct_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Product Type Code')\nax.set_ylabel('Number of Products')\nax.set_title('Products Priced >1000 or <500')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "1009@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Show the number of products with price higher than 1000 or lower than 500 for each product name in a bar chart, and could you rank y-axis in descending order?",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Apple",
                        "jcrew",
                        "Sony",
                        "gucci"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        3,
                        3,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Apple",
                        "jcrew",
                        "Sony",
                        "gucci"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        3,
                        3,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\nfiltered_df = df[(df['product_price'] > 1000) | (df['product_price'] < 500)]\nproduct_counts = filtered_df['product_name'].value_counts().sort_values(ascending=False)\nproduct_counts.plot(kind='bar', ax=ax)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\nax.set_ylabel('Number of Products')\nax.set_xlabel('Product Name')\nax.set_title('Count of Products with Price > 1000 or < 500 by Product Name')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "1242@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "When are the birthdays of customer who are classified as 'Good Customer' status, bin birthday by weekday and count them by a bar chart, could you order y-axis in ascending order?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Tuesday",
                        "Sunday",
                        "Saturday",
                        "Thursday",
                        "Monday"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Fri",
                        "Wed",
                        "Sat",
                        "Sun",
                        "Thur",
                        "Tue",
                        "Mon"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        1,
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/driving_school/Customers.csv')\ndf['date_of_birth'] = pd.to_datetime(df['date_of_birth'])\ndf['weekday'] = df['date_of_birth'].dt.day_name()\ngood_customers = df[df['customer_status_code'] == 'Good Customer']\nweekday_counts = good_customers['weekday'].value_counts().sort_values()\nweekday_counts.plot(kind='bar', ax=ax)\nax.set_ylabel('Number of Customers')\nax.set_xlabel('Weekday of Birth')\nax.set_title('Birthdays of Good Customers by Weekday')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "1419@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "What are the countries of all airlines whose names start with Orbit, and count them by a bar chart, order total number from low to high order.",
            "hardness": "Extra Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Turkey",
                        "Azerbaijan",
                        "United States"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        4
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Azerbaijan",
                        "Turkey",
                        "United States"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        4
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/flight_4/airlines.csv')\norbit_airlines = df[df['name'].str.startswith('Orbit')]\ncountry_counts = orbit_airlines['country'].value_counts().sort_values()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Airlines')\nax.set_title('Airlines Starting with \"Orbit\" by Country')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "41@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "Show the average age for all female students and group them by first name in a bar chart, and could you rank the average of age in asc order?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Susan",
                        "Linda",
                        "Stacy",
                        "Tracy",
                        "Lisa",
                        "Jandy",
                        "Shiela",
                        "Sarah"
                    ]
                ],
                "y_data": [
                    [
                        16.0,
                        18.0,
                        18.0,
                        19.0,
                        19.5,
                        20.0,
                        21.0,
                        23.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Susan",
                        "Linda",
                        "Stacy",
                        "Tracy",
                        "Lisa",
                        "Jandy",
                        "Shiela",
                        "Sarah"
                    ]
                ],
                "y_data": [
                    [
                        16,
                        18,
                        18,
                        19,
                        19.5,
                        20,
                        21,
                        23
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/allergy_1/Student.csv')\nfemale_students = df[df['Sex'] == 'F']\naverage_age_by_fname = female_students.groupby('Fname')['Age'].mean().sort_values()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\naverage_age_by_fname.plot(kind='bar', ax=ax)\nax.set_xlabel('First Name')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Female Students by First Name')\nfig.suptitle('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "42@y_name@ASC": {
        "0": {
            "belong": "Zihuan",
            "question": "A bar chart about the number of last name for all female students whose sex is F, and rank in asc by the y-axis.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Kim",
                        "Jones",
                        "Apap",
                        "Nelson",
                        "Lee",
                        "Prater",
                        "Cheng",
                        "Schmidt",
                        "Smith"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Apap",
                        "Cheng",
                        "Jones",
                        "Kim",
                        "Lee",
                        "Nelson",
                        "Prater",
                        "Schmidt",
                        "Smith"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/allergy_1/Student.csv')\nfemale_students = df[df['Sex'] == 'F']\nlName_counts = female_students['LName'].value_counts().sort_values()\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nlName_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Number of Female Students')\nax.set_title('Number of Last Names for Female Students')\nplt.suptitle('{}')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "44@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Show the average age for all female students and group them by last name with a bar chart, and could you order the average of age in desc order?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis",
            "fig_data": {
                "x_data": [
                    [
                        "Schmidt",
                        "Cheng",
                        "Jones",
                        "Nelson",
                        "Kim",
                        "Smith",
                        "Apap",
                        "Prater",
                        "Lee"
                    ]
                ],
                "y_data": [
                    [
                        26.0,
                        21.0,
                        21.0,
                        20.0,
                        19.0,
                        19.0,
                        18.0,
                        18.0,
                        16.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Schmidt",
                        "Jones",
                        "Cheng",
                        "Nelson",
                        "Smith",
                        "Kim",
                        "Prater",
                        "Apap",
                        "Lee"
                    ]
                ],
                "y_data": [
                    [
                        26,
                        21,
                        21,
                        20,
                        19,
                        19,
                        18,
                        18,
                        16
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"./visEval_dataset/databases/allergy_1/Student.csv\")\nfemale_students = df[df['Sex'] == 'F']\nage_by_lastname = female_students.groupby('LName')['Age'].mean().sort_values(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nage_by_lastname.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Female Students by Last Name')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1991@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "For all the claims whose claimed amount is larger than the average, bin the claim date into day of week interval and count them for visualizing a bar chart, order from high to low by the y axis.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Rotated x-axis; The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        "Friday",
                        "Thursday"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Fri",
                        "Thur",
                        "Wed",
                        "Tue",
                        "Sun",
                        "Sat",
                        "Mon"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/insurance_policies/Claims.csv')\ndf['Date_Claim_Made'] = pd.to_datetime(df['Date_Claim_Made'])\naverage_claimed_amount = df['Amount_Claimed'].mean()\nfiltered_df = df[df['Amount_Claimed'] > average_claimed_amount]\nfiltered_df['Day_of_Week'] = filtered_df['Date_Claim_Made'].dt.day_name()\ncounts = filtered_df['Day_of_Week'].value_counts().sort_values(ascending=False)\ncounts.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Number of Claims')\nax.set_title('Claims Above Average Amount by Day of the Week')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "2024@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "For those payments processed with Visa, bin the payment day into Year interval and count them for a bar chart, order from high to low by the y axis.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "The y-axis data display is decimal",
            "fig_data": {
                "x_data": [
                    [
                        2017,
                        2018
                    ]
                ],
                "y_data": [
                    [
                        3,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2017",
                        "2018"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        1
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/insurance_policies/Payments.csv')\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\nvisa_payments['Year'] = visa_payments['Date_Payment_Made'].dt.year\npayments_count = visa_payments.groupby('Year').size().sort_values(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(payments_count.index.astype(str), payments_count.values)\nax.set_title('Visa Payments Count by Year')\nax.set_xlabel('Year')\nax.set_ylabel('Count of Payments')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2028@y_name@DESC": {
        "0": {
            "belong": "Zihuan",
            "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart, and could you order y axis in desc order?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "x-axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        2017,
                        2018
                    ]
                ],
                "y_data": [
                    [
                        262456.6666666667,
                        7343.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2017",
                        "2018"
                    ]
                ],
                "y_data": [
                    [
                        262456.6666666667,
                        7343
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": false,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/insurance_policies/Payments.csv')\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\ndf['Year'] = df['Date_Payment_Made'].dt.year\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\navg_amount_by_year = visa_payments.groupby('Year')['Amount_Payment'].mean().sort_values(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(avg_amount_by_year.index, avg_amount_by_year.values)\nax.set_xlabel('Year')\nax.set_ylabel('Average Amount')\nax.set_title('Average Payment Amount Processed with Visa by Year')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2031@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "For those payments processed with Visa, show me the number of payments of each day of the week using a bar chart, and sort total number in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Incomplete data display. Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "Sunday",
                        "Wednesday",
                        "Saturday"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Fri",
                        "Mon",
                        "Thur",
                        "Tue",
                        "Sun",
                        "Wed",
                        "Sat"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "WEEKDAY",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/insurance_policies/Payments.csv')\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\ndf['Day_of_Week'] = df['Date_Payment_Made'].dt.day_name()\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\nvisa_payment_counts = visa_payments['Day_of_Week'].value_counts().sort_values(ascending=True)\n\nfig, ax = plt.subplots(figsize=(10, 4))\nvisa_payment_counts.plot(kind='bar', ax=ax)\nax.set_title('Number of Visa Payments by Day of the Week')\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Number of Payments')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.suptitle('')\nplt.tight_layout()\nplt.show()",
            "addRule": "In a bar or line chart, even if the data is 0, it should be displayed.",
            "addExample": null
        }
    },
    "490@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "What are the countries of mountains with height bigger than 5000, and count them by a bar chart, and I want to list y-axis in asc order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates. Rotated X axis labels. Wrong order",
            "fig_data": {
                "x_data": [
                    [
                        "Kenya",
                        "DR Congo Uganda",
                        "Tanzania"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "DR Congo Uganda",
                        "Kenya",
                        "Tanzania"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/climbing/mountain.csv')\nfiltered_df = df[df['Height'] > 5000]\ncountry_counts = filtered_df['Country'].value_counts().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ncountry_counts.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Country')\nax.set_ylabel('Number of Mountains')\nax.set_title('Countries with Mountains Taller than 5000m')\nfig.suptitle('')\n\nplt.show()",
            "addRule": "After sorted, The data with the same value should be sorted to displayed in natural order if not specified.",
            "addExample": null
        }
    },
    "2439@x_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "What are the category of music festivals with evaluation \"Awarded\", and count them by a bar chart, I want to list x axis in asc order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "Best Song",
                        "Best Sound Song"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Best Song",
                        "Best Sound Song"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/music_4/music_festival.csv')\ndf_awarded = df[df['Result'] == 'Awarded']\ncategory_counts = df_awarded['Category'].value_counts().sort_index()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(category_counts.index, category_counts.values)\nax.set_xlabel('Category')\nax.set_ylabel('Count')\nax.set_title('Count of Awarded Categories in Music Festivals')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2815@x_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Compute the total number in each competition type, and then split by country. Plot a bar chart and show in desc by the x-axis.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Wrong chart type, bar chart -> stacked bar chart",
            "fig_data": {
                "x_data": [
                    [
                        "Friendly",
                        "Tournament"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Spain",
                        "Slovenia",
                        "Russia",
                        "Italy",
                        "Ireland",
                        "Australia"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        0,
                        2,
                        2,
                        1,
                        2
                    ],
                    [
                        0,
                        2,
                        1,
                        0,
                        0,
                        0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/sports_competition/competition.csv')\ndf['Competition_type'] = df['Competition_type'].astype('category')\ndf['Country'] = df['Country'].astype('category')\n\ncompetition_counts = df.groupby(['Competition_type', 'Country']).size().unstack().fillna(0)\ncompetition_counts = competition_counts.loc[:, competition_counts.sum().sort_values(ascending=False).index]\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ncompetition_counts.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Competition Type')\nax.set_ylabel('Number of Competitions')\nax.set_title('Total Number of Competitions by Type and Country')\nfig.suptitle('')\n\nplt.show()",
            "addRule": null,
            "addExample": true
        }
    },
    "11@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "How many faculty members do we have for each rank and gender? Plot them as bar chart, I want to sort y axis in asc order.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Instructor",
                        "AssocProf",
                        "AsstProf",
                        "Professor"
                    ]
                ],
                "y_data": [
                    [
                        3.0,
                        1.0,
                        3.0,
                        0.0
                    ],
                    [
                        5.0,
                        7.0,
                        12.0,
                        27.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "AssocProf",
                        "AsstProf",
                        "Instructor",
                        "Professor"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        3,
                        3,
                        0
                    ],
                    [
                        7,
                        12,
                        5,
                        27
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/activity_1/Faculty.csv')\nrank_gender_count = df.groupby(['Rank', 'Sex']).size().unstack().fillna(0)\nrank_gender_sorted = rank_gender_count.sort_values(by='M', axis=0)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nrank_gender_sorted.plot(kind='bar', ax=ax, stacked=False)\nax.set_ylabel('Number of Faculty Members')\nax.set_xlabel('Rank')\nax.set_title('Number of Faculty Members by Rank and Gender')\nplt.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "22@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "Show the number of male and female assistant professors with a bar chart, list y axis in ascending order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "F",
                        "M"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        12
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "F",
                        "M"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        12
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/activity_1/Faculty.csv')\n\nasst_prof_counts = df[df['Rank'] == 'AsstProf']['Sex'].value_counts().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(asst_prof_counts.index, asst_prof_counts.values)\nax.set_xlabel('Sex')\nax.set_ylabel('Number of Assistant Professors')\nax.set_title('Number of Male and Female Assistant Professors')\nplt.suptitle('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1349@x_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "Draw a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by year, rank x axis in asc order.",
            "hardness": "Extra Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates, Incomplete data display",
            "fig_data": {
                "x_data": [
                    [
                        2003,
                        2008,
                        2009,
                        2010,
                        2011,
                        2012,
                        2013
                    ]
                ],
                "y_data": [
                    [
                        NaN,
                        NaN,
                        NaN,
                        1.0,
                        1.0,
                        NaN,
                        NaN
                    ],
                    [
                        1.0,
                        1.0,
                        1.0,
                        NaN,
                        NaN,
                        1.0,
                        1.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2003",
                        "2004",
                        "2005",
                        "2006",
                        "2007",
                        "2008",
                        "2009",
                        "2010",
                        "2011",
                        "2012",
                        "2013"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        0,
                        0,
                        1,
                        1
                    ]
                ]
            },
            "binning": "YEAR",
            "check_run": true,
            "check_dates": true,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/employee_hire_evaluation/hiring.csv')\ndf['Start_from'] = pd.to_datetime(df['Start_from'], format='%Y')\ndf_grouped = df.groupby([df['Start_from'].dt.year, 'Is_full_time']).size().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ndf_grouped.plot(ax=ax, marker='o')\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Employees Hired')\nax.set_title('Annual Employee Hiring by Employment Type')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "529@x_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Find the number of professors with a PhD degree in each department Show bar chart, and I want to sort x-axis in desc order.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "ACCT",
                        "CIS",
                        "BIOL",
                        "ENG",
                        "MATH",
                        "ART",
                        "ECON/FIN",
                        "HIST",
                        "MKT/MGT",
                        "PSYCH",
                        "SOC"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        3,
                        2,
                        2,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "SOC",
                        "PSYCH",
                        "MKT/MGT",
                        "MATH",
                        "HIST",
                        "ENG",
                        "ECON/FIN",
                        "CIS",
                        "BIOL",
                        "ART",
                        "ACCT"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        2,
                        1,
                        2,
                        1,
                        3,
                        2,
                        1,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/college_1/professor.csv')\nphd_counts = df[df['PROF_HIGH_DEGREE'] == 'Ph.D.'].groupby('DEPT_CODE').size().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nphd_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Department Code')\nax.set_ylabel('Number of Professors with Ph.D.')\nax.set_title('Number of Professors with Ph.D. in Each Department')\nplt.suptitle('')\n\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1215@y_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Find the number of students who are not in the largest major and group by students' first name in a bar chart, and rank from high to low by the y axis.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        1,
                        9,
                        0,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        10,
                        11
                    ]
                ],
                "y_data": [
                    [
                        "Eric",
                        "Sarah",
                        "David",
                        "George",
                        "Ian",
                        "Jun",
                        "Lisa",
                        "Mark",
                        "Michael",
                        "Paul",
                        "Stacy",
                        "William"
                    ],
                    [
                        4,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Eric",
                        "Sarah",
                        "William",
                        "Stacy",
                        "Paul",
                        "Michael",
                        "Mark",
                        "Lisa",
                        "Jun",
                        "Ian",
                        "George",
                        "David"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/dorm_1/student.csv')\n\nlargest_major = df['Major'].value_counts().idxmax()\nfiltered_df = df[df['Major'] != largest_major]\n\ngrouped_data = filtered_df.groupby('Fname').size().reset_index(name='Count')\nsorted_data = grouped_data.sort_values(by='Count', ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(sorted_data['Fname'], sorted_data['Count'], color='skyblue')\nax.set_xlabel('First Name of Students')\nax.set_ylabel('Number of Students')\nax.set_title('Number of Students Not in Largest Major by First Name')\nplt.xticks(rotation=45)\nplt.suptitle('')\nplt.tight_layout()\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1220@x_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "What is the average age of male students in each city? Draw a bar chart, show by the names in descending.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "LON",
                        "YYZ",
                        "NYC",
                        "ROC",
                        "ATL",
                        "CHI",
                        "PHL",
                        "PIT",
                        "HKG",
                        "DAL",
                        "BAL",
                        "NAR",
                        "BOS",
                        "WAS",
                        "LOS",
                        "DET",
                        "HOU",
                        "PEK"
                    ]
                ],
                "y_data": [
                    [
                        27.0,
                        22.5,
                        20.333333333333332,
                        20.0,
                        20.0,
                        20.0,
                        19.5,
                        19.333333333333332,
                        19.0,
                        18.0,
                        18.0,
                        18.0,
                        18.0,
                        18.0,
                        18.0,
                        17.0,
                        17.0,
                        17.0
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "YYZ",
                        "WAS",
                        "ROC",
                        "PIT",
                        "PHL",
                        "PEK",
                        "NYC",
                        "NAR",
                        "LOS",
                        "LON",
                        "HOU",
                        "HKG",
                        "DET",
                        "DAL",
                        "CHI",
                        "BOS",
                        "BAL",
                        "ATL"
                    ]
                ],
                "y_data": [
                    [
                        22.5,
                        18,
                        20,
                        19.33333333333333,
                        19.5,
                        17,
                        20.33333333333333,
                        18,
                        18,
                        27,
                        17,
                        19,
                        17,
                        18,
                        20,
                        18,
                        18,
                        20
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/dorm_1/student.csv')\ndf = df[df['Sex'] == 'M']\naverage_age = df.groupby('city_code')['Age'].mean().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(average_age.index, average_age.values)\nax.set_xlabel('City Code')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Male Students by City')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1225@y_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Find the number of students whose age is younger than the average age and group by students' first name in a bar chart, could you show in descending by the y axis?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        4,
                        9,
                        0,
                        1,
                        2,
                        3,
                        5,
                        6,
                        7,
                        8,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                ],
                "y_data": [
                    [
                        "Eric",
                        "Mark",
                        "Andy",
                        "Arthur",
                        "Charles",
                        "Derek",
                        "George",
                        "Jun",
                        "Linda",
                        "Lisa",
                        "Michael",
                        "Paul",
                        "Stacy",
                        "Susan",
                        "Tracy",
                        "William"
                    ],
                    [
                        3,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Eric",
                        "Mark",
                        "William",
                        "Tracy",
                        "Susan",
                        "Stacy",
                        "Paul",
                        "Michael",
                        "Lisa",
                        "Linda",
                        "Jun",
                        "George",
                        "Derek",
                        "Charles",
                        "Arthur",
                        "Andy"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/dorm_1/student.csv')\navg_age = df['Age'].mean()\nfiltered_df = df[df['Age'] < avg_age]\ngrouped = filtered_df.groupby('Fname').size().reset_index(name='count')\nsorted_data = grouped.sort_values(by='count', ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.bar(sorted_data['Fname'], sorted_data['count'], color='skyblue')\nax.set_title('Number of Students Younger than Average Age by First Name')\nax.set_xlabel('First Name')\nax.set_ylabel('Number of Students')\nplt.xticks(rotation=45)\nplt.tight_layout()\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1226@y_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Find the number of students whose age is younger than the average age and group by students' last name in a bar chart, and sort by the Y-axis in descending.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless subtitle, Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "Pang",
                        "Lee",
                        "Andreou",
                        "Tai",
                        "Smith",
                        "Simms",
                        "Schwartz",
                        "Schultz",
                        "Prater",
                        "Norris",
                        "Apap",
                        "Kim",
                        "Han",
                        "Goldman",
                        "Epp",
                        "Brody",
                        "Woods"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Pang",
                        "Lee",
                        "Woods",
                        "Tai",
                        "Smith",
                        "Simms",
                        "Schwartz",
                        "Schultz",
                        "Prater",
                        "Norris",
                        "Kim",
                        "Han",
                        "Goldman",
                        "Epp",
                        "Brody",
                        "Apap",
                        "Andreou"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        2,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/dorm_1/student.csv')\naverage_age = df['Age'].mean()\nyoung_students = df[df['Age'] < average_age]\nstudents_grouped = young_students.groupby('LName').size().sort_values(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nstudents_grouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Number of Students')\nplt.title('Number of Students Younger than Average Age Grouped by Last Name')\nfig.suptitle('{}')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "279@y_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month, could you show by the y-axis from high to low please?",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": false,
            "isStyleCorrect": false,
            "evaluation": "Failed to bin by month",
            "fig_data": {
                "x_data": [
                    [
                        "2018-02-28 05:38:58",
                        "2018-03-31 05:18:05",
                        "2018-03-31 09:00:48",
                        "2018-03-31 09:36:36",
                        "2018-03-31 14:08:54",
                        "2018-03-31 14:37:20"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Mar",
                        "Feb"
                    ]
                ],
                "y_data": [
                    [
                        5,
                        1
                    ]
                ]
            },
            "binning": "MONTH",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.tseries.offsets import MonthEnd\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Behavior_Incident.csv')\ndf['date_incident_end'] = pd.to_datetime(df['date_incident_end'])\ndf_noise = df[df['incident_type_code'] == 'NOISE']\ndf_noise['incident_end_month'] = df_noise['date_incident_end'] + MonthEnd(0)\nnoise_month_counts = df_noise['incident_end_month'].value_counts().sort_index()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nnoise_month_counts.sort_values(ascending=False).plot(kind='bar', ax=ax)\nax.set_xlabel('Month of Incident End')\nax.set_ylabel('Number of \"NOISE\" Incidents')\nax.set_title('Number of \"NOISE\" Incident End Dates by Month')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.api.types import CategoricalDtype\n\ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/Behavior_Incident.csv')\ndf['date_incident_end'] = pd.to_datetime(df['date_incident_end'])\ndf['incident_type_code'] = df['incident_type_code'].astype(CategoricalDtype(categories=['NOISE', 'DISTURB', 'VIOLENCE']))\n\nnoise_incidents = df[df['incident_type_code'] == 'NOISE']\nnoise_incidents['month_end'] = noise_incidents['date_incident_end'].dt.to_period('M')\n\nmonth_counts = noise_incidents['month_end'].value_counts().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nmonth_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Month of Incident End')\nax.set_ylabel('Number of NOISE Incidents')\nax.set_title('Number of NOISE Incident End Dates by Month')\nfig.suptitle(\"\")\nplt.xticks(rotation=45)\nplt.show()"
        }
    },
    "3267@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, display in asc by the sum population.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "Oceania",
                        "South America",
                        "Africa",
                        "Asia"
                    ]
                ],
                "y_data": [
                    [
                        30401150,
                        345780000,
                        784475000,
                        3705025700
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Oceania",
                        "South America",
                        "Africa",
                        "Asia"
                    ]
                ],
                "y_data": [
                    [
                        30401150,
                        345780000,
                        784475000,
                        3705025700
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/world_1/country.csv')\navg_life_expectancy = df.groupby('Continent')['LifeExpectancy'].mean()\ncontinents_below_72 = avg_life_expectancy[avg_life_expectancy < 72].index\ndf_filtered = df[df['Continent'].isin(continents_below_72)]\ntotal_population = df_filtered.groupby('Continent')['Population'].sum().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.bar(total_population.index, total_population.values, color='skyblue')\nax.set_xlabel('Continent')\nax.set_ylabel('Total Population')\nax.set_title('Total Population for Continents with Average Life Expectancy < 72')\n\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2950@y_name@ASC": {
        "0": {
            "belong": "Jing",
            "question": "Find those years for all exhibitions with ticket prices lower than 15, return a bar chart that groups by year and counts the total number of years, and I want to display in ascending by the total number.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Incomplete data display",
            "fig_data": {
                "x_data": [
                    [
                        2006,
                        2009
                    ]
                ],
                "y_data": [
                    [
                        1,
                        1
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "2007",
                        "2008",
                        "2006",
                        "2009"
                    ]
                ],
                "y_data": [
                    [
                        0,
                        0,
                        1,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('./visEval_dataset/databases/theme_gallery/exhibition.csv')\nfiltered_df = df[df['Ticket_Price'] < 15]\nyear_counts = filtered_df.groupby('Year').size().reset_index(name='Count')\nyear_counts_sorted = year_counts.sort_values(by='Count')\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.bar(year_counts_sorted['Year'].astype(str), year_counts_sorted['Count'])\nax.set_xlabel('Year')\nax.set_ylabel('Number of Exhibitions')\nplt.title('Number of Exhibitions with Ticket Price < 15 by Year')\nfig.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "1979@y_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Find the number of rooms with price higher than 120 for different decor Show bar chart, and list by the Y in descending.",
            "hardness": "Hard",
            "chart": "Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Meaningless Y axis decimal coordinates",
            "fig_data": {
                "x_data": [
                    [
                        "traditional",
                        "modern",
                        "rustic"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        2,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "traditional",
                        "rustic",
                        "modern"
                    ]
                ],
                "y_data": [
                    [
                        4,
                        2,
                        2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/inn_1/Rooms.csv')\nfiltered_df = df[df['basePrice'] > 120]\ndecor_count = filtered_df['decor'].value_counts().sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ndecor_count.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Decor Style')\nax.set_ylabel('Number of Rooms')\nax.set_title('Number of Rooms with Base Price > 120 by Decor Style')\nplt.suptitle('')\n\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2755@x_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Show me a stacked bar graph, the x-axis is the nationality of ship, and the y-axis is their total number of different nationality and split by ship type, and show X-axis in desc order.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        "United Kingdom",
                        "United States"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        1
                    ],
                    [
                        3,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "United States",
                        "United Kingdom"
                    ]
                ],
                "y_data": [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/ship_mission/ship.csv')\n\nnationality_counts = df.groupby(['Nationality', 'Type']).size().unstack(fill_value=0)\nnationality_counts = nationality_counts.loc[nationality_counts.sum(axis=1).sort_values(ascending=False).index]\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nnationality_counts.plot(kind='bar', stacked=True, ax=ax)\n\nax.set_title('Ship Type Distribution by Nationality')\nax.set_xlabel('Nationality')\nax.set_ylabel('Number of Ships')\nplt.suptitle('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "2756@x_name@DESC": {
        "0": {
            "belong": "Jing",
            "question": "Stack bar chart of the number of type vs Nationality based on type, and list x-axis in descending order.",
            "hardness": "Hard",
            "chart": "Stacked Bar",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Failed to sort x-axis in descending order",
            "fig_data": {
                "x_data": [
                    [
                        "Battle ship",
                        "Cargo ship"
                    ]
                ],
                "y_data": [
                    [
                        2,
                        3
                    ],
                    [
                        1,
                        2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        "Cargo ship",
                        "Battle ship"
                    ]
                ],
                "y_data": [
                    [
                        3,
                        2
                    ],
                    [
                        2,
                        1
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/ship_mission/ship.csv')\n\ndf_grouped = df.groupby(['Type', 'Nationality']).size().unstack()\n\ndf_grouped = df_grouped.loc[:, df_grouped.sum(axis=0).sort_values(ascending=False).index]\n\nfig, ax = plt.subplots(figsize=(10, 4))\ndf_grouped.plot(kind='bar', stacked=True, ax=ax)\n\nax.set_xlabel('Ship Type')\nax.set_ylabel('Number of Ships')\nax.set_title('Number of Ships by Type and Nationality')\nfig.suptitle('')",
            "addRule": null,
            "addExample": null
        }
    },
    "4015": {
        "0": {
            "belong": "Jing",
            "question": "Show the relationship between the number of staff and the score of the shop. Scatter plot is preferred.",
            "hardness": "Extra Hard",
            "chart": "Scatter",
            "isDataCorrect": true,
            "isStyleCorrect": true,
            "evaluation": null,
            "fig_data": {
                "x_data": [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                "y_data": [
                    [
                        "1200 Main Street",
                        "1111 Main Street",
                        "1330 Baltimore Street",
                        "909 Walnut Street",
                        "414 E. 12th Street",
                        "1201 Walnut Street",
                        "2345 McGee Street",
                        "909 Main Street",
                        "1100 Main Street",
                        "324 E. 11th Street"
                    ],
                    [
                        13,
                        19,
                        42,
                        27,
                        24,
                        34,
                        425,
                        28,
                        23,
                        16
                    ],
                    [
                        42.0,
                        38.0,
                        36.0,
                        32.0,
                        30.0,
                        30.0,
                        40.0,
                        30.0,
                        30.0,
                        28.0
                    ],
                    [
                        2010,
                        2008,
                        2010,
                        2010,
                        2011,
                        2010,
                        2008,
                        2011,
                        2006,
                        2008
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        13,
                        19,
                        42,
                        27,
                        24,
                        34,
                        425,
                        28,
                        23,
                        16
                    ]
                ],
                "y_data": [
                    [
                        42.0,
                        38.0,
                        36.0,
                        32.0,
                        30.0,
                        30.0,
                        40.0,
                        30.0,
                        30.0,
                        28.0
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/coffee_shop/shop.csv')\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nax.scatter(df['Num_of_staff'], df['Score'], alpha=0.7, edgecolors='w', s=80)\nax.set_xlabel('Number of Staff')\nax.set_ylabel('Score')\nax.set_title('Relationship Between Number of Staff and Shop Score')\n\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": null
        }
    },
    "4033": {
        "0": {
            "belong": "Jing",
            "question": "From 1973 to 1979, show the maximum acceleration of cars with 4, 6, and 8 cylinders each year. Line chart.",
            "hardness": "Hard",
            "chart": "Grouping Line",
            "isDataCorrect": true,
            "isStyleCorrect": false,
            "evaluation": "Failed to sort, meaningless subtitle",
            "fig_data": {
                "x_data": [
                    [
                        1973,
                        1974,
                        1975,
                        1976,
                        1977,
                        1978,
                        1979
                    ]
                ],
                "y_data": [
                    [
                        13.5,
                        NaN,
                        NaN,
                        NaN,
                        13.5,
                        NaN,
                        NaN
                    ],
                    [
                        21.0,
                        21.0,
                        18.5,
                        22.2,
                        18.6,
                        21.5,
                        24.8
                    ],
                    [
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        NaN,
                        15.9,
                        20.1
                    ],
                    [
                        18.0,
                        18.0,
                        21.0,
                        21.0,
                        19.0,
                        19.2,
                        18.2
                    ],
                    [
                        14.5,
                        16.0,
                        14.5,
                        15.0,
                        19.0,
                        15.5,
                        22.2
                    ]
                ]
            },
            "nv_data": {
                "x_data": [
                    [
                        1973,
                        1974,
                        1975,
                        1976,
                        1977,
                        1978,
                        1979
                    ]
                ],
                "y_data": [
                    [
                        21.0,
                        21.0,
                        18.5,
                        22.2,
                        18.6,
                        21.5,
                        24.8
                    ],
                    [
                        18.0,
                        18.0,
                        21.0,
                        21.0,
                        19.0,
                        19.2,
                        18.2
                    ],
                    [
                        14.5,
                        16.0,
                        14.5,
                        15.0,
                        19.0,
                        15.5,
                        22.2
                    ]
                ]
            },
            "binning": "",
            "check_run": true,
            "check_dates": null,
            "check_overflow": true,
            "check_overlap": true,
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('./visEval_dataset/databases/car_1/cars_data.csv')\ndf_filtered = df[(df['Year'] >= 1973) & (df['Year'] <= 1979)]\ndf_grouped = df_filtered.groupby(['Year', 'Cylinders'])['Accelerate'].max().unstack()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ndf_grouped.plot(ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Max Acceleration')\nax.set_title('Max Acceleration of Cars by Cylinders (1973-1979)')\nplt.suptitle('')\nplt.show()",
            "addRule": null,
            "addExample": true
        }
    }
}