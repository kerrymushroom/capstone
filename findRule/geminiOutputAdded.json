{
  "189": {
    "0": {
      "belong": "Kerry",
      "question": "Show me about the distribution of date_address_to and the amount of date_address_to, and group by attribute other_details and bin date_address_to by month in a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "2018-02",
            "2018-03"
          ]
        ],
        "y_data": [
          [
            1297.3186,
            6052.6934
          ],
          [
            747.5312,
            10726.4778
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Feb",
            "Mar"
          ]
        ],
        "y_data": [
          [
            1,
            6
          ],
          [
            1,
            12
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'behavior_monitoring'\ndf_name = 'student_addresses'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['month'] = df['date_address_to'].dt.to_period('M')\nmonthly_rental_by_month_and_type = df.groupby(['month', 'other_details'])['monthly_rental'].sum().unstack()\nmonthly_rental_by_month_and_type.plot(kind='bar', ax=ax)\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nax.set_xlabel('Date Address To (Month)')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Distribution of Monthly Rental by Date Address To and Housing Type')\nfig.suptitle('')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "194": {
    "0": {
      "belong": "Kerry",
      "question": "Show me about the distribution of date_address_to and the sum of monthly_rental, and group by attribute other_details and bin date_address_to by month in a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "2018-02",
            "2018-03"
          ]
        ],
        "y_data": [
          [
            1297.3186,
            6052.6934
          ],
          [
            747.5312,
            10726.4778
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Feb",
            "Mar"
          ]
        ],
        "y_data": [
          [
            1297.3186,
            6052.69338
          ],
          [
            747.5312,
            10726.4778
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['month'] = df['date_address_to'].dt.to_period('M')\nmonthly_rental_by_month_and_type = df.groupby(['month','other_details'])['monthly_rental'].sum().unstack()\nmonthly_rental_by_month_and_type.plot(kind='bar',ax=ax)\nax.set_xlabel('Month')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Distribution of Monthly Rental by Address Type and Month')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "195": {
    "0": {
      "belong": "Kerry",
      "question": "Give me the comparison about the average of monthly_rental over the  date_address_to , and group by attribute other_details and bin date_address_to by month by a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "2018-02",
            "2018-03"
          ]
        ],
        "y_data": [
          [
            1297.3186,
            1008.7822333333334
          ],
          [
            747.5312,
            893.87315
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Feb",
            "Mar"
          ]
        ],
        "y_data": [
          [
            1297.3186,
            1008.78223
          ],
          [
            747.5312,
            893.87315
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['month'] = df['date_address_to'].dt.to_period('M')\nmonthly_rental_by_month_and_type = df.groupby(['month', 'other_details'])['monthly_rental'].mean().unstack()\nmonthly_rental_by_month_and_type.plot(kind='bar', ax=ax)\nax.set_xlabel('Month')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Average Monthly Rental by Address Type and Month')\nfig.suptitle('')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "196": {
    "0": {
      "belong": "Kerry",
      "question": "A bar chart shows the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by year.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2017,
            2018
          ]
        ],
        "y_data": [
          [
            5,
            2
          ],
          [
            9,
            4
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2017",
            "2018"
          ]
        ],
        "y_data": [
          [
            5,
            2
          ],
          [
            9,
            4
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year'] = df['date_address_from'].dt.year\ndf_grouped = df.groupby(['year','other_details'])['date_address_from'].count().unstack()\ndf_grouped.plot(kind='bar',ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Count of Addresses')\nax.set_title('Distribution of Address Start Dates by Year and Housing Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "201": {
    "0": {
      "belong": "Kerry",
      "question": "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by year by a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2017,
            2018
          ]
        ],
        "y_data": [
          [
            5019.3333,
            2330.6787
          ],
          [
            8296.2672,
            3177.7418
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2017",
            "2018"
          ]
        ],
        "y_data": [
          [
            5019.3333,
            2330.6787
          ],
          [
            8296.2672,
            3177.7418
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year'] = df['date_address_from'].dt.year\ndf_grouped = df.groupby(['year','other_details'])['monthly_rental'].sum().unstack()\ndf_grouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Sum of Monthly Rental by Year and Housing Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "202": {
    "0": {
      "belong": "Kerry",
      "question": "Visualize a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by year.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "apartment",
            "house"
          ]
        ],
        "y_data": [
          [
            1003.86666,
            921.8074666666666
          ],
          [
            1165.33935,
            794.43545
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2017",
            "2018"
          ]
        ],
        "y_data": [
          [
            1003.86666,
            1165.33935
          ],
          [
            921.8074667,
            794.43545
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\ndatabase_name = \"behavior_monitoring\"\ndf_name = \"student_addresses\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['year'] = df['date_address_from'].dt.year\ndf_grouped = df.groupby(['other_details', 'year'])['monthly_rental'].mean().unstack()\ndf_grouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Other Details')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Distribution of Date Address From and Average Monthly Rental by Other Details')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "210": {
    "0": {
      "belong": "Kerry",
      "question": "Find  date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "apartment",
            "house"
          ]
        ],
        "y_data": [
          [
            2330.7852000000003,
            679.2988
          ],
          [
            NaN,
            2835.2129999999997
          ],
          [
            2044.1059,
            865.2615
          ],
          [
            1032.8717,
            1894.2702
          ],
          [
            NaN,
            2007.1954
          ],
          [
            1942.2492000000002,
            3192.7700999999997
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            2330.7852,
            0,
            2044.1059,
            1032.8717,
            0,
            0,
            1942.2492
          ],
          [
            679.2988,
            2835.213,
            865.2615,
            1894.2702,
            2007.1954,
            0,
            3192.7701
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['weekday'] = df['date_address_to'].dt.dayofweek\ndf_grouped = df.groupby(['other_details', 'weekday'])['monthly_rental'].sum().unstack()\ndf_grouped.plot(kind='bar', ax=ax)\nax.set_xlabel('Other Details')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Sum of Monthly Rental by Other Details and Weekday')\nfig.suptitle('')\nplt.xticks(rotation=0)\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "211": {
    "0": {
      "belong": "Kerry",
      "question": "Find  date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday, and visualize them by a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "apartment",
            "house"
          ]
        ],
        "y_data": [
          [
            1165.3926000000001,
            679.2988
          ],
          [
            NaN,
            945.0709999999999
          ],
          [
            1022.05295,
            865.2615
          ],
          [
            1032.8717,
            947.1351
          ],
          [
            NaN,
            1003.5977
          ],
          [
            971.1246000000001,
            798.1925249999999
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            1165.3926,
            0,
            1022.05295,
            1032.8717,
            0,
            0,
            971.1246
          ],
          [
            679.2988,
            945.071,
            865.2615,
            947.1351,
            1003.5977,
            0,
            798.1925
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_to'] = pd.to_datetime(df['date_address_to'])\ndf['weekday'] = df['date_address_to'].dt.dayofweek\ndf['weekday'] = df['weekday'].astype(str)\nresult = df.groupby(['other_details','weekday'])['monthly_rental'].mean().unstack()\nresult.plot(kind='bar',ax=ax)\nax.set_xlabel('Other Details')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Average Monthly Rental by Other Details and Weekday')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "224": {
    "0": {
      "belong": "Kerry",
      "question": "Give me the comparison about the sum of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "apartment",
            "house"
          ]
        ],
        "y_data": [
          [
            1297.807,
            2864.7297
          ],
          [
            1032.8717,
            2559.8116
          ],
          [
            1032.9782,
            1867.9596999999999
          ],
          [
            1007.2597,
            2559.572
          ],
          [
            644.9306,
            756.6745
          ],
          [
            1297.3186,
            865.2615
          ],
          [
            1036.8462,
            NaN
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            1032.8717,
            1297.3186,
            1036.8462,
            644.9306,
            1297.807,
            1032.9782,
            1007.2597
          ],
          [
            2559.8116,
            865.2615,
            0,
            756.6745,
            2864.7297,
            1867.9597,
            2559.572
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/student_addresses.csv')\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['weekday'] = df['date_address_from'].dt.dayofweek\ndf['weekday_name'] = df['date_address_from'].dt.day_name()\nrental_by_weekday = df.groupby(['other_details', 'weekday_name'])['monthly_rental'].sum().unstack()\nrental_by_weekday.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Sum of Monthly Rental')\nax.set_title('Sum of Monthly Rental by Weekday and Housing Type')\nfig.suptitle('')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "225": {
    "0": {
      "belong": "Kerry",
      "question": "Draw a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            1032.8717,
            1297.3186,
            1036.8462,
            644.9306,
            1297.807,
            1032.9782,
            1007.2597
          ]
        ],
        "y_data": [
          [
            853.2705333333333,
            865.2615,
            NaN,
            756.6745,
            954.9099,
            933.9798499999999,
            853.1906666666667
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            1032.8717,
            1297.3186,
            1036.8462,
            644.9306,
            1297.807,
            1032.9782,
            1007.2597
          ],
          [
            853.27055,
            865.2615,
            0,
            756.6745,
            954.9099,
            933.97985,
            853.19065
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = \"behavior_monitoring\"\ndf_name = \"student_addresses\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ndf['date_address_from'] = pd.to_datetime(df['date_address_from'])\ndf['weekday'] = df['date_address_from'].dt.dayofweek\ndf['month'] = df['date_address_from'].dt.month\n\npivot_df = df.pivot_table(index=['weekday', 'other_details'], values='monthly_rental', aggfunc='mean')\npivot_df = pivot_df.unstack()\n\npivot_df.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Weekday')\nax.set_ylabel('Average Monthly Rental')\nax.set_title('Distribution of Date Address From and Average Monthly Rental')\nfig.suptitle('')\nplt.xticks(rotation=0)\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "291": {
    "0": {
      "belong": "Kerry",
      "question": "For the days with the 3 largest maximum wind speeds, show me the frequency of their corresponding date in the weekdays level using a bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Thursday",
            "Tuesday"
          ]
        ],
        "y_data": [
          [
            10,
            5
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Tue",
            "Thur"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport calendar\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'bike_1'\ndf_name = 'weather'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['weekday'] = df['date'].dt.day_name()\ntop_wind_days = df.nlargest(3, 'max_wind_Speed_mph')['date']\nweekday_counts = df[df['date'].isin(top_wind_days)]['weekday'].value_counts()\nweekday_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Frequency')\nax.set_title('Frequency of Top 3 Maximum Wind Speed Days by Weekday')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "293": {
    "0": {
      "belong": "Kerry",
      "question": "For the top 3 days with the largest max wind speeds, please bin the date into the day of the week and then sum the mean temperature for a bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Tue",
            "Thur"
          ]
        ],
        "y_data": [
          [
            58,
            143
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport calendar\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"bike_1\"\ndf_name = \"weather\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ntop_3_wind = df.nlargest(3, 'max_wind_Speed_mph')\ntop_3_wind['day_of_week'] = pd.to_datetime(top_3_wind['date']).dt.dayofweek\ntop_3_wind['day_name'] = top_3_wind['day_of_week'].apply(lambda x: calendar.day_name[x])\ntemp_by_day = top_3_wind.groupby('day_name')['mean_temperature_f'].sum()\ntemp_by_day.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Sum of Mean Temperature (\u00b0F)')\nax.set_title('Sum of Mean Temperature for Top 3 Days with Highest Max Wind Speed')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "295": {
    "0": {
      "belong": "Kerry",
      "question": "For the top 3 days with the largest max wind speeds, please bin the date into day of the week and then sum the mean humidity to visualize a bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        ],
        "y_data": [
          [
            0.0,
            52.0,
            0.0,
            118.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Tue",
            "Thur"
          ]
        ],
        "y_data": [
          [
            52,
            118
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport calendar\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'bike_1'\ndf_name = 'weather'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['day_of_week'] = df['date'].dt.day_name()\ntop_3_wind = df.nlargest(3, 'max_wind_Speed_mph')\ntop_3_wind['day_of_week'] = pd.Categorical(top_3_wind['day_of_week'], categories=list(calendar.day_name),ordered=True)\nresult = top_3_wind.groupby('day_of_week')['mean_humidity'].sum()\nresult.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Sum of Mean Humidity')\nax.set_title('Sum of Mean Humidity for Top 3 Days with Highest Max Wind Speed')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "296": {
    "0": {
      "belong": "Kerry",
      "question": "For the top 3 days with the largest max wind speeds, please bin the date into the of the week and then compute the average of mean humidity to visualize a bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            1,
            3
          ]
        ],
        "y_data": [
          [
            52.0,
            59.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Thur"
          ]
        ],
        "y_data": [
          [
            52,
            59
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = \"bike_1\"\ndf_name = \"weather\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ntop_3_wind = df.nlargest(3, 'max_wind_Speed_mph')\ntop_3_wind['date'] = pd.to_datetime(top_3_wind['date'])\ntop_3_wind['day_of_week'] = top_3_wind['date'].dt.dayofweek\navg_humidity_by_day = top_3_wind.groupby('day_of_week')['mean_humidity'].mean()\n\navg_humidity_by_day.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Average Mean Humidity')\nax.set_title('Average Mean Humidity for Top 3 Days with Highest Max Wind Speed')\nfig.suptitle('')\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "312": {
    "0": {
      "belong": "Kerry",
      "question": "Give me the proportion of end stations for the trips with the three oldest id using a pie chart.",
      "hardness": "Hard",
      "chart": "Pie",
      "isDataCorrect": false,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Harry Bridges Plaza (Ferry Building)",
            "San Francisco Caltrain 2 (330 Townsend)"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": null,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndatabase_name = 'bike_1'\ndf_name = 'trip'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\noldest_trips = df.nsmallest(3, 'id')\nend_station_counts = oldest_trips['end_station_id'].value_counts()\nax.pie(end_station_counts, labels=end_station_counts.index, autopct='%1.1f%%', startangle=140)\nax.axis('equal')\nax.set_xlabel('End Station ID')\nax.set_ylabel('Proportion of Trips')\nax.set_title('Proportion of End Stations for the Three Oldest Trips')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "516": {
    "0": {
      "belong": "Kerry",
      "question": "What are the first names of all employees that are professors ordered by date of birth, and count them by a bar chart",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Robert",
            "Ronald",
            "Hermine",
            "Anne",
            "Doreen",
            "Annelise",
            "Herman",
            "Willa",
            "Ismael",
            "Van",
            "Arnelle",
            "Gerald",
            "Carlos",
            "Preston",
            "George",
            "Melanie",
            "James",
            "Ross",
            "Peter",
            "Ralph"
          ]
        ],
        "y_data": [
          [
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Anne",
            "Annelise",
            "Arnelle",
            "Carlos",
            "Doreen",
            "George",
            "Gerald",
            "Herman",
            "Hermine",
            "Ismael",
            "James",
            "Melanie",
            "Peter",
            "Preston",
            "Ralph",
            "Robert",
            "Ronald",
            "Ross",
            "Van",
            "Willa"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            2,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'college_1'\ndf_name = 'employee'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nprofessors = df[df['EMP_JOBCODE'] == 'PROF']\nprofessors = professors.sort_values('EMP_DOB')\nfirst_names = professors['EMP_FNAME']\nname_counts = first_names.value_counts()\nname_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('First Name')\nax.set_ylabel('Count')\nax.set_title('First Names of Professors Ordered by Date of Birth')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "659": {
    "0": {
      "belong": "Kerry",
      "question": "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": "nvBench answer is wrong",
      "fig_data": {
        "x_data": [
          [
            "Smith",
            "Schmidt",
            "Jones",
            "Cheng",
            "Nelson",
            "Kim",
            "Apap",
            "Prater",
            "Lee"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Apap",
            "Cheng",
            "Jones",
            "Kim",
            "Lee",
            "Nelson",
            "Prater",
            "Schmidt",
            "Smith"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'college_3'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nfemale_students = df[df['Sex'] == 'F'].sort_values('Age', ascending=False)\nlname_counts = female_students['LName'].value_counts()\nlname_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Count')\nax.set_title('Count of Female Students by Last Name (Descending Order of Age)')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "778": {
    "0": {
      "belong": "Kerry",
      "question": "Give me a group line chart showing the number of days with max humidity higher than 80 in different area each year.",
      "hardness": "Hard",
      "chart": "Grouping Line",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2013,
            2014,
            2015
          ]
        ],
        "y_data": [
          [
            65,
            259,
            182
          ],
          [
            102,
            310,
            207
          ],
          [
            76,
            285,
            216
          ],
          [
            86,
            243,
            209
          ],
          [
            91,
            289,
            175
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            2013,
            2014,
            2015
          ]
        ],
        "y_data": [
          [
            65,
            259,
            182
          ],
          [
            102,
            310,
            207
          ],
          [
            76,
            285,
            216
          ],
          [
            86,
            243,
            209
          ],
          [
            91,
            289,
            175
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"bike_1\"\ndf_name = \"weather\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['high_humidity'] = (df['max_humidity'] > 80).astype(int)\nhumidity_by_year = df.groupby(['year', 'zip_code'])['high_humidity'].sum().unstack()\nhumidity_by_year.plot(kind='line', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Days with Max Humidity > 80')\nax.set_title('Number of Days with Max Humidity > 80 per Year by Zip Code')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1007": {
    "0": {
      "belong": "Kerry",
      "question": "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a pie chart.",
      "hardness": "Hard",
      "chart": "Pie",
      "isDataCorrect": null,
      "isStyleCorrect": null,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Clothes",
            "Hardware"
          ]
        ],
        "y_data": [
          [
            5,
            8
          ]
        ]
      },
      "binning": "",
      "check_run": "Error: '<500'",
      "check_integer": null,
      "check_dates": null,
      "check_overflow": null,
      "check_overlap": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\ndf['price_range'] = pd.cut(df['product_price'], bins=[-float('inf'), 500, 1000, float('inf')], labels=['<500', '500-1000', '>1000'], right=False)\nprice_range_counts = df.groupby(['product_type_code', 'price_range']).size().unstack()\nprice_range_counts = price_range_counts[['<500', '>1000']]\nprice_range_counts = price_range_counts.rename(columns={'<500':'<500 or >1000'})\nprice_range_counts['<500 or >1000'] = price_range_counts['<500'] + price_range_counts['>1000']\nprice_range_counts = price_range_counts.drop(columns=['<500', '>1000'])\nprice_range_counts.plot(kind='pie', subplots=True, autopct='%1.1f%%', figsize=(10, 4), ax=ax, y='<500 or >1000', labels=price_range_counts.index)\nax.set_ylabel('')\nax.set_xlabel('')\nax.set_title('Number of Products with Price <500 or >1000 per Product Type')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1008": {
    "0": {
      "belong": "Kerry",
      "question": "Show the number of products with price higher than 1000 or lower than 500 for each product name in a pie chart.",
      "hardness": "Hard",
      "chart": "Pie",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Apple",
            "Sony",
            "gucci",
            "jcrew"
          ]
        ],
        "y_data": [
          [
            40.0,
            33.33333333333333,
            0.0,
            33.33333333333333
          ],
          [
            60.0,
            66.66666666666666,
            100.0,
            66.66666666666666
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Apple",
            "Sony",
            "gucci",
            "jcrew"
          ]
        ],
        "y_data": [
          [
            5,
            3,
            2,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": null,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": false,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\ndf['price_range'] = pd.cut(df['product_price'], bins=[-float('inf'), 500, 1000, float('inf')], labels=['<500', '500-1000', '>1000'], right=False)\nprice_counts = df.groupby('product_name')['price_range'].value_counts().unstack()\nprice_counts = price_counts[['<500', '>1000']].fillna(0)\nprice_counts['total'] = price_counts['<500'] + price_counts['>1000']\nprice_counts_percentage = price_counts[['<500', '>1000']].div(price_counts['total'], axis=0) * 100\nprice_counts_percentage.plot(kind='pie', subplots=True, autopct='%1.1f%%', figsize=(12, 6), ax=ax,  title='Number of Products with Price <500 or >1000 per Product Name')\nax.set_ylabel('')\nfig.suptitle('')\nplt.xlabel('Product Name')\nplt.ylabel('Percentage')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1482": {
    "0": {
      "belong": "Kerry",
      "question": "List the number of games in each season and group by home team in a group line chart.",
      "hardness": "Hard",
      "chart": "Grouping Line",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013
          ]
        ],
        "y_data": [
          [
            NaN,
            2.0,
            1.0,
            1.0,
            1.0,
            3.0,
            1.0
          ],
          [
            2.0,
            1.0,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0
          ],
          [
            1.0,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013"
          ]
        ],
        "y_data": [
          [
            0,
            2,
            1,
            1,
            1,
            3,
            1
          ],
          [
            2,
            1,
            2,
            1,
            1,
            2,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'game_injury'\ndf_name = 'game'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ngames_per_season = df.groupby(['Season', 'Home_team']).size().unstack()\ngames_per_season.plot(kind='line', ax=ax)\nax.set_xlabel('Season')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games per Season by Home Team')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1556": {
    "0": {
      "belong": "Kerry",
      "question": "For all employees who have the letters D or S in their first name, visualize a line chart about the change of  salary over  hire_date .",
      "hardness": "Hard",
      "chart": "Line",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "1987-06-17",
            "1987-09-30",
            "1987-08-24",
            "1987-07-01",
            "1987-08-04",
            "1987-08-25",
            "1987-08-07",
            "1987-08-19",
            "1987-06-20",
            "1987-06-26",
            "1987-08-31",
            "1987-07-08",
            "1987-08-09",
            "1987-08-15",
            "1987-06-29",
            "1987-06-28",
            "1987-08-16",
            "1987-08-17",
            "1987-06-30",
            "1987-08-21",
            "1987-07-10",
            "1987-09-28",
            "1987-08-22",
            "1987-09-04",
            "1987-08-29",
            "1987-06-22",
            "1987-06-24",
            "1987-09-09",
            "1987-09-10",
            "1987-09-17",
            "1987-07-24",
            "1987-07-20",
            "1987-07-25",
            "1987-09-05",
            "1987-09-19",
            "1987-07-02",
            "1987-07-29",
            "1987-07-03",
            "1987-07-04",
            "1987-09-08",
            "1987-07-30",
            "1987-09-23",
            "1987-09-24",
            "1987-07-18",
            "1987-07-27",
            "1987-09-16",
            "1987-07-14",
            "1987-07-15"
          ]
        ],
        "y_data": [
          [
            24000,
            12000,
            11500,
            11000,
            11000,
            10000,
            9500,
            9500,
            9000,
            9000,
            8800,
            8200,
            8000,
            8000,
            7800,
            7700,
            7500,
            7000,
            6900,
            6800,
            6500,
            6500,
            6400,
            6200,
            6100,
            4800,
            4200,
            4200,
            4100,
            4000,
            3600,
            3300,
            3200,
            3200,
            3200,
            3100,
            3100,
            2900,
            2800,
            2800,
            2600,
            2600,
            2600,
            2500,
            2500,
            2500,
            2400,
            2200
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport re\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf_filtered = df[df['FIRST_NAME'].str.contains('[DS]', flags=re.IGNORECASE, regex=True)]\ndf_filtered = df_filtered.sort_values('HIRE_DATE')\nax.plot(df_filtered['HIRE_DATE'],df_filtered['SALARY'])\nax.set_xlabel('Hire Date')\nax.set_ylabel('Salary')\nax.set_title('Salary Change Over Hire Date for Employees with D or S in First Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1563": {
    "0": {
      "belong": "Kerry",
      "question": "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the average of salary , and group by attribute job_id in a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "AC_MGR",
            "AD_PRES",
            "FI_ACCOUNT",
            "HR_REP",
            "IT_PROG",
            "PU_CLERK",
            "PU_MAN",
            "SA_MAN",
            "SA_REP",
            "SH_CLERK",
            "ST_CLERK",
            "ST_MAN"
          ]
        ],
        "y_data": [
          [
            12000.0,
            24000.0,
            7850.0,
            6500.0,
            6000.0,
            2933.3333333333335,
            11000.0,
            11000.0,
            8100.0,
            3244.4444444444443,
            2822.222222222222,
            7350.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "AC_MGR",
            "AD_PRES",
            "FI_ACCOUNT",
            "HR_REP",
            "IT_PROG",
            "PU_CLERK",
            "PU_MAN",
            "SA_MAN",
            "SA_REP",
            "SH_CLERK",
            "ST_CLERK",
            "ST_MAN"
          ]
        ],
        "y_data": [
          [
            12000,
            24000,
            7850,
            6500,
            6000,
            2933.3333333333335,
            11000,
            11000,
            8100,
            3244.4444444444443,
            2822.222222222222,
            7350
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['FIRST_NAME'] = df['FIRST_NAME'].astype(str)\ndf_filtered = df[df['FIRST_NAME'].str.contains('[DS]',case=False)]\ngrouped = df_filtered.groupby('JOB_ID')['SALARY'].mean().reset_index()\ngrouped.plot(kind='bar',x='JOB_ID',y='SALARY',ax=ax)\nax.set_xlabel('Job ID')\nax.set_ylabel('Average Salary')\nax.set_title('Average Salary by Job ID for Employees with \"D\" or \"S\" in First Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1574": {
    "0": {
      "belong": "Kerry",
      "question": "For all employees who have the letters D or S in their first name, show me about the correlation between  salary and  commission_pct  in a scatter chart.",
      "hardness": "Hard",
      "chart": "Scatter",
      "isDataCorrect": false,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            0,
            5,
            7,
            9,
            14,
            16,
            17,
            23,
            28,
            38,
            51,
            61,
            63,
            65,
            66,
            73,
            92,
            94,
            98,
            99,
            103,
            105
          ]
        ],
        "y_data": [
          [
            100,
            105,
            107,
            109,
            114,
            116,
            117,
            123,
            128,
            138,
            151,
            161,
            163,
            165,
            166,
            173,
            192,
            194,
            198,
            199,
            203,
            205
          ],
          [
            "Steven",
            "David",
            "Diana",
            "Daniel",
            "Den",
            "Shelli",
            "Sigal",
            "Shanta",
            "Steven",
            "Stephen",
            "David",
            "Sarath",
            "Danielle",
            "David",
            "Sundar",
            "Sundita",
            "Sarah",
            "Samuel",
            "Donald",
            "Douglas",
            "Susan",
            "Shelley"
          ],
          [
            "King",
            "Austin",
            "Lorentz",
            "Faviet",
            "Raphaely",
            "Baida",
            "Tobias",
            "Vollman",
            "Markle",
            "Stiles",
            "Bernstein",
            "Sewall",
            "Greene",
            "Lee",
            "Ande",
            "Kumar",
            "Bell",
            "McCain",
            "OConnell",
            "Grant",
            "Mavris",
            "Higgins"
          ],
          [
            "SKING",
            "DAUSTIN",
            "DLORENTZ",
            "DFAVIET",
            "DRAPHEAL",
            "SBAIDA",
            "STOBIAS",
            "SVOLLMAN",
            "SMARKLE",
            "SSTILES",
            "DBERNSTE",
            "SSEWALL",
            "DGREENE",
            "DLEE",
            "SANDE",
            "SKUMAR",
            "SBELL",
            "SMCCAIN",
            "DOCONNEL",
            "DGRANT",
            "SMAVRIS",
            "SHIGGINS"
          ],
          [
            "515.123.4567",
            "590.423.4569",
            "590.423.5567",
            "515.124.4169",
            "515.127.4561",
            "515.127.4563",
            "515.127.4564",
            "650.123.4234",
            "650.124.1434",
            "650.121.2034",
            "011.44.1344.345268",
            "011.44.1345.529268",
            "011.44.1346.229268",
            "011.44.1346.529268",
            "011.44.1346.629268",
            "011.44.1343.329268",
            "650.501.1876",
            "650.501.3876",
            "650.507.9833",
            "650.507.9844",
            "515.123.7777",
            "515.123.8080"
          ],
          [
            "1987-06-17",
            "1987-06-22",
            "1987-06-24",
            "1987-06-26",
            "1987-07-01",
            "1987-07-03",
            "1987-07-04",
            "1987-07-10",
            "1987-07-15",
            "1987-07-25",
            "1987-08-07",
            "1987-08-17",
            "1987-08-19",
            "1987-08-21",
            "1987-08-22",
            "1987-08-29",
            "1987-09-17",
            "1987-09-19",
            "1987-09-23",
            "1987-09-24",
            "1987-09-28",
            "1987-09-30"
          ],
          [
            "AD_PRES",
            "IT_PROG",
            "IT_PROG",
            "FI_ACCOUNT",
            "PU_MAN",
            "PU_CLERK",
            "PU_CLERK",
            "ST_MAN",
            "ST_CLERK",
            "ST_CLERK",
            "SA_REP",
            "SA_REP",
            "SA_REP",
            "SA_REP",
            "SA_REP",
            "SA_REP",
            "SH_CLERK",
            "SH_CLERK",
            "SH_CLERK",
            "SH_CLERK",
            "HR_REP",
            "AC_MGR"
          ],
          [
            24000,
            4800,
            4200,
            9000,
            11000,
            2900,
            2800,
            6500,
            2200,
            3200,
            9500,
            7000,
            9500,
            6800,
            6400,
            6100,
            4000,
            3200,
            2600,
            2600,
            6500,
            12000
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.25,
            0.25,
            0.15,
            0.1,
            0.1,
            0.1,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0,
            103,
            103,
            108,
            100,
            114,
            114,
            100,
            120,
            123,
            145,
            146,
            147,
            147,
            147,
            148,
            123,
            123,
            124,
            124,
            101,
            101
          ],
          [
            90,
            60,
            60,
            100,
            30,
            30,
            30,
            50,
            50,
            50,
            80,
            80,
            80,
            80,
            80,
            80,
            50,
            50,
            50,
            50,
            40,
            110
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            24000,
            12000,
            11500,
            11000,
            11000,
            10000,
            9500,
            9500,
            9000,
            9000,
            8800,
            8200,
            8000,
            8000,
            7800,
            7700,
            7500,
            7000,
            6900,
            6800,
            6500,
            6500,
            6400,
            6200,
            6100,
            4800,
            4200,
            4200,
            4100,
            4000,
            3600,
            3300,
            3200,
            3200,
            3200,
            3100,
            3100,
            2900,
            2800,
            2800,
            2600,
            2600,
            2600,
            2500,
            2500,
            2500,
            2400,
            2200
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0.25,
            0,
            0.3,
            0.2,
            0.25,
            0.15,
            0,
            0,
            0.25,
            0,
            0.2,
            0.3,
            0,
            0,
            0.3,
            0.25,
            0,
            0.1,
            0,
            0,
            0.1,
            0.1,
            0.1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/hr_1/employees.csv')\ndf_filtered = df[df['FIRST_NAME'].str.contains('[DS]')].copy()\ndf_filtered.plot(kind='scatter', x='SALARY', y='COMMISSION_PCT', ax=ax)\nax.set_xlabel('Salary')\nax.set_ylabel('Commission Percentage')\nax.set_title('Correlation between Salary and Commission Percentage for Employees with \"D\" or \"S\" in their First Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1580": {
    "0": {
      "belong": "Kerry",
      "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by month.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "1987-06",
            "1987-07",
            "1987-08",
            "1987-09",
            "1987-10"
          ]
        ],
        "y_data": [
          [
            4,
            3,
            18,
            4,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "June",
            "July",
            "Aug",
            "Sept",
            "Oct"
          ]
        ],
        "y_data": [
          [
            14,
            31,
            31,
            29,
            1
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": false,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/hr_1/employees.csv')\n\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf_filtered = df[(df['SALARY'] >= 8000) & (df['SALARY'] <= 12000) & ((~df['COMMISSION_PCT'].isnull()) | (df['DEPARTMENT_ID'] != 40))]\ndf_filtered['hire_month'] = df_filtered['HIRE_DATE'].dt.to_period('M')\nhire_date_counts = df_filtered['hire_month'].value_counts().sort_index()\n\nax.bar(hire_date_counts.index.astype(str), hire_date_counts.values)\nax.xaxis.set_major_locator(plt.MaxNLocator(12))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\nplt.xticks(rotation=45, ha=\"right\")\nax.set_xlabel('Hire Date (Month)')\nax.set_ylabel('Number of Employees')\nax.set_title('Distribution of Hire Dates (Salary 8000-12000, Commission Not Null or Department != 40)')\nfig.suptitle('')\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1807": {
    "0": {
      "belong": "Kerry",
      "question": "For employees with first names that end with the letter 'm', groups and counts the first name to visualize a pie graph.",
      "hardness": "Hard",
      "chart": "Pie",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "William",
            "Adam",
            "Payam"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Adam",
            "Payam",
            "William"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": null,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"hr_1\"\ndf_name = \"employees\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_m = df[df['FIRST_NAME'].str.endswith('m')]\nname_counts = df_m['FIRST_NAME'].value_counts()\nname_counts.plot(kind='pie',ax=ax, autopct='%1.1f%%',title='Distribution of First Names Ending in \"m\"')\nax.set_ylabel('')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1831": {
    "0": {
      "belong": "Kerry",
      "question": "For those employees whose first name does not contain the letter M, sum their salary by binning the hire date into the day of week interval for visualizing a bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ]
        ],
        "y_data": [
          [
            75800,
            68100,
            116200,
            70400,
            92000,
            78700,
            72300
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            75800,
            68100,
            116200,
            70400,
            92000,
            78700,
            72300
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf['DAY_OF_WEEK'] = df['HIRE_DATE'].dt.dayofweek\ndf['FIRST_NAME'] = df['FIRST_NAME'].str.lower()\ndf_filtered = df[~df['FIRST_NAME'].str.contains('m')]\nsalary_by_day = df_filtered.groupby('DAY_OF_WEEK')['SALARY'].sum()\nsalary_by_day.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of Week')\nax.set_ylabel('Total Salary')\nax.set_title('Total Salary by Day of Week (Employees without \"M\" in First Name)')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2615": {
    "0": {
      "belong": "Kerry",
      "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check', bin the payment date by month and count them by a bar chart",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "2018-02",
            "2018-03"
          ]
        ],
        "y_data": [
          [
            1,
            13
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Feb",
            "Mar"
          ]
        ],
        "y_data": [
          [
            1,
            13
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndatabase_name = 'products_for_hire'\ndf_name = 'payments'\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['payment_date'] = pd.to_datetime(df['payment_date'])\ndf['month'] = df['payment_date'].dt.to_period('M')\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\nmonthly_counts = filtered_df.groupby('month')['payment_id'].count()\nmonthly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Payment Month')\nax.set_ylabel('Number of Payments')\nax.set_title('Number of Payments with Amount Paid > 300 or Payment Type = Check, Binned by Month')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2617": {
    "0": {
      "belong": "Kerry",
      "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart",
      "hardness": "Hard",
      "chart": "Line",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "2018-02-27",
            "2018-03-02",
            "2018-03-03",
            "2018-03-09",
            "2018-03-12",
            "2018-03-17",
            "2018-03-19",
            "2018-03-22",
            "2018-03-23"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            3,
            1,
            2,
            2,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"products_for_hire\"\ndf_name = \"payments\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['payment_date'] = pd.to_datetime(df['payment_date'])\nfiltered_df = df[(df['amount_paid'] > 300) | (df['payment_type_code'] == 'Check')]\npayment_counts = filtered_df.groupby('payment_date')['payment_id'].count().reset_index()\npayment_counts = payment_counts.sort_values(by='payment_date')\nax.plot(payment_counts['payment_date'],payment_counts['payment_id'])\nax.set_xlabel('Payment Date')\nax.set_ylabel('Number of Payments')\nax.set_title('Number of Payments with Amount Paid > 300 or Payment Type = Check')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2656": {
    "0": {
      "belong": "Kerry",
      "question": "Show the countries that have managers of age above 50 or below 46, and count them by a pie chart",
      "hardness": "Hard",
      "chart": "Pie",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "United States",
            "England",
            "Australia"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Australia",
            "England",
            "United States"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": null,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"railway\"\ndf_name = \"manager\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[(df['Age'] > 50) | (df['Age'] < 46)]\ncountry_counts = df_filtered['Country'].value_counts()\ncountry_counts.plot(kind='pie', autopct='%1.1f%%', ax=ax)\nax.set_ylabel('')\nax.set_title('Countries with Managers Above 50 or Below 46 Years Old')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2657": {
    "0": {
      "belong": "Kerry",
      "question": "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "United States",
            "England",
            "Australia"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Australia",
            "England",
            "United States"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'railway'\ndf_name = 'manager'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[(df['Age'] > 50) | (df['Age'] < 46)]\ncountry_counts = df_filtered['Country'].value_counts()\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Managers')\nax.set_title('Countries with Managers Above 50 or Below 46 Years Old')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2750": {
    "0": {
      "belong": "Kerry",
      "question": "What is the total number of captains in each rank and class? Let class as X-axis, and categorize by rank with a stacked bar chart.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Armed schooner",
            "Cutter",
            "Frigate",
            "Sloop-of-war",
            "Third-rate ship of the line"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            1
          ],
          [
            1,
            1,
            0,
            0,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Armed schooner",
            "Cutter",
            "Frigate",
            "Sloop-of-war",
            "Third-rate ship of the line"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            1
          ],
          [
            1,
            1,
            0,
            0,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'ship_1'\ndf_name = 'captain'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nct = pd.crosstab(df['Class'],df['Rank'])\nct.plot(kind='bar',stacked=True,ax=ax)\nax.set_xlabel('Class')\nax.set_ylabel('Number of Captains')\nax.set_title('Total Number of Captains in Each Rank and Class')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2850": {
    "0": {
      "belong": "Kerry",
      "question": "What are the top 5 countries by number of invoices and how many do they have. Plot them as bar chart.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "USA",
            "Canada",
            "France",
            "Brazil",
            "Germany"
          ]
        ],
        "y_data": [
          [
            91,
            56,
            35,
            35,
            28
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "USA",
            "Canada",
            "Brazil",
            "France",
            "Germany"
          ]
        ],
        "y_data": [
          [
            91,
            56,
            35,
            35,
            28
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'store_1'\ndf_name = 'invoices'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ncountry_counts = df['billing_country'].value_counts().nlargest(5)\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Invoices')\nax.set_title('Top 5 Countries by Number of Invoices')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2851": {
    "0": {
      "belong": "Kerry",
      "question": "Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Chile",
            "Hungary",
            "Ireland",
            "Czech Republic",
            "Austria",
            "Finland",
            "Netherlands",
            "India",
            "USA",
            "Norway"
          ]
        ],
        "y_data": [
          [
            6.659999999999999,
            6.517142857142857,
            6.517142857142857,
            6.445714285714287,
            6.088571428571428,
            5.945714285714286,
            5.8028571428571425,
            5.78923076923077,
            5.747912087912088,
            5.659999999999999
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Chile",
            "Hungary",
            "Ireland",
            "Czech Republic",
            "Austria",
            "Finland",
            "Netherlands",
            "India",
            "USA",
            "Norway"
          ]
        ],
        "y_data": [
          [
            6.659999999999998,
            6.517142857142857,
            6.517142857142857,
            6.445714285714287,
            6.088571428571428,
            5.945714285714287,
            5.802857142857143,
            5.789230769230769,
            5.747912087912091,
            5.659999999999998
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'store_1'\ndf_name = 'invoices'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ntop_countries = df.groupby('billing_country')['total'].mean().nlargest(10)\ntop_countries.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Average Invoice Size')\nax.set_title('Top 10 Countries by Average Invoice Size')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2857": {
    "0": {
      "belong": "Kerry",
      "question": "Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "USA",
            "Canada",
            "France",
            "Brazil",
            "Germany",
            "United Kingdom",
            "Czech Republic",
            "Portugal"
          ]
        ],
        "y_data": [
          [
            523.06,
            303.96,
            195.1,
            190.1,
            156.48,
            112.86,
            90.24000000000001,
            77.24
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "USA",
            "Canada",
            "France",
            "Brazil",
            "Germany",
            "United Kingdom",
            "Czech Republic",
            "Portugal"
          ]
        ],
        "y_data": [
          [
            523.0600000000003,
            303.95999999999987,
            195.09999999999997,
            190.1,
            156.48,
            112.86,
            90.24,
            77.23999999999998
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndatabase_name = 'store_1'\ndf_name = 'invoices'\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ntop_8_countries = df.groupby('billing_country')['total'].sum().nlargest(8)\ntop_8_countries.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Total Invoice Size')\nax.set_title('Top 8 Countries by Total Invoice Size')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2998": {
    "0": {
      "belong": "Kerry",
      "question": "A bar chart for what are the number of the dates of transactions with at least 100 share count or amount bigger than 100? Bin date by weekday.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Friday",
            "Monday",
            "Saturday",
            "Sunday",
            "Tuesday",
            "Wednesday"
          ]
        ],
        "y_data": [
          [
            3,
            1,
            1,
            3,
            3,
            3
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Tue",
            "Wed",
            "Thur",
            "Fri",
            "Sat",
            "Sun"
          ]
        ],
        "y_data": [
          [
            1,
            3,
            3,
            0,
            3,
            1,
            3
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/tracking_share_transactions/transactions.csv')\ndf['date_of_transaction'] = pd.to_datetime(df['date_of_transaction'])\ndf['weekday'] = df['date_of_transaction'].dt.day_name()\ndf_filtered = df[(df['share_count'] >= 100) | (df['amount_of_transaction'] > 100)]\nweekday_counts = df_filtered.groupby('weekday')['date_of_transaction'].count()\nweekday_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Number of Transactions')\nax.set_title('Number of Transactions with at least 100 shares or amount > 100, binned by weekday')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3222": {
    "0": {
      "belong": "Kerry",
      "question": "A bar chart shows the number of appellations whose score is higher than 93, and ordered by Name.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": "nvBench is wrong",
      "fig_data": {
        "x_data": [
          [
            "Amador County",
            "Anderson Valley",
            "Bennett Valley",
            "Carneros",
            "Chalk Hill",
            "Dry Creek Valley",
            "Napa Valley",
            "Paso Robles",
            "Russian River Valley",
            "Rutherford",
            "Santa Lucia Highlands",
            "Santa Maria Valley",
            "Sonoma Coast",
            "Sonoma County",
            "Sonoma Valley",
            "St. Helena",
            "Sta. Rita Hills"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            14,
            2,
            11,
            1,
            6,
            1,
            5,
            6,
            2,
            1,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Amador County",
            "Anderson Valley",
            "Bennett Valley",
            "Carneros",
            "Chalk Hill",
            "Dry Creek Valley",
            "Napa Valley",
            "Paso Robles",
            "Russian River Valley",
            "Rutherford",
            "Santa Lucia Highlands",
            "Santa Maria Valley",
            "Sonoma Coast",
            "Sonoma County",
            "Sonoma Valley",
            "St. Helena",
            "Sta. Rita Hills"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            14,
            2,
            11,
            1,
            6,
            1,
            5,
            6,
            2,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'wine_1'\ndf_name = 'wine'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nhigh_score_appellations = df[df['Score'] > 93]['Appelation'].value_counts().sort_index()\nhigh_score_appellations.plot(kind='bar', ax=ax)\nax.set_xlabel('Appelation')\nax.set_ylabel('Number of Wines')\nax.set_title('Number of Appellations with Score > 93')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3227": {
    "0": {
      "belong": "Kerry",
      "question": "For those wines whose price is bigger than 100, group by grape, count their total number of each year and sort by year in asc in a bar chart.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Cabernet Sauvingnon",
            "Grenache",
            "Syrah"
          ]
        ],
        "y_data": [
          [
            4,
            1,
            1
          ],
          [
            11,
            1,
            1
          ],
          [
            2,
            0,
            0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2006",
            "2007",
            "2008"
          ]
        ],
        "y_data": [
          [
            4,
            11,
            2
          ],
          [
            1,
            1,
            0
          ],
          [
            1,
            1,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"wine_1\"\ndf_name = \"wine\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['Price'] > 100]\ndf_grouped = df_filtered.groupby(['Grape', 'Year']).size().unstack(fill_value=0)\ndf_sorted = df_grouped.sort_index(axis=1)\ndf_sorted.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Grape')\nax.set_ylabel('Number of Wines')\nax.set_title('Number of Wines per Grape and Year (Price > 100)')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3229": {
    "0": {
      "belong": "Kerry",
      "question": "A bar chart listing the number of wines whose price is bigger than 100 ordered by year.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2006,
            2007,
            2008
          ]
        ],
        "y_data": [
          [
            6,
            13,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2006",
            "2007",
            "2008"
          ]
        ],
        "y_data": [
          [
            6,
            13,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"wine_1\"\ndf_name = \"wine\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['Price'] > 100]\nprice_by_year = df_filtered.groupby('Year')['Price'].count()\nprice_by_year.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Wines (Price > 100)')\nax.set_title('Number of Wines with Price > 100 Ordered by Year')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1484@x_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "List the number of games in each season and group by away team in a group line chart, and order in asc by the X-axis please.",
      "hardness": "Hard",
      "chart": "Grouping Line",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013
          ]
        ],
        "y_data": [
          [
            NaN,
            NaN,
            2.0,
            1.0,
            1.0,
            2.0,
            1.0
          ],
          [
            1.0,
            2.0,
            1.0,
            1.0,
            1.0,
            3.0,
            1.0
          ],
          [
            2.0,
            1.0,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            2,
            1,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            1,
            1,
            3,
            1
          ],
          [
            2,
            1,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'game_injury'\ndf_name = 'game'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ngames_per_season = df.groupby(['Season', 'Away_team'])['id'].count().unstack()\ngames_per_season = games_per_season.reindex(sorted(games_per_season.columns), axis=1)\ngames_per_season.plot(kind='line', ax=ax)\nax.set_xlabel('Season')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games per Season by Away Team')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1487@y_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "Stacked bar chart of how many away team for with each Home_team in each away team, rank from low to high by the y-axis.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Quruvchi",
            "Bunyodkor",
            "Pakhtakor"
          ]
        ],
        "y_data": [
          [
            1.0,
            9.0,
            NaN
          ],
          [
            NaN,
            NaN,
            3.0
          ],
          [
            NaN,
            NaN,
            7.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Quruvchi",
            "Bunyodkor",
            "Pakhtakor"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            9
          ],
          [
            3,
            7,
            0
          ],
          [
            0,
            0,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'game_injury'\ndf_name = 'game'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\naway_team_counts = df.groupby(['Home_team', 'Away_team'])['Away_team'].count().unstack()\naway_team_counts = away_team_counts.reindex(columns=['Pakhtakor', 'Quruvchi', 'Bunyodkor'])\naway_team_counts = away_team_counts.sort_values(by='Pakhtakor', ascending=True)\naway_team_counts.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Home Team')\nax.set_ylabel('Number of Away Games')\nax.set_title('Stacked Bar Chart of Away Teams for Each Home Team')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1488@x_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team, and I want to list x-axis in descending order.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Pakhtakor",
            "Bunyodkor",
            "Quruvchi"
          ]
        ],
        "y_data": [
          [
            7.0,
            NaN,
            NaN
          ],
          [
            NaN,
            9.0,
            1.0
          ],
          [
            3.0,
            NaN,
            NaN
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Quruvchi",
            "Pakhtakor",
            "Bunyodkor"
          ]
        ],
        "y_data": [
          [
            0,
            7,
            0
          ],
          [
            1,
            0,
            9
          ],
          [
            0,
            3,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'game_injury'\ndf_name = 'game'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nhome_away_count = df.groupby(['Home_team', 'Away_team']).size().unstack()\nhome_away_count = home_away_count.reindex(home_away_count.sum(axis=1).sort_values(ascending=False).index)\nhome_away_count.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Home Team')\nax.set_ylabel('Number of Games')\nax.set_title('Number of Games for Each Home Team Grouped by Away Team')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1413@y_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "How many flights with price higher than 300 for each destination city? Return a bar chart, and order in ascending by the total number.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Tokyo",
            "Honolulu"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Tokyo",
            "Honolulu"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"flight_1\"\ndf_name = \"flight\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['price'] > 300]\ndestination_counts = df_filtered['destination'].value_counts().sort_values()\ndestination_counts.plot(kind='barh', ax=ax)\nax.set_xlabel('Number of Flights')\nax.set_ylabel('Destination City')\nax.set_title('Number of Flights with Price > 300 per Destination')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "298@y_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "For those dates with a max temperature greater than or equal to 80, I want to know the number of days on the day of the week interval using a bar chart, could you show from high to low by the Y?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": "nvBench data were wrong",
      "nv_data": {
        "x_data": [
          [
            "Mon",
            "Thur",
            "Wed",
            "Sun",
            "Sat",
            "Fri",
            "Tue"
          ]
        ],
        "y_data": [
          [
            25,
            32,
            28,
            24,
            25,
            25,
            20
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'bike_1'\ndf_name = 'weather'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['day_of_week'] = df['date'].dt.day_name()\ndf_filtered = df[df['max_temperature_f'] >= 80]\nday_counts = df_filtered['day_of_week'].value_counts()\nsns.barplot(x=day_counts.index, y=day_counts.values, ax=ax, order=day_counts.index)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Number of Days')\nax.set_title('Number of Days with Max Temperature >= 80\u00b0F by Day of the Week')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "303@x_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "Use a line chart to show the change in maximum temperature among all regions in July 2015, with the x-axis in ascending order,Complete monthly data is required.",
      "hardness": "Hard",
      "chart": "Line",
      "isDataCorrect": false,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "2015-07-01",
            "2015-07-02",
            "2015-07-03",
            "2015-07-04",
            "2015-07-05",
            "2015-07-06",
            "2015-07-07",
            "2015-07-08",
            "2015-07-09",
            "2015-07-10",
            "2015-07-11",
            "2015-07-12",
            "2015-07-13",
            "2015-07-14",
            "2015-07-15",
            "2015-07-16",
            "2015-07-17",
            "2015-07-18",
            "2015-07-19",
            "2015-07-20",
            "2015-07-21",
            "2015-07-22",
            "2015-07-23",
            "2015-07-24",
            "2015-07-25",
            "2015-07-26",
            "2015-07-27",
            "2015-07-28",
            "2015-07-29",
            "2015-07-30",
            "2015-07-31"
          ]
        ],
        "y_data": [
          [
            91,
            79,
            81,
            80,
            81,
            78,
            78,
            74,
            74,
            73,
            78,
            78,
            80,
            75,
            83,
            85,
            81,
            79,
            89,
            87,
            76,
            77,
            75,
            78,
            75,
            79,
            102,
            94,
            89,
            81,
            78
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"bike_1\"\ndf_name = \"weather\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf_july_2015 = df[(df['date'].dt.year == 2015) & (df['date'].dt.month == 7)]\ndf_july_2015 = df_july_2015.sort_values(by='date')\nax.plot(df_july_2015['date'], df_july_2015['max_temperature_f'])\nax.set_xlabel('Date')\nax.set_ylabel('Maximum Temperature (\u00b0F)')\nax.set_title('Change in Maximum Temperature in July 2015')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "330@y_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "Count those days for each year and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, and display the number of date in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2013,
            2014
          ]
        ],
        "y_data": [
          [
            1.0,
            NaN
          ],
          [
            1.0,
            1.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2014",
            "2013"
          ]
        ],
        "y_data": [
          [
            1,
            1
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = 'bike_1'\ndf_name = 'weather'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['zip_code'] = df['zip_code'].astype(str)\n\nmin_dew_point_94107 = df[df['zip_code'] == '94107']['min_dew_point_f'].min()\n\ndf_filtered = df[df['min_dew_point_f'] < min_dew_point_94107]\ndaily_counts = df_filtered.groupby(['year', 'zip_code'])['date'].count().reset_index()\ndaily_counts = daily_counts.sort_values(by=['year', 'date'], ascending=[True, True])\n\ndaily_counts['zip_code'] = daily_counts['zip_code'].astype(str)\ndaily_counts = daily_counts.groupby(['year', 'zip_code'])['date'].sum().reset_index()\n\ndaily_counts_pivot = daily_counts.pivot(index='year', columns='zip_code', values='date')\n\ndaily_counts_pivot.plot(kind='bar', ax=ax, stacked=True)\nax.set_xlabel('Year')\nax.set_ylabel('Count of Days')\nax.set_title('Count of Days with Min Dew Point Lower than 94107 Minimum')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "349@y_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "On which day has it neither been foggy nor rained in the zip code of 94107, and bin by year, count them by a bar chart, sort by the y axis in desc.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2014,
            2015,
            2013
          ]
        ],
        "y_data": [
          [
            267,
            202,
            105
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2014",
            "2015",
            "2013"
          ]
        ],
        "y_data": [
          [
            275,
            206,
            106
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/bike_1/weather.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['no_fog_rain'] = ~df['events'].isin(['Fog', 'Rain', 'Fog-Rain', 'rain', 'Rain-Thunderstorm'])\ndf_94107 = df[df['zip_code'] == 94107]\nyearly_counts = df_94107[df_94107['no_fog_rain']].groupby('year')['date'].count()\nyearly_counts = yearly_counts.sort_values(ascending=False)\nyearly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Count of Days with No Fog or Rain')\nax.set_title('Days with Neither Fog Nor Rain (Zip Code 94107)')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "927@y_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "How many accounts are opened in each day? Bin the account open day by weekday and group by other account details in a stacked bar chart, and rank by the y axis in ascending.",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "2008-05-04",
            "2009-06-13",
            "2010-06-16",
            "2010-10-22",
            "2011-03-29",
            "2012-05-04",
            "2012-07-09",
            "2014-05-30",
            "2014-08-11",
            "2014-12-28",
            "2015-02-02",
            "2015-11-03",
            "2016-04-25",
            "2016-07-30",
            "2017-05-29"
          ]
        ],
        "y_data": [
          [
            NaN,
            1.0,
            1.0,
            1.0,
            NaN,
            1.0,
            NaN,
            1.0,
            1.0,
            NaN,
            1.0,
            NaN,
            NaN,
            1.0,
            NaN
          ],
          [
            1.0,
            NaN,
            NaN,
            NaN,
            1.0,
            NaN,
            1.0,
            NaN,
            NaN,
            1.0,
            NaN,
            1.0,
            1.0,
            NaN,
            1.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Thur",
            "Wed",
            "Sat",
            "Sun",
            "Tue",
            "Fri",
            "Mon"
          ]
        ],
        "y_data": [
          [
            0,
            1,
            2,
            0,
            0,
            3,
            2
          ],
          [
            0,
            0,
            0,
            2,
            2,
            0,
            3
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": false,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": false,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'customers_and_invoices'\ndf_name = 'accounts'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['date_account_opened'] = pd.to_datetime(df['date_account_opened'])\ndf['day_of_week'] = df['date_account_opened'].dt.day_name()\ndf['open_day'] = df['date_account_opened'].dt.date\ndaily_accounts = df.groupby(['open_day', 'other_account_details']).size().unstack()\ndaily_accounts = daily_accounts.reindex(daily_accounts.sum(axis=1).sort_values().index)\ndaily_accounts.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Account Open Day')\nax.set_ylabel('Number of Accounts')\nax.set_title('Number of Accounts Opened Each Day, Binned by Weekday and Grouped by Account Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "942@x_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "How many accounts are opened in each year? Show a group line chart that group by other account details, and could you order by the x axis in asc?",
      "hardness": "Extra Hard",
      "chart": "Grouping Line",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2008,
            2009,
            2010,
            2011,
            2012,
            2014,
            2015,
            2016,
            2017
          ]
        ],
        "y_data": [
          [
            NaN,
            1.0,
            2.0,
            NaN,
            1.0,
            2.0,
            1.0,
            1.0,
            NaN
          ],
          [
            1.0,
            NaN,
            NaN,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017"
          ]
        ],
        "y_data": [
          [
            0,
            1,
            2,
            0,
            1,
            0,
            2,
            1,
            1,
            0
          ],
          [
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/customers_and_invoices/accounts.csv')\ndf['date_account_opened'] = pd.to_datetime(df['date_account_opened'])\ndf['year'] = df['date_account_opened'].dt.year\naccount_counts = df.groupby(['year', 'other_account_details'])['account_id'].count().unstack()\naccount_counts = account_counts.reindex(sorted(account_counts.index), axis=0)\naccount_counts.plot(kind='line', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts Opened')\nax.set_title('Number of Accounts Opened Each Year by Account Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2497@y_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart, I want to rank y axis in desc order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": "nvBench was wrong",
      "fig_data": {
        "x_data": [
          [
            2001,
            2004
          ]
        ],
        "y_data": [
          [
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2004",
            "2001",
            "2003",
            "2002"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'party_host'\ndf_name = 'party'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[(df['Party_Theme'] == 'Spring') | (df['Party_Theme'] == 'Teqnology')]\nlast_year_counts = df_filtered['Last_year'].value_counts().sort_values(ascending=False)\nlast_year_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Year')\nax.set_ylabel('Count')\nax.set_title('Last Year of Spring and Teqnology Parties')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2737@y_name@DESC": {
    "0": {
      "belong": "Kerry",
      "question": "Draw a bar chart for how many captains with younger than 50 are in each rank?, and show Y-axis in descending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Midshipman",
            "Lieutenant",
            "Commander, junior captain"
          ]
        ],
        "y_data": [
          [
            3,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Midshipman",
            "Lieutenant",
            "Commander, junior captain"
          ]
        ],
        "y_data": [
          [
            3,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"ship_1\"\ndf_name = \"captain\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['age'] < 50]\nrank_counts = df_filtered['Rank'].value_counts()\nrank_counts = rank_counts.sort_values(ascending=False)\nrank_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Rank')\nax.set_ylabel('Number of Captains')\nax.set_title('Number of Captains Younger Than 50 in Each Rank')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2805@y_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "A bar chart for listing the number of the names of products that are not in any event, sort the number of product name in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Business Policy",
            "Business Policy B",
            "Conference Equipments",
            "Trading Policy",
            "Trading Policy B",
            "Special Dinning",
            "Men suits",
            "TV Equipments",
            "Dinning"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            2,
            2,
            3,
            3
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Business Policy",
            "Business Policy B",
            "Men suits",
            "Dinning"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'solvency_ii'\ndf_name = 'products'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nproduct_counts = df['Product_Name'].value_counts().sort_values()\nproduct_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Product Name')\nax.set_ylabel('Number of Products')\nax.set_title('Number of Products by Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3236@x_name@ASC": {
    "0": {
      "belong": "Kerry",
      "question": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank X in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Bucella",
            "Carter",
            "Casa Piena",
            "Caymus",
            "Chappellet",
            "Chimeney Rock",
            "Darioush",
            "David Arthur",
            "Dos Lagos",
            "Hourglass",
            "Janzen",
            "Lewis",
            "Morlet",
            "Paul Hobbs",
            "Sine Qua Non"
          ]
        ],
        "y_data": [
          [
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            3,
            1,
            1,
            4
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Bucella",
            "Carter",
            "Casa Piena",
            "Caymus",
            "Chappellet",
            "Chimeney Rock",
            "Darioush",
            "David Arthur",
            "Dos Lagos",
            "Hourglass",
            "Janzen",
            "Lewis",
            "Morlet",
            "Paul Hobbs",
            "Sine Qua Non"
          ]
        ],
        "y_data": [
          [
            1,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            3,
            1,
            1,
            4
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/wine_1/wine.csv')\ndf_filtered = df[df['Price'] > 100]\nwinery_counts = df_filtered['Winery'].value_counts().sort_index()\nwinery_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Winery')\nax.set_ylabel('Number of Wines')\nax.set_title('Number of Wines with Price > 100 per Winery')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1510@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Show the number of companies without a gas station in each main industry with a bar chart, could you list from low to high by the Y?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Conglomerate",
            "Banking",
            "Oil and gas"
          ]
        ],
        "y_data": [
          [
            2,
            3,
            5
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Conglomerate",
            "Banking"
          ]
        ],
        "y_data": [
          [
            2,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'gas_company'\ndf_name = 'company'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nindustry_counts = df['Main_Industry'].value_counts()\nindustry_counts = industry_counts.sort_values()\nindustry_counts.plot(kind='barh',ax=ax)\nax.set_xlabel('Number of Companies')\nax.set_ylabel('Main Industry')\nax.set_title('Number of Companies per Main Industry')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2461@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Draw a bar chart for what is average age of male for different job title?, and show Y in desc order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "doctor",
            "engineer"
          ]
        ],
        "y_data": [
          [
            45.0,
            35.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "doctor",
            "engineer"
          ]
        ],
        "y_data": [
          [
            45,
            35
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'network_2'\ndf_name = 'person'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_male = df[df['gender'] == 'male']\naverage_age_by_job = df_male.groupby('job')['age'].mean().sort_values(ascending=False)\naverage_age_by_job.plot(kind='bar', ax=ax)\nax.set_xlabel('Job Title')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Males for Different Job Titles')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2465@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Draw a bar chart for how many people are under 40 for each gender?, and rank in desc by the x-axis.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "female",
            "male"
          ]
        ],
        "y_data": [
          [
            2,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "male",
            "female"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'network_2'\ndf_name = 'person'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_under40 = df[df['age'] < 40]\ngender_counts = df_under40.groupby('gender')['name'].count().sort_values(ascending=False)\ngender_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Gender')\nax.set_ylabel('Number of People Under 40')\nax.set_title('Number of People Under 40 by Gender')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2517@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Show all ministers who do not belong to Progress Party, and count them by a bar chart, and order in asc by the Y.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Dr. Kwame Nkrumah (MP)",
            "Imoru Egala (MP)",
            "Ebenezer Ako-Adjei (MP)"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Dr. Kwame Nkrumah (MP)",
            "Imoru Egala (MP)",
            "Ebenezer Ako-Adjei (MP)"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/party_people/party.csv')\ndf_filtered = df[df['Party_name'] != 'Progress Party']\nminister_counts = df_filtered['Minister'].value_counts().sort_values()\nminister_counts.plot(kind='barh', ax=ax)\nax.set_xlabel('Count')\nax.set_ylabel('Minister')\nax.set_title('Ministers Not Belonging to Progress Party')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1551@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, and display from low to high by the y axis.",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Friday",
            "Monday",
            "Saturday",
            "Thursday",
            "Wednesday"
          ]
        ],
        "y_data": [
          [
            6940.0,
            6100.0,
            4340.0,
            3300.0,
            9357.142857142857
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Thur",
            "Sat",
            "Fri",
            "Mon",
            "Tue",
            "Wed",
            "Sun"
          ]
        ],
        "y_data": [
          [
            3280,
            4933.333333333333,
            6357.142857142857,
            6525,
            6620,
            7590.909090909091,
            7733.333333333333
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = \"hr_1\"\ndf_name = \"employees\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf['weekday'] = df['HIRE_DATE'].dt.day_name()\ndf['year'] = df['HIRE_DATE'].dt.year\n\ndf_filtered = df[df['FIRST_NAME'].str.contains('[DS]')].copy()\n\nsalary_by_weekday = df_filtered.groupby(['weekday', 'year'])['SALARY'].mean().unstack()\nsalary_by_weekday = salary_by_weekday.reindex(sorted(salary_by_weekday.columns), axis=1)\n\nsalary_by_weekday.plot(kind='bar', stacked=True, ax=ax)\n\nax.set_xlabel('Weekday')\nax.set_ylabel('Average Salary')\nax.set_title('Average Salary by Hire Date Weekday for Employees with D or S in First Name')\nfig.suptitle('')\nplt.xticks(rotation=0)\nplt.tight_layout()\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1622@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart, rank from low to high by the Y.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Sept",
            "Aug"
          ]
        ],
        "y_data": [
          [
            3,
            30
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\nclara_department = df[df['FIRST_NAME'] == 'Clara']['DEPARTMENT_ID'].iloc[0]\ndf_clara_department = df[(df['DEPARTMENT_ID'] == clara_department) & (df['FIRST_NAME'] != 'Clara')]\ndf_clara_department['HIRE_DATE'] = pd.to_datetime(df_clara_department['HIRE_DATE'])\ndf_clara_department['HIRE_MONTH'] = df_clara_department['HIRE_DATE'].dt.to_period('M')\nhire_month_counts = df_clara_department['HIRE_MONTH'].value_counts().sort_values()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nsns.barplot(x=hire_month_counts.index.astype(str), y=hire_month_counts.values, ax=ax)\nax.set_xlabel('Hire Month')\nax.set_ylabel('Number of Employees')\nax.set_title('Employee Hire Month Distribution (excluding Clara)')\nfig.suptitle('')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1627@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Group and count the job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN for visualizing a bar chart, and rank by the names in desc.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "ST_MAN",
            "ST_CLERK",
            "SH_CLERK",
            "SA_REP",
            "SA_MAN",
            "PU_MAN",
            "PU_CLERK",
            "PR_REP",
            "MK_REP",
            "IT_PROG",
            "HR_REP",
            "FI_MGR",
            "FI_ACCOUNT",
            "AD_ASST",
            "AC_MGR",
            "AC_ACCOUNT"
          ]
        ],
        "y_data": [
          [
            5,
            20,
            20,
            30,
            3,
            1,
            5,
            1,
            1,
            5,
            1,
            1,
            5,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "ST_MAN",
            "ST_CLERK",
            "SH_CLERK",
            "SA_REP",
            "SA_MAN",
            "PU_MAN",
            "PU_CLERK",
            "PR_REP",
            "MK_REP",
            "IT_PROG",
            "HR_REP",
            "FI_MGR",
            "FI_ACCOUNT",
            "AD_ASST",
            "AC_MGR",
            "AC_ACCOUNT"
          ]
        ],
        "y_data": [
          [
            5,
            20,
            20,
            30,
            3,
            1,
            5,
            1,
            1,
            5,
            1,
            1,
            5,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nmk_man_salaries = df[df['JOB_ID'] == 'MK_MAN']['SALARY']\nemployees_lower_salary = df[df['SALARY'] < mk_man_salaries.min()]\njob_id_counts = employees_lower_salary['JOB_ID'].value_counts().sort_index(ascending=False)\njob_id_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Job ID')\nax.set_ylabel('Number of Employees')\nax.set_title('Number of Employees with Salary Less Than Minimum MK_MAN Salary')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1703@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Compute the number of each type of job ids for employees who make more than the highest-earning employee with title PU_MAN, with a bar chart, and show by the the number of job id in desc.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "SA_MAN",
            "AD_VP",
            "AD_PRES",
            "FI_MGR",
            "SA_REP",
            "MK_MAN",
            "AC_MGR"
          ]
        ],
        "y_data": [
          [
            3,
            2,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "SA_MAN",
            "AD_VP",
            "SA_REP",
            "MK_MAN",
            "FI_MGR",
            "AD_PRES",
            "AC_MGR"
          ]
        ],
        "y_data": [
          [
            3,
            2,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\npu_man_max_salary = df[df['JOB_ID'] == 'PU_MAN']['SALARY'].max()\nhigh_earners = df[df['SALARY'] > pu_man_max_salary]\njob_id_counts = high_earners['JOB_ID'].value_counts().sort_values(ascending=False)\njob_id_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Job ID')\nax.set_ylabel('Number of Employees')\nax.set_title('Number of Employees with Salary > Max PU_MAN Salary by Job ID')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1802@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart, list by the y-axis in desc.",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "William",
            "Adam",
            "Payam"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "William",
            "Payam",
            "Adam"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"hr_1\"\ndf_name = \"employees\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_m = df[df['FIRST_NAME'].str.endswith('m')]\nname_counts = df_m['FIRST_NAME'].value_counts()\nname_counts.plot(kind='barh', ax=ax)\nax.set_xlabel('Frequency')\nax.set_ylabel('First Name')\nax.set_title('Frequency of First Names Ending in \"m\"')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1835@x_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "For those employees whose first name does not contain the letter M, give me a line chart to show the hire date and the corresponding salaries, show in asc by the x-axis please.",
      "hardness": "Hard",
      "chart": "Line",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "1987-06-17",
            "1987-06-18",
            "1987-06-19",
            "1987-06-20",
            "1987-06-21",
            "1987-06-22",
            "1987-06-23",
            "1987-06-24",
            "1987-06-25",
            "1987-06-26",
            "1987-06-27",
            "1987-06-30",
            "1987-07-01",
            "1987-07-02",
            "1987-07-03",
            "1987-07-04",
            "1987-07-05",
            "1987-07-06",
            "1987-07-10",
            "1987-07-11",
            "1987-07-12",
            "1987-07-13",
            "1987-07-15",
            "1987-07-16",
            "1987-07-19",
            "1987-07-20",
            "1987-07-22",
            "1987-07-23",
            "1987-07-24",
            "1987-07-25",
            "1987-07-26",
            "1987-07-27",
            "1987-07-28",
            "1987-07-29",
            "1987-07-30",
            "1987-07-31",
            "1987-08-01",
            "1987-08-02",
            "1987-08-03",
            "1987-08-04",
            "1987-08-05",
            "1987-08-06",
            "1987-08-07",
            "1987-08-08",
            "1987-08-09",
            "1987-08-10",
            "1987-08-11",
            "1987-08-12",
            "1987-08-13",
            "1987-08-14",
            "1987-08-15",
            "1987-08-16",
            "1987-08-17",
            "1987-08-18",
            "1987-08-19",
            "1987-08-21",
            "1987-08-22",
            "1987-08-24",
            "1987-08-25",
            "1987-08-26",
            "1987-08-28",
            "1987-08-29",
            "1987-08-30",
            "1987-08-31",
            "1987-09-01",
            "1987-09-02",
            "1987-09-04",
            "1987-09-05",
            "1987-09-06",
            "1987-09-08",
            "1987-09-09",
            "1987-09-10",
            "1987-09-11",
            "1987-09-12",
            "1987-09-13",
            "1987-09-14",
            "1987-09-16",
            "1987-09-17",
            "1987-09-18",
            "1987-09-20",
            "1987-09-21",
            "1987-09-22",
            "1987-09-23",
            "1987-09-24",
            "1987-09-25",
            "1987-09-27",
            "1987-09-28",
            "1987-09-30"
          ]
        ],
        "y_data": [
          [
            24000,
            17000,
            17000,
            9000,
            6000,
            4800,
            4800,
            4200,
            12000,
            9000,
            8200,
            6900,
            11000,
            3100,
            2900,
            2800,
            2600,
            2500,
            6500,
            5800,
            3200,
            2700,
            2200,
            3300,
            2100,
            3300,
            2400,
            2200,
            3600,
            3200,
            2700,
            2500,
            3500,
            3100,
            2600,
            2500,
            14000,
            13500,
            12000,
            11000,
            10500,
            10000,
            9500,
            9000,
            8000,
            7500,
            7000,
            10000,
            9500,
            9000,
            8000,
            7500,
            7000,
            10500,
            9500,
            6800,
            6400,
            11500,
            10000,
            9600,
            7300,
            6100,
            11000,
            8800,
            8600,
            8400,
            6200,
            3200,
            3100,
            2800,
            4200,
            4100,
            3400,
            3000,
            3800,
            3600,
            2500,
            4000,
            3900,
            2800,
            3100,
            3000,
            2600,
            2600,
            4400,
            6000,
            6500,
            12000
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'hr_1'\ndf_name = 'employees'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['HIRE_DATE'] = pd.to_datetime(df['HIRE_DATE'])\ndf_filtered = df[~df['FIRST_NAME'].str.contains('M')]\ndf_filtered = df_filtered.sort_values(by='HIRE_DATE')\nax.plot(df_filtered['HIRE_DATE'],df_filtered['SALARY'])\nax.set_xlabel('Hire Date')\nax.set_ylabel('Salary')\nax.set_title('Salary vs. Hire Date (Employees without \"M\" in First Name)')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "754@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code, and order y-axis in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "PP",
            "BK",
            "PPT",
            "AD",
            "CV"
          ]
        ],
        "y_data": [
          [
            2,
            2,
            1,
            3,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "CV",
            "PPT",
            "BK",
            "PP",
            "AD"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2,
            2,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'cre_Doc_Template_Mgt'\ndf_name = 'templates'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['Version_Number'] > 5]\ntemplate_counts = df_filtered.groupby('Template_Type_Code')['Template_ID'].count()\ntemplate_counts = template_counts.reindex(['PP', 'BK', 'PPT', 'AD', 'CV'])\ntemplate_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Template Type Code')\nax.set_ylabel('Number of Templates (Version > 5)')\nax.set_title('Number of Templates with Version Number > 5 per Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "620@x_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart, list by the X in ascending.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Garfield",
            "Gates",
            "Lambeau",
            "Nassau",
            "Painter",
            "Rathbone",
            "Saucon",
            "Stabler",
            "Taylor",
            "Whitman"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Garfield",
            "Gates",
            "Lambeau",
            "Nassau",
            "Painter",
            "Rathbone",
            "Saucon",
            "Stabler",
            "Taylor",
            "Whitman"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'college_2'\ndf_name = 'classroom'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['capacity'] > 50]\nbuilding_counts = df_filtered.groupby('building')['room_number'].count().sort_index()\nbuilding_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Building')\nax.set_ylabel('Number of Rooms (Capacity > 50)')\nax.set_title('Number of Rooms with Capacity Over 50 per Building')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "647@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "How many courses are provided in each year? Visualize with a group line chart grouping by semester, could you list x axis in asc order?",
      "hardness": "Hard",
      "chart": "Grouping Line",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010
          ]
        ],
        "y_data": [
          [
            2,
            9,
            6,
            3,
            4,
            8,
            6,
            1,
            7,
            5
          ],
          [
            3,
            4,
            6,
            4,
            4,
            5,
            6,
            9,
            2,
            6
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2010",
            "2009",
            "2008",
            "2007",
            "2006",
            "2005",
            "2004",
            "2003",
            "2002",
            "2001"
          ]
        ],
        "y_data": [
          [
            5,
            7,
            1,
            6,
            8,
            4,
            3,
            6,
            9,
            2
          ],
          [
            6,
            2,
            9,
            6,
            5,
            4,
            4,
            6,
            4,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/college_2/section.csv')\ndf = df.sort_values(by=['year'])\ncourse_counts = df.groupby(['year','semester'])['course_id'].count().unstack()\ncourse_counts.plot(kind='line',ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Courses')\nax.set_title('Number of Courses Offered Each Year')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "648@x_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of courses provided in each year with a group line chart that groups by semester, list the binning year in asc order.",
      "hardness": "Extra Hard",
      "chart": "Grouping Line",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010
          ]
        ],
        "y_data": [
          [
            2,
            9,
            6,
            3,
            4,
            8,
            6,
            1,
            7,
            5
          ],
          [
            3,
            4,
            6,
            4,
            4,
            5,
            6,
            9,
            2,
            6
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2001",
            "2002",
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010"
          ]
        ],
        "y_data": [
          [
            2,
            9,
            6,
            3,
            4,
            8,
            6,
            1,
            7,
            5
          ],
          [
            3,
            4,
            6,
            4,
            4,
            5,
            6,
            9,
            2,
            6
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/college_2/section.csv')\ndf_grouped = df.groupby(['year','semester'])['course_id'].count().unstack()\ndf_grouped.plot(kind='line',ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Courses')\nax.set_title('Number of Courses Offered Each Year by Semester')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "657@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "How many departments whose budget is more than the average budget in each building? Show me a bar chart, list by the total number in asc.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": null,
      "isStyleCorrect": null,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Brodhead",
            "Bronfman",
            "Linderman",
            "Mercer",
            "Palmer",
            "Thompson",
            "Whitman",
            "Wrigley",
            "Candlestick",
            "Taylor"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": "Error: name 'avg_budget' is not defined",
      "check_integer": null,
      "check_dates": null,
      "check_overflow": null,
      "check_overlap": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'college_2'\ndf_name = 'department'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\navg_budget = df.groupby('building')['budget'].mean()\ndf['above_avg'] = df.apply(lambda row: row['budget'] > avg_budget[row['building']], axis=1)\nbuilding_counts = df.groupby('building')['above_avg'].sum().sort_values()\nbuilding_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Building')\nax.set_ylabel('Number of Departments Above Average Budget')\nax.set_title('Number of Departments with Budget Above Average per Building')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3214@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "A bar chart about the number of countries for all people whose age is smaller than the average, and could you display in desc by the X-axis?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "United States",
            "Australia"
          ]
        ],
        "y_data": [
          [
            5,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "United States",
            "Australia"
          ]
        ],
        "y_data": [
          [
            5,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = 'wedding'\ndf_name = 'people'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\navg_age = df['Age'].mean()\ndf_filtered = df[df['Age'] < avg_age]\ncountry_counts = df_filtered['Country'].value_counts()\ncountry_counts = country_counts.sort_index(ascending=False)\n\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of People')\nax.set_title('Number of Countries for People Younger than Average Age')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2066@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the name and account balance of the customer whose name includes the letter 'a' Visualize them using a bar chart, show y-axis in descending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            1,
            2
          ]
        ],
        "y_data": [
          [
            "Mary",
            "Jack"
          ],
          [
            "saving",
            "checking"
          ],
          [
            2000,
            1000
          ],
          [
            2,
            1
          ],
          [
            30,
            20
          ],
          [
            2,
            1
          ],
          [
            "Utah",
            "Texas"
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mary",
            "Jack"
          ]
        ],
        "y_data": [
          [
            2000,
            1000
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'loan_1'\ndf_name = 'customer'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['cust_name'].str.contains('a')]\ndf_filtered = df_filtered.sort_values('acc_bal',ascending=False)\ndf_filtered.plot(x='cust_name',y='acc_bal',kind='bar',ax=ax)\nax.set_xlabel('Customer Name')\nax.set_ylabel('Account Balance')\nax.set_title('Customer Account Balance')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "680@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Stack bar chart of the number of headquarters vs Industry based on headquarters, display Y-axis in desc order please.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "China",
            "USA",
            "UK",
            "Brazil",
            "France",
            "Germany",
            "Netherlands",
            "Russia"
          ]
        ],
        "y_data": [
          [
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            1.0,
            NaN,
            NaN
          ],
          [
            3.0,
            3.0,
            1.0,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          ],
          [
            NaN,
            2.0,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          ],
          [
            1.0,
            2.0,
            1.0,
            1.0,
            1.0,
            NaN,
            1.0,
            1.0
          ],
          [
            NaN,
            1.0,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "USA",
            "China",
            "UK",
            "Russia",
            "Netherlands",
            "Germany",
            "France",
            "Brazil"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            3,
            3,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            1,
            1,
            1,
            1,
            0,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'company_employee'\ndf_name = 'company'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nheadquarters_industry = df.groupby(['Headquarters', 'Industry']).size().unstack()\nheadquarters_industry = headquarters_industry.sort_values(by='Banking', ascending=False)\nheadquarters_industry.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Headquarters')\nax.set_ylabel('Number of Companies')\nax.set_title('Number of Headquarters vs Industry')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2165@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "What is the name of the technician whose team is not 'NYY', and count them by a bar chart, show by the total number from high to low.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Eddie Collins",
            "Tony Sewell",
            "Mark Sewell",
            "Charlie Hollocher",
            "Lou Boudreau",
            "Joe Cochrane",
            "Mickey Cochrane"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Eddie Collins",
            "Tony Sewell",
            "Mickey Cochrane",
            "Mark Sewell",
            "Lou Boudreau",
            "Joe Cochrane",
            "Charlie Hollocher"
          ]
        ],
        "y_data": [
          [
            2,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"machine_repair\"\ndf_name = \"technician\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['Team'] != 'NYY']\nname_counts = df_filtered['Name'].value_counts()\nname_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Technician Name')\nax.set_ylabel('Count')\nax.set_title('Number of Technicians (excluding NYY team)')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "780@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, could you display in descending by the y axis please?",
      "hardness": "Extra Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "('e', 4)",
            "('b', 0)",
            "('x', 4)",
            "('x', 3)",
            "('x', 1)",
            "('x', 0)",
            "('n', 6)",
            "('n', 4)",
            "('n', 3)",
            "('n', 1)",
            "('n', 0)",
            "('e', 6)",
            "('e', 3)",
            "('b', 1)",
            "('e', 1)",
            "('e', 0)",
            "('c', 6)",
            "('c', 4)",
            "('c', 3)",
            "('c', 1)",
            "('c', 0)",
            "('b', 6)",
            "('b', 4)",
            "('b', 3)",
            "('x', 6)"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Tue",
            "Fri",
            "Thur",
            "Sun",
            "Mon",
            "Wed",
            "Sat"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            4,
            1,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": false,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": false,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndatabase_name = 'cre_Doc_Tracking_DB'\ndf_name = 'document_locations'\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['Date_in_Locaton_To'] = pd.to_datetime(df['Date_in_Locaton_To'])\ndf['weekday'] = df['Date_in_Locaton_To'].dt.dayofweek\ndf['ending_date_bin'] = pd.cut(df['Date_in_Locaton_To'], bins=10)\ndf_grouped = df.groupby(['Location_Code', 'weekday', 'ending_date_bin']).size().unstack()\ndf_grouped = df_grouped.sort_values(by=df_grouped.columns[-1],ascending=False)\ndf_grouped.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Weekday and Ending Date Bin')\nax.set_ylabel('Number of Documents')\nax.set_title('Number of Documents in Different Ending Date Bins by Weekday and Location Code')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1006@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a bar chart, I want to order by the total number in asc please.",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Clothes",
            "Hardware"
          ]
        ],
        "y_data": [
          [
            5,
            8
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\ndf['price_range'] = df['product_price'].apply(lambda x: 'High' if x > 1000 else 'Low' if x < 500 else 'Medium')\nprice_range_counts = df[df['price_range'].isin(['High', 'Low'])].groupby(['product_type_code', 'price_range']).size().unstack()\nprice_range_counts['Total'] = price_range_counts['High'] + price_range_counts['Low']\nprice_range_counts = price_range_counts.sort_values(by='Total')\nprice_range_counts[['High', 'Low']].plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Product Type Code')\nax.set_ylabel('Number of Products')\nax.set_title('Number of Products with Price > 1000 or < 500 per Product Type')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1009@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Show the number of products with price higher than 1000 or lower than 500 for each product name in a bar chart, and could you rank y-axis in descending order?",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Apple",
            "jcrew",
            "Sony",
            "gucci"
          ]
        ],
        "y_data": [
          [
            5,
            3,
            3,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/customers_and_products_contacts/products.csv')\ndf['price_range'] = df['product_price'].apply(lambda x: 'High' if x > 1000 else 'Low' if x < 500 else 'Medium')\nprice_range_counts = df[df['price_range'].isin(['High', 'Low'])].groupby(['product_name', 'price_range']).size().unstack()\nprice_range_counts = price_range_counts.fillna(0)\nprice_range_counts['Total'] = price_range_counts['High'] + price_range_counts['Low']\nprice_range_counts = price_range_counts.sort_values(by='Total', ascending=False)\nprice_range_counts[['High', 'Low']].plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Product Name')\nax.set_ylabel('Number of Products')\nax.set_title('Number of Products with Price > 1000 or < 500')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1242@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "When are the birthdays of customer who are classified as 'Good Customer' status, bin birthday by weekday and count them by a bar chart, could you order y-axis in ascending order?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        ],
        "y_data": [
          [
            2.0,
            1.0,
            NaN,
            1.0,
            NaN,
            1.0,
            1.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Fri",
            "Wed",
            "Sat",
            "Sun",
            "Thur",
            "Tue",
            "Mon"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            1,
            1,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/driving_school/customers.csv')\ndf['date_of_birth'] = pd.to_datetime(df['date_of_birth'])\ndf['weekday'] = df['date_of_birth'].dt.day_name()\ngood_customers = df[df['customer_status_code'] == 'Good Customer']\nweekday_counts = good_customers['weekday'].value_counts()\nweekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nweekday_counts = weekday_counts.reindex(weekday_order)\nweekday_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Weekday')\nax.set_ylabel('Number of Good Customers')\nax.set_title('Birthdays of Good Customers by Weekday')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1419@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "What are the countries of all airlines whose names start with Orbit, and count them by a bar chart, order total number from low to high order.",
      "hardness": "Extra Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Turkey",
            "Azerbaijan",
            "United States"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            4
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Azerbaijan",
            "Turkey",
            "United States"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            4
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'flight_4'\ndf_name = 'airlines'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\norbit_airlines = df[df['name'].str.startswith('Orbit')]\ncountry_counts = orbit_airlines['country'].value_counts().sort_values()\ncountry_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Airlines')\nax.set_title('Countries of Airlines Starting with \"Orbit\"')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "41@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Show the average age for all female students and group them by first name in a bar chart, and could you rank the average of age in asc order?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Susan",
            "Linda",
            "Stacy",
            "Tracy",
            "Lisa",
            "Jandy",
            "Shiela",
            "Sarah"
          ]
        ],
        "y_data": [
          [
            16.0,
            18.0,
            18.0,
            19.0,
            19.5,
            20.0,
            21.0,
            23.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Susan",
            "Linda",
            "Stacy",
            "Tracy",
            "Lisa",
            "Jandy",
            "Shiela",
            "Sarah"
          ]
        ],
        "y_data": [
          [
            16,
            18,
            18,
            19,
            19.5,
            20,
            21,
            23
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'allergy_1'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nfemale_students = df[df['Sex'] == 'F']\naverage_age_by_name = female_students.groupby('Fname')['Age'].mean().sort_values()\naverage_age_by_name.plot(kind='bar', ax=ax)\nax.set_xlabel('First Name')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Female Students by First Name')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "42@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "A bar chart about the number of last name for all female students whose sex is F, and rank in asc by the y-axis.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "Apap",
            "Cheng",
            "Jones",
            "Kim",
            "Lee",
            "Nelson",
            "Prater",
            "Schmidt",
            "Smith"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/allergy_1/student.csv')\nfemale_students = df[df['Sex'] == 'F']\nlname_counts = female_students['LName'].value_counts().sort_values()\nsns.barplot(x=lname_counts.values, y=lname_counts.index, ax=ax)\nax.set_xlabel('Number of Students')\nax.set_ylabel('Last Name')\nax.set_title('Number of Female Students per Last Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "44@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Show the average age for all female students and group them by last name with a bar chart, and could you order the average of age in desc order?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Schmidt",
            "Cheng",
            "Jones",
            "Nelson",
            "Kim",
            "Smith",
            "Apap",
            "Prater",
            "Lee"
          ]
        ],
        "y_data": [
          [
            26.0,
            21.0,
            21.0,
            20.0,
            19.0,
            19.0,
            18.0,
            18.0,
            16.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Schmidt",
            "Jones",
            "Cheng",
            "Nelson",
            "Smith",
            "Kim",
            "Prater",
            "Apap",
            "Lee"
          ]
        ],
        "y_data": [
          [
            26,
            21,
            21,
            20,
            19,
            19,
            18,
            18,
            16
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'allergy_1'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nfemale_students = df[df['Sex'] == 'F']\naverage_age_by_lname = female_students.groupby('LName')['Age'].mean().sort_values(ascending=False)\naverage_age_by_lname.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Female Students by Last Name')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1991@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "For all the claims whose claimed amount is larger than the average, bin the claim date into day of week interval and count them for visualizing a bar chart, order from high to low by the y axis.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            4,
            3
          ]
        ],
        "y_data": [
          [
            4,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Fri",
            "Thur",
            "Wed",
            "Tue",
            "Sun",
            "Sat",
            "Mon"
          ]
        ],
        "y_data": [
          [
            4,
            2,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"insurance_policies\"\ndf_name = \"claims\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['Date_Claim_Made'] = pd.to_datetime(df['Date_Claim_Made'])\navg_claimed = df['Amount_Claimed'].mean()\ndf_filtered = df[df['Amount_Claimed'] > avg_claimed]\ndf_filtered['day_of_week'] = df_filtered['Date_Claim_Made'].dt.dayofweek\nday_counts = df_filtered.groupby('day_of_week')['Claim_ID'].count().sort_values(ascending=False)\nday_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of Week')\nax.set_ylabel('Number of Claims')\nax.set_title('Claims Above Average Amount by Day of Week')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2024@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "For those payments processed with Visa, bin the payment day into Year interval and count them for a bar chart, order from high to low by the y axis.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2017,
            2018
          ]
        ],
        "y_data": [
          [
            3,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2017",
            "2018"
          ]
        ],
        "y_data": [
          [
            3,
            1
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/insurance_policies/payments.csv')\n\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\ndf['Year'] = df['Date_Payment_Made'].dt.year\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\nyearly_counts = visa_payments.groupby('Year')['Payment_ID'].count()\nyearly_counts = yearly_counts.sort_values(ascending=False)\nyearly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Visa Payments')\nax.set_title('Number of Visa Payments per Year')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2028@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart, and could you order y axis in desc order?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2017,
            2018
          ]
        ],
        "y_data": [
          [
            262456.6666666667,
            7343.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2017",
            "2018"
          ]
        ],
        "y_data": [
          [
            262456.6666666667,
            7343
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndatabase_name = 'insurance_policies'\ndf_name = 'payments'\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\ndf['Year'] = df['Date_Payment_Made'].dt.year\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\naverage_amount_by_year = visa_payments.groupby('Year')['Amount_Payment'].mean()\naverage_amount_by_year = average_amount_by_year.sort_values(ascending=False)\naverage_amount_by_year.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Average Amount')\nax.set_title('Average Amount of Visa Payments by Year')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2031@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "For those payments processed with Visa, show me the number of payments of each day of the week using a bar chart, and sort total number in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Sunday",
            "Wednesday",
            "Saturday"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Fri",
            "Mon",
            "Thur",
            "Tue",
            "Sun",
            "Wed",
            "Sat"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            0,
            1,
            1,
            2
          ]
        ]
      },
      "binning": "WEEKDAY",
      "check_run": true,
      "check_integer": false,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": false,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndatabase_name = 'insurance_policies'\ndf_name = 'payments'\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['Date_Payment_Made'] = pd.to_datetime(df['Date_Payment_Made'])\ndf['Day_of_Week'] = df['Date_Payment_Made'].dt.day_name()\nvisa_payments = df[df['Payment_Method_Code'] == 'Visa']\ndaily_counts = visa_payments.groupby('Day_of_Week')['Payment_ID'].count().sort_values()\ndaily_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Day of the Week')\nax.set_ylabel('Number of Visa Payments')\nax.set_title('Number of Visa Payments by Day of the Week')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "490@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "What are the countries of mountains with height bigger than 5000, and count them by a bar chart, and I want to list y-axis in asc order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Kenya",
            "DR Congo Uganda",
            "Tanzania"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "DR Congo Uganda",
            "Kenya",
            "Tanzania"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'climbing'\ndf_name = 'mountain'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nhigh_mountains = df[df['Height'] > 5000]\ncountry_counts = high_mountains['Country'].value_counts()\ncountry_counts = country_counts.sort_values()\ncountry_counts.plot(kind='barh', ax=ax)\nax.set_xlabel('Count')\nax.set_ylabel('Country')\nax.set_title('Countries of Mountains Higher Than 5000m')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2439@x_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "What are the category of music festivals with evaluation \"Awarded\", and count them by a bar chart, I want to list x axis in asc order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Best Song",
            "Best Sound Song"
          ]
        ],
        "y_data": [
          [
            2,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Best Song",
            "Best Sound Song"
          ]
        ],
        "y_data": [
          [
            2,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"music_4\"\ndf_name = \"music_festival\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nawarded_df = df[df['Result'] == 'Awarded']\ncategory_counts = awarded_df['Category'].value_counts().sort_index()\ncategory_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Category')\nax.set_ylabel('Count')\nax.set_title('Category of Music Festivals with Awarded Result')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2815@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Compute the total number in each competition type, and then split by country. Plot a bar chart and show in desc by the x-axis.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Russia",
            "Australia",
            "Italy",
            "Ireland",
            "Spain",
            "Slovenia"
          ]
        ],
        "y_data": [
          [
            2,
            2,
            2,
            1,
            1,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Spain",
            "Slovenia",
            "Russia",
            "Italy",
            "Ireland",
            "Australia"
          ]
        ],
        "y_data": [
          [
            1,
            0,
            2,
            2,
            1,
            2
          ],
          [
            0,
            2,
            1,
            0,
            0,
            0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'sports_competition'\ndf_name = 'competition'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nct = pd.crosstab(df['Country'],df['Competition_type'])\nct = ct.sort_values(by=['Friendly','Tournament'],ascending=False)\nct.plot(kind='bar',stacked=True,ax=ax)\nax.set_xlabel('Country')\nax.set_ylabel('Number of Competitions')\nax.set_title('Total Number of Competitions by Type and Country')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "11@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "How many faculty members do we have for each rank and gender? Plot them as bar chart, I want to sort y axis in asc order.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Instructor",
            "AsstProf",
            "AssocProf",
            "Professor"
          ]
        ],
        "y_data": [
          [
            3.0,
            3.0,
            1.0,
            NaN
          ],
          [
            5.0,
            12.0,
            7.0,
            27.0
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "AssocProf",
            "AsstProf",
            "Instructor",
            "Professor"
          ]
        ],
        "y_data": [
          [
            1,
            3,
            3,
            0
          ],
          [
            7,
            12,
            5,
            27
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/activity_1/faculty.csv')\nrank_gender = df.groupby(['Rank', 'Sex']).size().unstack()\nrank_gender = rank_gender.reindex(['Instructor','AsstProf','AssocProf','Professor'])\nrank_gender.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Rank')\nax.set_ylabel('Number of Faculty Members')\nax.set_title('Number of Faculty Members per Rank and Gender')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "22@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Show the number of male and female assistant professors with a bar chart, list y axis in ascending order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "F",
            "M"
          ]
        ],
        "y_data": [
          [
            3,
            12
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "F",
            "M"
          ]
        ],
        "y_data": [
          [
            3,
            12
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/activity_1/faculty.csv')\ndf_asstprof = df[df['Rank'] == 'AsstProf']\nsex_counts = df_asstprof['Sex'].value_counts().sort_index()\nsex_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Sex')\nax.set_ylabel('Number of Assistant Professors')\nax.set_title('Number of Male and Female Assistant Professors')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1349@x_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Draw a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by year, rank x axis in asc order.",
      "hardness": "Extra Hard",
      "chart": "Grouping Line",
      "isDataCorrect": false,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
          ]
        ]
      },
      "binning": "YEAR",
      "check_run": true,
      "check_integer": true,
      "check_dates": false,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'employee_hire_evaluation'\ndf_name = 'hiring'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf['Start_from'] = pd.to_datetime(df['Start_from'], unit='s')\ndf['Year'] = df['Start_from'].dt.year\ndf_grouped = df.groupby(['Year', 'Is_full_time'])['Start_from'].count().unstack()\ndf_grouped.plot(kind='line', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Employees')\nax.set_title('Change in Number of Employees Hired Over Time, Grouped by Employment Type')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "529@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of professors with a PhD degree in each department Show bar chart, and I want to sort x-axis in desc order.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "ACCT",
            "CIS",
            "BIOL",
            "ENG",
            "MATH",
            "ART",
            "ECON/FIN",
            "HIST",
            "MKT/MGT",
            "PSYCH",
            "SOC"
          ]
        ],
        "y_data": [
          [
            3,
            3,
            2,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "SOC",
            "PSYCH",
            "MKT/MGT",
            "MATH",
            "HIST",
            "ENG",
            "ECON/FIN",
            "CIS",
            "BIOL",
            "ART",
            "ACCT"
          ]
        ],
        "y_data": [
          [
            1,
            1,
            1,
            2,
            1,
            2,
            1,
            3,
            2,
            1,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/college_1/professor.csv')\n\nphd_by_dept = df[df['PROF_HIGH_DEGREE'] == 'Ph.D.'].groupby('DEPT_CODE')['EMP_NUM'].count().sort_values(ascending=False)\n\nphd_by_dept.plot(kind='bar', ax=ax)\nax.set_xlabel('Department Code')\nax.set_ylabel('Number of Professors with PhD')\nax.set_title('Number of Professors with PhD Degree in Each Department')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1215@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of students who are not in the largest major and group by students' first name in a bar chart, and rank from high to low by the y axis.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Eric",
            "Sarah",
            "David",
            "George",
            "Ian",
            "Jun",
            "Lisa",
            "Mark",
            "Michael",
            "Paul",
            "Stacy",
            "William"
          ]
        ],
        "y_data": [
          [
            4,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Eric",
            "Sarah",
            "William",
            "Stacy",
            "Paul",
            "Michael",
            "Mark",
            "Lisa",
            "Jun",
            "Ian",
            "George",
            "David"
          ]
        ],
        "y_data": [
          [
            4,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'dorm_1'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nlargest_major = df['Major'].value_counts().index[0]\ndf_filtered = df[df['Major'] != largest_major]\nstudent_counts = df_filtered.groupby('Fname')['StuID'].count().sort_values(ascending=False)\nstudent_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Student First Name')\nax.set_ylabel('Number of Students')\nax.set_title('Number of Students Not in the Largest Major, Grouped by First Name')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1220@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "What is the average age of male students in each city? Draw a bar chart, show by the names in descending.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": null,
      "nv_data": {
        "x_data": [
          [
            "YYZ",
            "WAS",
            "ROC",
            "PIT",
            "PHL",
            "PEK",
            "NYC",
            "NAR",
            "LOS",
            "LON",
            "HOU",
            "HKG",
            "DET",
            "DAL",
            "CHI",
            "BOS",
            "BAL",
            "ATL"
          ]
        ],
        "y_data": [
          [
            22.5,
            18,
            20,
            19.33333333333333,
            19.5,
            17,
            20.33333333333333,
            18,
            18,
            27,
            17,
            19,
            17,
            18,
            20,
            18,
            18,
            20
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'dorm_1'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nmale_students = df[df['Sex'] == 'M']\naverage_age_by_city = male_students.groupby('city_code')['Age'].mean().sort_values(ascending=False)\nsns.barplot(x=average_age_by_city.index, y=average_age_by_city.values, ax=ax)\nax.set_xlabel('City Code')\nax.set_ylabel('Average Age')\nax.set_title('Average Age of Male Students by City')\nfig.suptitle('')\n\nplt.show()\n",
      "addRule": null,
      "addExample": null
    }
  },
  "1225@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of students whose age is younger than the average age and group by students' first name in a bar chart, could you show in descending by the y axis?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Eric",
            "Mark",
            "Andy",
            "Arthur",
            "Charles",
            "Derek",
            "George",
            "Jun",
            "Linda",
            "Lisa",
            "Michael",
            "Paul",
            "Stacy",
            "Susan",
            "Tracy",
            "William"
          ]
        ],
        "y_data": [
          [
            3,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Eric",
            "Mark",
            "William",
            "Tracy",
            "Susan",
            "Stacy",
            "Paul",
            "Michael",
            "Lisa",
            "Linda",
            "Jun",
            "George",
            "Derek",
            "Charles",
            "Arthur",
            "Andy"
          ]
        ],
        "y_data": [
          [
            3,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/dorm_1/student.csv')\naverage_age = df['Age'].mean()\nyounger_students = df[df['Age'] < average_age]\nstudent_counts = younger_students.groupby('Fname')['StuID'].count().sort_values(ascending=False)\nstudent_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Student First Name')\nax.set_ylabel('Number of Students Younger Than Average Age')\nax.set_title('Number of Students Younger Than Average Age by First Name')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1226@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of students whose age is younger than the average age and group by students' last name in a bar chart, and sort by the Y-axis in descending.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Pang",
            "Lee",
            "Andreou",
            "Tai",
            "Smith",
            "Simms",
            "Schwartz",
            "Schultz",
            "Prater",
            "Norris",
            "Apap",
            "Kim",
            "Han",
            "Goldman",
            "Epp",
            "Brody",
            "Woods"
          ]
        ],
        "y_data": [
          [
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Pang",
            "Lee",
            "Woods",
            "Tai",
            "Smith",
            "Simms",
            "Schwartz",
            "Schultz",
            "Prater",
            "Norris",
            "Kim",
            "Han",
            "Goldman",
            "Epp",
            "Brody",
            "Apap",
            "Andreou"
          ]
        ],
        "y_data": [
          [
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'dorm_1'\ndf_name = 'student'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\navg_age = df['Age'].mean()\ndf_young = df[df['Age'] < avg_age]\ncounts = df_young.groupby('LName')['StuID'].count()\ncounts = counts.sort_values(ascending=False)\ncounts.plot(kind='bar', ax=ax)\nax.set_xlabel('Last Name')\nax.set_ylabel('Number of Students Younger than Average Age')\nax.set_title('Number of Students Younger than Average Age by Last Name')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "279@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month, could you show by the y-axis from high to low please?",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            3,
            2
          ]
        ],
        "y_data": [
          [
            5,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Mar",
            "Feb"
          ]
        ],
        "y_data": [
          [
            5,
            1
          ]
        ]
      },
      "binning": "MONTH",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/behavior_monitoring/behavior_incident.csv')\ndf['date_incident_end'] = pd.to_datetime(df['date_incident_end'])\ndf['month'] = df['date_incident_end'].dt.month\nnoise_incidents = df[df['incident_type_code'] == 'NOISE']\nmonthly_counts = noise_incidents.groupby('month')['date_incident_end'].count()\nmonthly_counts = monthly_counts.sort_values(ascending=False)\nmonthly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Month')\nax.set_ylabel('Number of Incidents')\nax.set_title('Number of Incidents Ending Each Month (Noise)')\nfig.suptitle('')\n\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "3267@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, display in asc by the sum population.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Oceania",
            "South America",
            "Africa",
            "Asia"
          ]
        ],
        "y_data": [
          [
            30401150,
            345780000,
            784475000,
            3705025700
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Oceania",
            "South America",
            "Africa",
            "Asia"
          ]
        ],
        "y_data": [
          [
            30401150,
            345780000,
            784475000,
            3705025700
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'world_1'\ndf_name = 'country'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ncontinents_low_life_expectancy = df.groupby('Continent')['LifeExpectancy'].mean()[df.groupby('Continent')['LifeExpectancy'].mean() < 72].index\ndf_filtered = df[df['Continent'].isin(continents_low_life_expectancy)]\ncontinent_population = df_filtered.groupby('Continent')['Population'].sum()\ncontinent_population = continent_population.sort_values()\ncontinent_population.plot(kind='bar', ax=ax)\nax.set_xlabel('Continent')\nax.set_ylabel('Total Population')\nax.set_title('Total Population of Continents with Average Life Expectancy < 72')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2950@y_name@ASC": {
    "0": {
      "belong": "Dw",
      "question": "Find those years for all exhibitions with ticket prices lower than 15, return a bar chart that groups by year and counts the total number of years, and I want to display in ascending by the total number.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            2006,
            2009
          ]
        ],
        "y_data": [
          [
            1,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "2007",
            "2008",
            "2006",
            "2009"
          ]
        ],
        "y_data": [
          [
            0,
            0,
            1,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'theme_gallery'\ndf_name = 'exhibition'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf_filtered = df[df['Ticket_Price'] < 15]\nyearly_counts = df_filtered.groupby('Year')['Exhibition_ID'].count().sort_values()\nyearly_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Exhibitions')\nax.set_title('Number of Exhibitions with Ticket Price < 15 per Year')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "1979@y_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Find the number of rooms with price higher than 120 for different decor Show bar chart, and list by the Y in descending.",
      "hardness": "Hard",
      "chart": "Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "traditional",
            "modern",
            "rustic"
          ]
        ],
        "y_data": [
          [
            4,
            2,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "traditional",
            "rustic",
            "modern"
          ]
        ],
        "y_data": [
          [
            4,
            2,
            2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": false,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'inn_1'\ndf_name = 'rooms'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nprice_filter = df['basePrice'] > 120\nfiltered_df = df[price_filter]\ndecor_counts = filtered_df.groupby('decor')['RoomId'].count().sort_values(ascending=False)\ndecor_counts.plot(kind='bar', ax=ax)\nax.set_xlabel('Decor')\nax.set_ylabel('Number of Rooms (Price > 120)')\nax.set_title('Number of Rooms with Price Higher Than 120 by Decor')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "2755@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Show me a stacked bar graph, the x-axis is the nationality of ship, and the y-axis is their total number of different nationality and split by ship type, and show X-axis in desc order.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": false,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "United Kingdom",
            "United States"
          ]
        ],
        "y_data": [
          [
            2,
            1
          ],
          [
            3,
            2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "United States",
            "United Kingdom"
          ]
        ],
        "y_data": [
          [
            1,
            2
          ],
          [
            2,
            3
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndf = pd.read_csv('./visEval_dataset/databases/ship_mission/ship.csv')\ndf_nationality_type = df.groupby(['Nationality', 'Type'])['Ship_ID'].count().unstack()\ndf_nationality_type = df_nationality_type.reindex(df_nationality_type.sum(axis=1).sort_values(ascending=False).index)\ndf_nationality_type.plot(kind='bar', stacked=True, ax=ax)\nax.set_xlabel('Nationality')\nax.set_ylabel('Number of Ships')\nax.set_title('Number of Ships by Nationality and Type')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "2756@x_name@DESC": {
    "0": {
      "belong": "Dw",
      "question": "Stack bar chart of the number of type vs Nationality based on type, and list x-axis in descending order.",
      "hardness": "Hard",
      "chart": "Stacked Bar",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            "Cargo ship",
            "Battle ship"
          ]
        ],
        "y_data": [
          [
            3,
            2
          ],
          [
            2,
            1
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            "Cargo ship",
            "Battle ship"
          ]
        ],
        "y_data": [
          [
            3,
            2
          ],
          [
            2,
            1
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = 'ship_mission'\ndf_name = 'ship'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\nct = pd.crosstab(df['Type'],df['Nationality'])\nct = ct.sort_values(by='United Kingdom',ascending=False)\nct.plot(kind='bar',stacked=True,ax=ax)\nax.set_xlabel('Type')\nax.set_ylabel('Number of Ships')\nax.set_title('Number of Ships by Type and Nationality')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  },
  "4015": {
    "0": {
      "belong": "Dw",
      "question": "Show the relationship between the number of staff and the score of the shop. Scatter plot is preferred.",
      "hardness": "Extra Hard",
      "chart": "Scatter",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
          ]
        ],
        "y_data": [
          [
            "1200 Main Street",
            "1111 Main Street",
            "1330 Baltimore Street",
            "909 Walnut Street",
            "414 E. 12th Street",
            "1201 Walnut Street",
            "2345 McGee Street",
            "909 Main Street",
            "1100 Main Street",
            "324 E. 11th Street"
          ],
          [
            13,
            19,
            42,
            27,
            24,
            34,
            425,
            28,
            23,
            16
          ],
          [
            42.0,
            38.0,
            36.0,
            32.0,
            30.0,
            30.0,
            40.0,
            30.0,
            30.0,
            28.0
          ],
          [
            2010,
            2008,
            2010,
            2010,
            2011,
            2010,
            2008,
            2011,
            2006,
            2008
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            13,
            19,
            42,
            27,
            24,
            34,
            425,
            28,
            23,
            16
          ]
        ],
        "y_data": [
          [
            42.0,
            38.0,
            36.0,
            32.0,
            30.0,
            30.0,
            40.0,
            30.0,
            30.0,
            28.0
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": null,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \ndatabase_name = \"coffee_shop\"\ndf_name = \"shop\"\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\ndf.plot(x='Num_of_staff', y='Score', kind='scatter', ax=ax)\nax.set_xlabel('Number of Staff')\nax.set_ylabel('Score')\nax.set_title('Relationship between Number of Staff and Shop Score')\nfig.suptitle('')\nplt.show()\n\n",
      "addRule": null,
      "addExample": null
    }
  },
  "4033": {
    "0": {
      "belong": "Dw",
      "question": "From 1973 to 1979, show the maximum acceleration of cars with 4, 6, and 8 cylinders each year. Line chart.",
      "hardness": "Hard",
      "chart": "Grouping Line",
      "isDataCorrect": true,
      "isStyleCorrect": true,
      "evaluation": null,
      "fig_data": {
        "x_data": [
          [
            1973,
            1974,
            1975,
            1976,
            1977,
            1978,
            1979
          ]
        ],
        "y_data": [
          [
            21.0,
            21.0,
            18.5,
            22.2,
            18.6,
            21.5,
            24.8
          ],
          [
            18.0,
            18.0,
            21.0,
            21.0,
            19.0,
            19.2,
            18.2
          ],
          [
            14.5,
            16.0,
            14.5,
            15.0,
            19.0,
            15.5,
            22.2
          ]
        ]
      },
      "nv_data": {
        "x_data": [
          [
            1973,
            1974,
            1975,
            1976,
            1977,
            1978,
            1979
          ]
        ],
        "y_data": [
          [
            21.0,
            21.0,
            18.5,
            22.2,
            18.6,
            21.5,
            24.8
          ],
          [
            18.0,
            18.0,
            21.0,
            21.0,
            19.0,
            19.2,
            18.2
          ],
          [
            14.5,
            16.0,
            14.5,
            15.0,
            19.0,
            15.5,
            22.2
          ]
        ]
      },
      "binning": "",
      "check_run": true,
      "check_integer": true,
      "check_dates": true,
      "check_overflow": true,
      "check_overlap": true,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfig,ax = plt.subplots(1,1,figsize=(10,4))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n\ndatabase_name = 'car_1'\ndf_name = 'cars_data'\ndf = pd.read_csv('./visEval_dataset/databases/' + database_name + '/' + df_name + '.csv')\n\ndf_filtered = df[(df['Year'] >= 1973) & (df['Year'] <= 1979) & (df['Cylinders'].isin([4, 6, 8]))]\ndf_pivot = df_filtered.pivot_table(index='Year', columns='Cylinders', values='Accelerate', aggfunc='max')\n\ndf_pivot.plot(kind='line', ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Maximum Acceleration')\nax.set_title('Maximum Acceleration of Cars (1973-1979)')\nfig.suptitle('')\nplt.show()",
      "addRule": null,
      "addExample": null
    }
  }
}