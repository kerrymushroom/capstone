import pandas as pd
import openai
import warnings
import re

available_models = {"ChatGPT-4": "gpt-4o"}
selected_models = "ChatGPT-4"
model_type = selected_models
datasets = {}
openai_key = ""
statements = [r'import pandas as',r'import matplotlib.pyplot as',r'plt.subplots\(',r'ax.spines\[.*?\].set_visible\(False\)',r'pd.read_csv\(']
rules = []
examples = """"""

def run_request(question_to_ask, model_type, key):
	if model_type == "gpt-4o" or model_type == "gpt-4o-mini" :
		# Run OpenAI ChatCompletion API
		task = "Generate Python Code Script."
		if model_type == "gpt-4o" or model_type == "gpt-4o-mini":
			# Ensure GPT-4 does not include additional comments
			task = task + "The script should only include executable code, no comments. No need to include pd.read_csv and plt.subplots statement"
		#openai.api_key = key
		client = openai.OpenAI(api_key=key)
		response = client.chat.completions.create(model=model_type,
			messages=[{"role":"system","content":task},{"role":"user","content":question_to_ask}])
		llm_response = response.choices[0].message.content
	return llm_response

def filter_statement(text,statements):
	res = ""
	text = text.replace("\n\n","\n")
	for t in text.split("\n"):
		exist = False
		for line in statements:
			if  re.search(line, t):
				exist = True
				break
		if not exist:
			res = res + t + "\n"
	return res

def get_code(text):
	text = text.replace("```python","```")
	marker = "```"
	findBlock = False
	start_index = text.find(marker)
	if start_index != -1:
		findBlock = True
		end_index = text.find(marker, start_index + len(marker))
	return text if not findBlock else text[start_index + len(marker):end_index].strip()

def get_desc(df_dataset,df_name):
	# Primer function to take a dataframe and its name
	# and the name of the columns
	# and any columns with less than 20 unique values it adds the values to the primer
	# and horizontal grid lines and labeling
	primer_desc = "Use a dataframe called df from \""+df_name+ ".csv\" with columns '" \
		+ "','".join(str(x) for x in df_dataset.columns) + "'. "
	for i in df_dataset.columns:
		if len(df_dataset[i].drop_duplicates()) < 20 and df_dataset.dtypes[i]=="O":
			primer_desc = primer_desc + "\nThe column '" + i + "' has categorical values '" + \
				"','".join(str(x) for x in df_dataset[i].drop_duplicates()) + "'. "
		elif df_dataset.dtypes[i]=="int64" or df_dataset.dtypes[i]=="float64":
			primer_desc = primer_desc + "\nThe column '" + i + "' is type " + str(df_dataset.dtypes[i]) + " and contains numeric values. "	
	primer_desc = primer_desc + "\nLabel the x and y axes appropriately."
	primer_desc = primer_desc + "\nAdd a title. Set the fig suptitle as empty."
	primer_desc = primer_desc + "{}" # Space for additional instructions if needed
	primer_desc = primer_desc + "\nUsing Python version 3.9.12, create a script using the dataframe df to graph the following: "
	return primer_desc

def get_primer_code(df_name):
	primer_code = "import pandas as pd\nimport matplotlib.pyplot as plt\n"
	#primer_code = primer_code + "fig,ax = plt.subplots(1,1,figsize=(10,4))\n"
	#primer_code = primer_code + "ax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False) \n"
	primer_code = primer_code + f"df= pd.read_csv(r'{df_name}.csv')\n" + "# The following codes are generated by LLM:\n"
	return primer_code


def get_output(df_name,question,key,rules=None,example=None):
	chosen_dataset = df_name
	datasets[chosen_dataset] = pd.read_csv(chosen_dataset+'.csv')
	primer_code = get_primer_code(df_name)
	# Execute chatbot query
	if len(openai_key) > 0:
		# Get the primer for this dataset
		primer_desc= get_desc(datasets[chosen_dataset],df_name) 
		if rules is not None:
			# add zero-shot rules for primer_desc
			primer_desc = "".join(rules) + primer_desc
		if example is not None:
			# add one-shot example to the original primer_desc, which describes the column names and data types of a given table
			primer_desc = primer_desc + example
		# Create model, run the request and print the results
		try:
			# Format the question 
			#print("Model: " + model_type)
			question_to_ask = '\n' + primer_desc + question + '\n'
			# print the query question
			#print(question_to_ask) 
			# Run the question
			answer = run_request(question_to_ask, available_models[model_type], key=key)
			# to get code from string block
			answer = get_code(answer)
			# filter statement
			answer = filter_statement(answer,statements)
			# the answer is the completed Python script so add to the beginning of the script to it.
			answer = primer_code + answer
			#print(repr(answer))
			return answer
			#exec(answer)		
		except Exception as e:
			print('Error:', e)
	else:
		raise ValueError("Error: please initialize key first.")